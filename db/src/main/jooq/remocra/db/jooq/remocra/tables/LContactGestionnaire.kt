/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.L_CONTACT_GESTIONNAIRE_CONTACT_ID_KEY
import remocra.db.jooq.remocra.keys.L_CONTACT_GESTIONNAIRE_PKEY
import remocra.db.jooq.remocra.keys.L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_CONTACT_ID_FKEY
import remocra.db.jooq.remocra.keys.L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_GESTIONNAIRE_ID_FKEY
import remocra.db.jooq.remocra.keys.L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_SITE_ID_FKEY
import remocra.db.jooq.remocra.tables.Contact.ContactPath
import remocra.db.jooq.remocra.tables.Gestionnaire.GestionnairePath
import remocra.db.jooq.remocra.tables.Site.SitePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class LContactGestionnaire(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.l_contact_gestionnaire</code>
         */
        val L_CONTACT_GESTIONNAIRE: LContactGestionnaire = LContactGestionnaire()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.l_contact_gestionnaire.contact_id</code>.
     */
    val CONTACT_ID: TableField<Record, UUID?> = createField(DSL.name("contact_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.l_contact_gestionnaire.gestionnaire_id</code>.
     */
    val GESTIONNAIRE_ID: TableField<Record, UUID?> = createField(DSL.name("gestionnaire_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.l_contact_gestionnaire.site_id</code>.
     */
    val SITE_ID: TableField<Record, UUID?> = createField(DSL.name("site_id"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.l_contact_gestionnaire</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.l_contact_gestionnaire</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.l_contact_gestionnaire</code> table reference
     */
    constructor() : this(DSL.name("l_contact_gestionnaire"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, L_CONTACT_GESTIONNAIRE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LContactGestionnairePath : LContactGestionnaire, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): LContactGestionnairePath = LContactGestionnairePath(DSL.name(alias), this)
        override fun `as`(alias: Name): LContactGestionnairePath = LContactGestionnairePath(alias, this)
        override fun `as`(alias: Table<*>): LContactGestionnairePath = LContactGestionnairePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = L_CONTACT_GESTIONNAIRE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(L_CONTACT_GESTIONNAIRE_CONTACT_ID_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_CONTACT_ID_FKEY, L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_GESTIONNAIRE_ID_FKEY, L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_SITE_ID_FKEY)

    private lateinit var _contact: ContactPath

    /**
     * Get the implicit join path to the <code>remocra.contact</code> table.
     */
    fun contact(): ContactPath {
        if (!this::_contact.isInitialized) {
            _contact = ContactPath(this, L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_CONTACT_ID_FKEY, null)
        }

        return _contact
    }

    val contact: ContactPath
        get(): ContactPath = contact()

    private lateinit var _gestionnaire: GestionnairePath

    /**
     * Get the implicit join path to the <code>remocra.gestionnaire</code>
     * table.
     */
    fun gestionnaire(): GestionnairePath {
        if (!this::_gestionnaire.isInitialized) {
            _gestionnaire = GestionnairePath(this, L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_GESTIONNAIRE_ID_FKEY, null)
        }

        return _gestionnaire
    }

    val gestionnaire: GestionnairePath
        get(): GestionnairePath = gestionnaire()

    private lateinit var _site: SitePath

    /**
     * Get the implicit join path to the <code>remocra.site</code> table.
     */
    fun site(): SitePath {
        if (!this::_site.isInitialized) {
            _site = SitePath(this, L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_SITE_ID_FKEY, null)
        }

        return _site
    }

    val site: SitePath
        get(): SitePath = site()
    override fun `as`(alias: String): LContactGestionnaire = LContactGestionnaire(DSL.name(alias), this)
    override fun `as`(alias: Name): LContactGestionnaire = LContactGestionnaire(alias, this)
    override fun `as`(alias: Table<*>): LContactGestionnaire = LContactGestionnaire(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LContactGestionnaire = LContactGestionnaire(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LContactGestionnaire = LContactGestionnaire(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): LContactGestionnaire = LContactGestionnaire(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): LContactGestionnaire = LContactGestionnaire(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): LContactGestionnaire = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): LContactGestionnaire = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): LContactGestionnaire = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): LContactGestionnaire = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): LContactGestionnaire = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): LContactGestionnaire = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): LContactGestionnaire = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): LContactGestionnaire = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): LContactGestionnaire = where(DSL.notExists(select))
}
