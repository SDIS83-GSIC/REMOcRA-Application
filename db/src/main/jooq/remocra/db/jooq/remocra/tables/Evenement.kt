/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.EvenementStatut
import remocra.db.jooq.remocra.enums.EvenementStatutMode
import remocra.db.jooq.remocra.keys.EVENEMENT_PKEY
import remocra.db.jooq.remocra.keys.EVENEMENT__EVENEMENT_EVENEMENT_CRISE_ID_FKEY
import remocra.db.jooq.remocra.keys.EVENEMENT__EVENEMENT_EVENEMENT_TYPE_CRISE_CATEGORIE_ID_FKEY
import remocra.db.jooq.remocra.keys.EVENEMENT__EVENEMENT_UTILISATEUR_ID_FKEY
import remocra.db.jooq.remocra.keys.L_EVENEMENT_DOCUMENT__L_EVENEMENT_DOCUMENT_EVENEMENT_ID_FKEY
import remocra.db.jooq.remocra.keys.MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_EVENEMENT_ID_FKEY
import remocra.db.jooq.remocra.tables.Crise.CrisePath
import remocra.db.jooq.remocra.tables.Document.DocumentPath
import remocra.db.jooq.remocra.tables.LEvenementDocument.LEvenementDocumentPath
import remocra.db.jooq.remocra.tables.MessageEvenement.MessageEvenementPath
import remocra.db.jooq.remocra.tables.TypeCriseCategorie.TypeCriseCategoriePath
import remocra.db.jooq.remocra.tables.Utilisateur.UtilisateurPath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Evenement(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.evenement</code>
         */
        val EVENEMENT: Evenement = Evenement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.evenement.evenement_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("evenement_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.evenement.evenement_type_crise_categorie_id</code>.
     */
    val TYPE_CRISE_CATEGORIE_ID: TableField<Record, UUID?> = createField(DSL.name("evenement_type_crise_categorie_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.evenement.evenement_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("evenement_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.evenement.evenement_description</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("evenement_description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.evenement.evenement_origine</code>.
     */
    val ORIGINE: TableField<Record, String?> = createField(DSL.name("evenement_origine"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.evenement.evenement_date_constat</code>.
     */
    val DATE_CONSTAT: TableField<Record, ZonedDateTime?> = createField(DSL.name("evenement_date_constat"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.evenement.evenement_importance</code>.
     */
    val IMPORTANCE: TableField<Record, Int?> = createField(DSL.name("evenement_importance"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.evenement.evenement_tags</code>.
     */
    val TAGS: TableField<Record, String?> = createField(DSL.name("evenement_tags"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.evenement.evenement_is_closed</code>.
     */
    val IS_CLOSED: TableField<Record, Boolean?> = createField(DSL.name("evenement_is_closed"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>remocra.evenement.evenement_date_cloture</code>.
     */
    val DATE_CLOTURE: TableField<Record, ZonedDateTime?> = createField(DSL.name("evenement_date_cloture"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.evenement.evenement_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("evenement_geometrie"), SQLDataType.GEOMETRY, this, "", GeometryBinding())

    /**
     * The column <code>remocra.evenement.evenement_crise_id</code>.
     */
    val CRISE_ID: TableField<Record, UUID?> = createField(DSL.name("evenement_crise_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.evenement.evenement_statut</code>.
     */
    val STATUT: TableField<Record, EvenementStatut?> = createField(DSL.name("evenement_statut"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'EN_COURS'::evenement_statut"), SQLDataType.VARCHAR)).asEnumDataType(EvenementStatut::class.java), this, "")

    /**
     * The column <code>remocra.evenement.utilisateur_id</code>.
     */
    val UTILISATEUR_ID: TableField<Record, UUID?> = createField(DSL.name("utilisateur_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.evenement.evenement_statut_mode</code>.
     */
    val STATUT_MODE: TableField<Record, EvenementStatutMode?> = createField(DSL.name("evenement_statut_mode"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field(DSL.raw("'OPERATIONNEL'::evenement_statut_mode"), SQLDataType.VARCHAR)).asEnumDataType(EvenementStatutMode::class.java), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.evenement</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.evenement</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.evenement</code> table reference
     */
    constructor() : this(DSL.name("evenement"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, EVENEMENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class EvenementPath : Evenement, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): EvenementPath = EvenementPath(DSL.name(alias), this)
        override fun `as`(alias: Name): EvenementPath = EvenementPath(alias, this)
        override fun `as`(alias: Table<*>): EvenementPath = EvenementPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = EVENEMENT_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(EVENEMENT__EVENEMENT_EVENEMENT_CRISE_ID_FKEY, EVENEMENT__EVENEMENT_EVENEMENT_TYPE_CRISE_CATEGORIE_ID_FKEY, EVENEMENT__EVENEMENT_UTILISATEUR_ID_FKEY)

    private lateinit var _crise: CrisePath

    /**
     * Get the implicit join path to the <code>remocra.crise</code> table.
     */
    fun crise(): CrisePath {
        if (!this::_crise.isInitialized) {
            _crise = CrisePath(this, EVENEMENT__EVENEMENT_EVENEMENT_CRISE_ID_FKEY, null)
        }

        return _crise
    }

    val crise: CrisePath
        get(): CrisePath = crise()

    private lateinit var _typeCriseCategorie: TypeCriseCategoriePath

    /**
     * Get the implicit join path to the
     * <code>remocra.type_crise_categorie</code> table.
     */
    fun typeCriseCategorie(): TypeCriseCategoriePath {
        if (!this::_typeCriseCategorie.isInitialized) {
            _typeCriseCategorie = TypeCriseCategoriePath(this, EVENEMENT__EVENEMENT_EVENEMENT_TYPE_CRISE_CATEGORIE_ID_FKEY, null)
        }

        return _typeCriseCategorie
    }

    val typeCriseCategorie: TypeCriseCategoriePath
        get(): TypeCriseCategoriePath = typeCriseCategorie()

    private lateinit var _utilisateur: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table.
     */
    fun utilisateur(): UtilisateurPath {
        if (!this::_utilisateur.isInitialized) {
            _utilisateur = UtilisateurPath(this, EVENEMENT__EVENEMENT_UTILISATEUR_ID_FKEY, null)
        }

        return _utilisateur
    }

    val utilisateur: UtilisateurPath
        get(): UtilisateurPath = utilisateur()

    private lateinit var _lEvenementDocument: LEvenementDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_evenement_document</code> table
     */
    fun lEvenementDocument(): LEvenementDocumentPath {
        if (!this::_lEvenementDocument.isInitialized) {
            _lEvenementDocument = LEvenementDocumentPath(this, null, L_EVENEMENT_DOCUMENT__L_EVENEMENT_DOCUMENT_EVENEMENT_ID_FKEY.inverseKey)
        }

        return _lEvenementDocument
    }

    val lEvenementDocument: LEvenementDocumentPath
        get(): LEvenementDocumentPath = lEvenementDocument()

    private lateinit var _messageEvenement: MessageEvenementPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.message_evenement</code> table
     */
    fun messageEvenement(): MessageEvenementPath {
        if (!this::_messageEvenement.isInitialized) {
            _messageEvenement = MessageEvenementPath(this, null, MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_EVENEMENT_ID_FKEY.inverseKey)
        }

        return _messageEvenement
    }

    val messageEvenement: MessageEvenementPath
        get(): MessageEvenementPath = messageEvenement()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.document</code> table
     */
    val document: DocumentPath
        get(): DocumentPath = lEvenementDocument().document()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("evenement_evenement_importance_check"), "(((evenement_importance >= 0) AND (evenement_importance <= 5)))", true),
    )
    override fun `as`(alias: String): Evenement = Evenement(DSL.name(alias), this)
    override fun `as`(alias: Name): Evenement = Evenement(alias, this)
    override fun `as`(alias: Table<*>): Evenement = Evenement(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Evenement = Evenement(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Evenement = Evenement(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Evenement = Evenement(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Evenement = Evenement(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Evenement = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Evenement = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Evenement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Evenement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Evenement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Evenement = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Evenement = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Evenement = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Evenement = where(DSL.notExists(select))
}
