/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.OLDEB_VISITE_ANOMALIE__OLDEB_VISITE_ANOMALIE_OLDEB_VISITE_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE_DOCUMENT__OLDEB_VISITE_DOCUMENT_OLDEB_VISITE_DOCUMENT_OLDEB_VISITE_I_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE_OLDEB_VISITE_CODE_KEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE_PKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE_SUITE__OLDEB_VISITE_SUITE_OLDEB_VISITE_SUITE_OLDEB_VISITE_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_ACCES_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_PARCELLE_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_ACTION_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_AVIS_ID_FKEY
import remocra.db.jooq.remocra.tables.Oldeb.OldebPath
import remocra.db.jooq.remocra.tables.OldebTypeAction.OldebTypeActionPath
import remocra.db.jooq.remocra.tables.OldebTypeAnomalie.OldebTypeAnomaliePath
import remocra.db.jooq.remocra.tables.OldebTypeAvis.OldebTypeAvisPath
import remocra.db.jooq.remocra.tables.OldebTypeDebroussaillement.OldebTypeDebroussaillementPath
import remocra.db.jooq.remocra.tables.OldebVisiteAnomalie.OldebVisiteAnomaliePath
import remocra.db.jooq.remocra.tables.OldebVisiteDocument.OldebVisiteDocumentPath
import remocra.db.jooq.remocra.tables.OldebVisiteSuite.OldebVisiteSuitePath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class OldebVisite(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.oldeb_visite</code>
         */
        val OLDEB_VISITE: OldebVisite = OldebVisite()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.oldeb_visite.oldeb_visite_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_visite_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb_visite.oldeb_visite_code</code>.
     */
    val CODE: TableField<Record, String?> = createField(DSL.name("oldeb_visite_code"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb_visite.oldeb_visite_date_visite</code>.
     */
    val DATE_VISITE: TableField<Record, ZonedDateTime?> = createField(DSL.name("oldeb_visite_date_visite"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.oldeb_visite.oldeb_visite_agent</code>.
     */
    val AGENT: TableField<Record, String?> = createField(DSL.name("oldeb_visite_agent"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb_visite.oldeb_visite_observation</code>.
     */
    val OBSERVATION: TableField<Record, String?> = createField(DSL.name("oldeb_visite_observation"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.oldeb_visite.oldeb_visite_oldeb_id</code>.
     */
    val OLDEB_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_visite_oldeb_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_visite.oldeb_visite_debroussaillement_parcelle_id</code>.
     */
    val DEBROUSSAILLEMENT_PARCELLE_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_visite_debroussaillement_parcelle_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_visite.oldeb_visite_debroussaillement_acces_id</code>.
     */
    val DEBROUSSAILLEMENT_ACCES_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_visite_debroussaillement_acces_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_visite.oldeb_visite_oldeb_type_avis_id</code>.
     */
    val OLDEB_TYPE_AVIS_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_visite_oldeb_type_avis_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_visite.oldeb_visite_oldeb_type_action_id</code>.
     */
    val OLDEB_TYPE_ACTION_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_visite_oldeb_type_action_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.oldeb_visite</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.oldeb_visite</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.oldeb_visite</code> table reference
     */
    constructor() : this(DSL.name("oldeb_visite"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, OLDEB_VISITE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OldebVisitePath : OldebVisite, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): OldebVisitePath = OldebVisitePath(DSL.name(alias), this)
        override fun `as`(alias: Name): OldebVisitePath = OldebVisitePath(alias, this)
        override fun `as`(alias: Table<*>): OldebVisitePath = OldebVisitePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = OLDEB_VISITE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(OLDEB_VISITE_OLDEB_VISITE_CODE_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_ACCES_ID_FKEY, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_PARCELLE_ID_FKEY, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_ID_FKEY, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_ACTION_ID_FKEY, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_AVIS_ID_FKEY)

    private lateinit var _oldebVisiteOldebVisiteDebroussaillementAccesIdFkey: OldebTypeDebroussaillementPath

    /**
     * Get the implicit join path to the
     * <code>remocra.oldeb_type_debroussaillement</code> table, via the
     * <code>oldeb_visite_oldeb_visite_debroussaillement_acces_id_fkey</code>
     * key.
     */
    fun oldebVisiteOldebVisiteDebroussaillementAccesIdFkey(): OldebTypeDebroussaillementPath {
        if (!this::_oldebVisiteOldebVisiteDebroussaillementAccesIdFkey.isInitialized) {
            _oldebVisiteOldebVisiteDebroussaillementAccesIdFkey = OldebTypeDebroussaillementPath(this, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_ACCES_ID_FKEY, null)
        }

        return _oldebVisiteOldebVisiteDebroussaillementAccesIdFkey
    }

    val oldebVisiteOldebVisiteDebroussaillementAccesIdFkey: OldebTypeDebroussaillementPath
        get(): OldebTypeDebroussaillementPath = oldebVisiteOldebVisiteDebroussaillementAccesIdFkey()

    private lateinit var _oldebVisiteOldebVisiteDebroussaillementParcelleIdFkey: OldebTypeDebroussaillementPath

    /**
     * Get the implicit join path to the
     * <code>remocra.oldeb_type_debroussaillement</code> table, via the
     * <code>oldeb_visite_oldeb_visite_debroussaillement_parcelle_id_fkey</code>
     * key.
     */
    fun oldebVisiteOldebVisiteDebroussaillementParcelleIdFkey(): OldebTypeDebroussaillementPath {
        if (!this::_oldebVisiteOldebVisiteDebroussaillementParcelleIdFkey.isInitialized) {
            _oldebVisiteOldebVisiteDebroussaillementParcelleIdFkey = OldebTypeDebroussaillementPath(this, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_PARCELLE_ID_FKEY, null)
        }

        return _oldebVisiteOldebVisiteDebroussaillementParcelleIdFkey
    }

    val oldebVisiteOldebVisiteDebroussaillementParcelleIdFkey: OldebTypeDebroussaillementPath
        get(): OldebTypeDebroussaillementPath = oldebVisiteOldebVisiteDebroussaillementParcelleIdFkey()

    private lateinit var _oldeb: OldebPath

    /**
     * Get the implicit join path to the <code>remocra.oldeb</code> table.
     */
    fun oldeb(): OldebPath {
        if (!this::_oldeb.isInitialized) {
            _oldeb = OldebPath(this, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_ID_FKEY, null)
        }

        return _oldeb
    }

    val oldeb: OldebPath
        get(): OldebPath = oldeb()

    private lateinit var _oldebTypeAction: OldebTypeActionPath

    /**
     * Get the implicit join path to the <code>remocra.oldeb_type_action</code>
     * table.
     */
    fun oldebTypeAction(): OldebTypeActionPath {
        if (!this::_oldebTypeAction.isInitialized) {
            _oldebTypeAction = OldebTypeActionPath(this, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_ACTION_ID_FKEY, null)
        }

        return _oldebTypeAction
    }

    val oldebTypeAction: OldebTypeActionPath
        get(): OldebTypeActionPath = oldebTypeAction()

    private lateinit var _oldebTypeAvis: OldebTypeAvisPath

    /**
     * Get the implicit join path to the <code>remocra.oldeb_type_avis</code>
     * table.
     */
    fun oldebTypeAvis(): OldebTypeAvisPath {
        if (!this::_oldebTypeAvis.isInitialized) {
            _oldebTypeAvis = OldebTypeAvisPath(this, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_AVIS_ID_FKEY, null)
        }

        return _oldebTypeAvis
    }

    val oldebTypeAvis: OldebTypeAvisPath
        get(): OldebTypeAvisPath = oldebTypeAvis()

    private lateinit var _oldebVisiteAnomalie: OldebVisiteAnomaliePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_visite_anomalie</code> table
     */
    fun oldebVisiteAnomalie(): OldebVisiteAnomaliePath {
        if (!this::_oldebVisiteAnomalie.isInitialized) {
            _oldebVisiteAnomalie = OldebVisiteAnomaliePath(this, null, OLDEB_VISITE_ANOMALIE__OLDEB_VISITE_ANOMALIE_OLDEB_VISITE_ID_FKEY.inverseKey)
        }

        return _oldebVisiteAnomalie
    }

    val oldebVisiteAnomalie: OldebVisiteAnomaliePath
        get(): OldebVisiteAnomaliePath = oldebVisiteAnomalie()

    private lateinit var _oldebVisiteDocument: OldebVisiteDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_visite_document</code> table
     */
    fun oldebVisiteDocument(): OldebVisiteDocumentPath {
        if (!this::_oldebVisiteDocument.isInitialized) {
            _oldebVisiteDocument = OldebVisiteDocumentPath(this, null, OLDEB_VISITE_DOCUMENT__OLDEB_VISITE_DOCUMENT_OLDEB_VISITE_DOCUMENT_OLDEB_VISITE_I_FKEY.inverseKey)
        }

        return _oldebVisiteDocument
    }

    val oldebVisiteDocument: OldebVisiteDocumentPath
        get(): OldebVisiteDocumentPath = oldebVisiteDocument()

    private lateinit var _oldebVisiteSuite: OldebVisiteSuitePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_visite_suite</code> table
     */
    fun oldebVisiteSuite(): OldebVisiteSuitePath {
        if (!this::_oldebVisiteSuite.isInitialized) {
            _oldebVisiteSuite = OldebVisiteSuitePath(this, null, OLDEB_VISITE_SUITE__OLDEB_VISITE_SUITE_OLDEB_VISITE_SUITE_OLDEB_VISITE_ID_FKEY.inverseKey)
        }

        return _oldebVisiteSuite
    }

    val oldebVisiteSuite: OldebVisiteSuitePath
        get(): OldebVisiteSuitePath = oldebVisiteSuite()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.oldeb_type_anomalie</code> table
     */
    val oldebTypeAnomalie: OldebTypeAnomaliePath
        get(): OldebTypeAnomaliePath = oldebVisiteAnomalie().oldebTypeAnomalie()
    override fun `as`(alias: String): OldebVisite = OldebVisite(DSL.name(alias), this)
    override fun `as`(alias: Name): OldebVisite = OldebVisite(alias, this)
    override fun `as`(alias: Table<*>): OldebVisite = OldebVisite(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OldebVisite = OldebVisite(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OldebVisite = OldebVisite(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OldebVisite = OldebVisite(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): OldebVisite = OldebVisite(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): OldebVisite = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): OldebVisite = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): OldebVisite = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): OldebVisite = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): OldebVisite = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): OldebVisite = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): OldebVisite = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): OldebVisite = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): OldebVisite = where(DSL.notExists(select))
}
