/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import remocra.db.jooq.remocra.enums.TypeGeometry
import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class SignalementSousTypeElement(
    val signalementSousTypeElementId: UUID,
    val signalementSousTypeElementActif: Boolean,
    val signalementSousTypeElementCode: String,
    val signalementSousTypeElementLibelle: String?,
    val signalementSousTypeElementTypeGeometrie: TypeGeometry,
    val signalementSousTypeElementTypeElement: UUID?,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: SignalementSousTypeElement = other as SignalementSousTypeElement
        if (this.signalementSousTypeElementId != o.signalementSousTypeElementId) {
            return false
        }
        if (this.signalementSousTypeElementActif != o.signalementSousTypeElementActif) {
            return false
        }
        if (this.signalementSousTypeElementCode != o.signalementSousTypeElementCode) {
            return false
        }
        if (this.signalementSousTypeElementLibelle == null) {
            if (o.signalementSousTypeElementLibelle != null) {
                return false
            }
        } else if (this.signalementSousTypeElementLibelle != o.signalementSousTypeElementLibelle) {
            return false
        }
        if (this.signalementSousTypeElementTypeGeometrie != o.signalementSousTypeElementTypeGeometrie) {
            return false
        }
        if (this.signalementSousTypeElementTypeElement == null) {
            if (o.signalementSousTypeElementTypeElement != null) {
                return false
            }
        } else if (this.signalementSousTypeElementTypeElement != o.signalementSousTypeElementTypeElement) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.signalementSousTypeElementId.hashCode()
        result = prime * result + this.signalementSousTypeElementActif.hashCode()
        result = prime * result + this.signalementSousTypeElementCode.hashCode()
        result = prime * result + (if (this.signalementSousTypeElementLibelle == null) 0 else this.signalementSousTypeElementLibelle.hashCode())
        result = prime * result + this.signalementSousTypeElementTypeGeometrie.hashCode()
        result = prime * result + (if (this.signalementSousTypeElementTypeElement == null) 0 else this.signalementSousTypeElementTypeElement.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("SignalementSousTypeElement (")

        sb.append(signalementSousTypeElementId)
        sb.append(", ").append(signalementSousTypeElementActif)
        sb.append(", ").append(signalementSousTypeElementCode)
        sb.append(", ").append(signalementSousTypeElementLibelle)
        sb.append(", ").append(signalementSousTypeElementTypeGeometrie)
        sb.append(", ").append(signalementSousTypeElementTypeElement)

        sb.append(")")
        return sb.toString()
    }
}
