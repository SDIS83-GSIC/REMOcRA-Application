/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNA
import remocra.db.jooq.remocra.keys.L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_RAPPORT_PERSONNAL
import remocra.db.jooq.remocra.keys.L_RAPPORT_PERSONNALISE_PROFIL_GROUPE_FONCTIONNALITES_PKEY
import remocra.db.jooq.remocra.tables.GroupeFonctionnalites.GroupeFonctionnalitesPath
import remocra.db.jooq.remocra.tables.RapportPersonnalise.RapportPersonnalisePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class LRapportPersonnaliseGroupeFonctionnalites(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>remocra.l_rapport_personnalise_groupe_fonctionnalites</code>
         */
        val L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES: LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>remocra.l_rapport_personnalise_groupe_fonctionnalites.groupe_fonctionnalites_id</code>.
     */
    val GROUPE_FONCTIONNALITES_ID: TableField<Record, UUID?> = createField(DSL.name("groupe_fonctionnalites_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.l_rapport_personnalise_groupe_fonctionnalites.rapport_personnalise_id</code>.
     */
    val RAPPORT_PERSONNALISE_ID: TableField<Record, UUID?> = createField(DSL.name("rapport_personnalise_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased
     * <code>remocra.l_rapport_personnalise_groupe_fonctionnalites</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>remocra.l_rapport_personnalise_groupe_fonctionnalites</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a
     * <code>remocra.l_rapport_personnalise_groupe_fonctionnalites</code> table
     * reference
     */
    constructor() : this(DSL.name("l_rapport_personnalise_groupe_fonctionnalites"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LRapportPersonnaliseGroupeFonctionnalitesPath : LRapportPersonnaliseGroupeFonctionnalites, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): LRapportPersonnaliseGroupeFonctionnalitesPath = LRapportPersonnaliseGroupeFonctionnalitesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): LRapportPersonnaliseGroupeFonctionnalitesPath = LRapportPersonnaliseGroupeFonctionnalitesPath(alias, this)
        override fun `as`(alias: Table<*>): LRapportPersonnaliseGroupeFonctionnalitesPath = LRapportPersonnaliseGroupeFonctionnalitesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = L_RAPPORT_PERSONNALISE_PROFIL_GROUPE_FONCTIONNALITES_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNA, L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_RAPPORT_PERSONNAL)

    private lateinit var _groupeFonctionnalites: GroupeFonctionnalitesPath

    /**
     * Get the implicit join path to the
     * <code>remocra.groupe_fonctionnalites</code> table.
     */
    fun groupeFonctionnalites(): GroupeFonctionnalitesPath {
        if (!this::_groupeFonctionnalites.isInitialized) {
            _groupeFonctionnalites = GroupeFonctionnalitesPath(this, L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNA, null)
        }

        return _groupeFonctionnalites
    }

    val groupeFonctionnalites: GroupeFonctionnalitesPath
        get(): GroupeFonctionnalitesPath = groupeFonctionnalites()

    private lateinit var _rapportPersonnalise: RapportPersonnalisePath

    /**
     * Get the implicit join path to the
     * <code>remocra.rapport_personnalise</code> table.
     */
    fun rapportPersonnalise(): RapportPersonnalisePath {
        if (!this::_rapportPersonnalise.isInitialized) {
            _rapportPersonnalise = RapportPersonnalisePath(this, L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_RAPPORT_PERSONNAL, null)
        }

        return _rapportPersonnalise
    }

    val rapportPersonnalise: RapportPersonnalisePath
        get(): RapportPersonnalisePath = rapportPersonnalise()
    override fun `as`(alias: String): LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites(DSL.name(alias), this)
    override fun `as`(alias: Name): LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites(alias, this)
    override fun `as`(alias: Table<*>): LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): LRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalites(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): LRapportPersonnaliseGroupeFonctionnalites = where(DSL.notExists(select))
}
