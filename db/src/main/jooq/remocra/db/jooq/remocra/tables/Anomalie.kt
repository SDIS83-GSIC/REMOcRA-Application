/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.incoming.keys.L_VISITE_ANOMALIE__L_VISITE_ANOMALIE_ANOMALIE_ID_FKEY
import remocra.db.jooq.incoming.tables.LVisiteAnomalie.LVisiteAnomaliePath
import remocra.db.jooq.incoming.tables.Visite.VisitePath
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.ANOMALIE_ANOMALIE_CODE_KEY
import remocra.db.jooq.remocra.keys.ANOMALIE_PKEY
import remocra.db.jooq.remocra.keys.ANOMALIE__ANOMALIE_ANOMALIE_ANOMALIE_CATEGORIE_ID_FKEY
import remocra.db.jooq.remocra.keys.L_PEI_ANOMALIE__L_PEI_ANOMALIE_ANOMALIE_ID_FKEY
import remocra.db.jooq.remocra.keys.POIDS_ANOMALIE__POIDS_ANOMALIE_POIDS_ANOMALIE_ANOMALIE_ID_FKEY
import remocra.db.jooq.remocra.tables.AnomalieCategorie.AnomalieCategoriePath
import remocra.db.jooq.remocra.tables.LPeiAnomalie.LPeiAnomaliePath
import remocra.db.jooq.remocra.tables.Nature.NaturePath
import remocra.db.jooq.remocra.tables.Pei.PeiPath
import remocra.db.jooq.remocra.tables.PoidsAnomalie.PoidsAnomaliePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Anomalie(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.anomalie</code>
         */
        val ANOMALIE: Anomalie = Anomalie()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.anomalie.anomalie_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("anomalie_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.anomalie.anomalie_code</code>. Code unique
     * servant à identifier certains types utilisés dans l'application
     */
    val CODE: TableField<Record, String?> = createField(DSL.name("anomalie_code"), SQLDataType.CLOB.nullable(false), this, "Code unique servant à identifier certains types utilisés dans l'application")

    /**
     * The column <code>remocra.anomalie.anomalie_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("anomalie_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.anomalie.anomalie_commentaire</code>. Permet de
     * définir un peu de context à l'emploi de cette anomalie
     */
    val COMMENTAIRE: TableField<Record, String?> = createField(DSL.name("anomalie_commentaire"), SQLDataType.CLOB, this, "Permet de définir un peu de context à l'emploi de cette anomalie")

    /**
     * The column <code>remocra.anomalie.anomalie_anomalie_categorie_id</code>.
     */
    val ANOMALIE_CATEGORIE_ID: TableField<Record, UUID?> = createField(DSL.name("anomalie_anomalie_categorie_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.anomalie.anomalie_actif</code>.
     */
    val ACTIF: TableField<Record, Boolean?> = createField(DSL.name("anomalie_actif"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>remocra.anomalie.anomalie_protected</code>. Indique si
     * l'anomalie est protégée ou non
     */
    val PROTECTED: TableField<Record, Boolean?> = createField(DSL.name("anomalie_protected"), SQLDataType.BOOLEAN.nullable(false), this, "Indique si l'anomalie est protégée ou non")

    /**
     * The column <code>remocra.anomalie.anomalie_rend_non_conforme</code>.
     * Indique si l'anomalie doit rendre non conforme (TRUE) ou indisponible
     * (FALSE)
     */
    val REND_NON_CONFORME: TableField<Record, Boolean?> = createField(DSL.name("anomalie_rend_non_conforme"), SQLDataType.BOOLEAN.nullable(false), this, "Indique si l'anomalie doit rendre non conforme (TRUE) ou indisponible (FALSE)")

    /**
     * The column <code>remocra.anomalie.anomalie_ordre</code>.
     */
    val ORDRE: TableField<Record, Int?> = createField(DSL.name("anomalie_ordre"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.anomalie</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.anomalie</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.anomalie</code> table reference
     */
    constructor() : this(DSL.name("anomalie"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ANOMALIE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class AnomaliePath : Anomalie, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): AnomaliePath = AnomaliePath(DSL.name(alias), this)
        override fun `as`(alias: Name): AnomaliePath = AnomaliePath(alias, this)
        override fun `as`(alias: Table<*>): AnomaliePath = AnomaliePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = ANOMALIE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(ANOMALIE_ANOMALIE_CODE_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(ANOMALIE__ANOMALIE_ANOMALIE_ANOMALIE_CATEGORIE_ID_FKEY)

    private lateinit var _anomalieCategorie: AnomalieCategoriePath

    /**
     * Get the implicit join path to the <code>remocra.anomalie_categorie</code>
     * table.
     */
    fun anomalieCategorie(): AnomalieCategoriePath {
        if (!this::_anomalieCategorie.isInitialized) {
            _anomalieCategorie = AnomalieCategoriePath(this, ANOMALIE__ANOMALIE_ANOMALIE_ANOMALIE_CATEGORIE_ID_FKEY, null)
        }

        return _anomalieCategorie
    }

    val anomalieCategorie: AnomalieCategoriePath
        get(): AnomalieCategoriePath = anomalieCategorie()

    private lateinit var _lVisiteAnomalie: LVisiteAnomaliePath

    /**
     * Get the implicit to-many join path to the
     * <code>incoming.l_visite_anomalie</code> table
     */
    fun lVisiteAnomalie(): LVisiteAnomaliePath {
        if (!this::_lVisiteAnomalie.isInitialized) {
            _lVisiteAnomalie = LVisiteAnomaliePath(this, null, L_VISITE_ANOMALIE__L_VISITE_ANOMALIE_ANOMALIE_ID_FKEY.inverseKey)
        }

        return _lVisiteAnomalie
    }

    val lVisiteAnomalie: LVisiteAnomaliePath
        get(): LVisiteAnomaliePath = lVisiteAnomalie()

    private lateinit var _lPeiAnomalie: LPeiAnomaliePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_pei_anomalie</code> table
     */
    fun lPeiAnomalie(): LPeiAnomaliePath {
        if (!this::_lPeiAnomalie.isInitialized) {
            _lPeiAnomalie = LPeiAnomaliePath(this, null, L_PEI_ANOMALIE__L_PEI_ANOMALIE_ANOMALIE_ID_FKEY.inverseKey)
        }

        return _lPeiAnomalie
    }

    val lPeiAnomalie: LPeiAnomaliePath
        get(): LPeiAnomaliePath = lPeiAnomalie()

    private lateinit var _poidsAnomalie: PoidsAnomaliePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.poids_anomalie</code> table
     */
    fun poidsAnomalie(): PoidsAnomaliePath {
        if (!this::_poidsAnomalie.isInitialized) {
            _poidsAnomalie = PoidsAnomaliePath(this, null, POIDS_ANOMALIE__POIDS_ANOMALIE_POIDS_ANOMALIE_ANOMALIE_ID_FKEY.inverseKey)
        }

        return _poidsAnomalie
    }

    val poidsAnomalie: PoidsAnomaliePath
        get(): PoidsAnomaliePath = poidsAnomalie()

    /**
     * Get the implicit many-to-many join path to the
     * <code>incoming.visite</code> table
     */
    val visite: VisitePath
        get(): VisitePath = lVisiteAnomalie().visite()

    /**
     * Get the implicit many-to-many join path to the <code>remocra.pei</code>
     * table
     */
    val pei: PeiPath
        get(): PeiPath = lPeiAnomalie().pei()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.nature</code> table
     */
    val nature: NaturePath
        get(): NaturePath = poidsAnomalie().nature()
    override fun `as`(alias: String): Anomalie = Anomalie(DSL.name(alias), this)
    override fun `as`(alias: Name): Anomalie = Anomalie(alias, this)
    override fun `as`(alias: Table<*>): Anomalie = Anomalie(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Anomalie = Anomalie(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Anomalie = Anomalie(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Anomalie = Anomalie(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Anomalie = Anomalie(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Anomalie = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Anomalie = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Anomalie = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Anomalie = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Anomalie = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Anomalie = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Anomalie = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Anomalie = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Anomalie = where(DSL.notExists(select))
}
