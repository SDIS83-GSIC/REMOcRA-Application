/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.indexes.SIGNALEMENT_ELEMENT_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.L_SIGNALEMENT_ELEMENT_SIGNALEMENT_TYPE_ANOMALIE__L_SIGNALEMENT_ELEMENT_SIGNALEMENT_TYPE_ANOMALIE_ELEMENT_ID_FKEY
import remocra.db.jooq.remocra.keys.SIGNALEMENT_ELEMENT_PKEY
import remocra.db.jooq.remocra.keys.SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SIGNALEMENT_ID_FKEY
import remocra.db.jooq.remocra.keys.SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SOUS_TYPE_FKEY
import remocra.db.jooq.remocra.tables.LSignalementElementSignalementTypeAnomalie.LSignalementElementSignalementTypeAnomaliePath
import remocra.db.jooq.remocra.tables.Signalement.SignalementPath
import remocra.db.jooq.remocra.tables.SignalementSousTypeElement.SignalementSousTypeElementPath
import remocra.db.jooq.remocra.tables.SignalementTypeAnomalie.SignalementTypeAnomaliePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class SignalementElement(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.signalement_element</code>
         */
        val SIGNALEMENT_ELEMENT: SignalementElement = SignalementElement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>remocra.signalement_element.signalement_element_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("signalement_element_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.signalement_element.signalement_element_description</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("signalement_element_description"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>remocra.signalement_element.signalement_element_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("signalement_element_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    /**
     * The column
     * <code>remocra.signalement_element.signalement_element_sous_type</code>.
     */
    val SOUS_TYPE: TableField<Record, UUID?> = createField(DSL.name("signalement_element_sous_type"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.signalement_element.signalement_element_signalement_id</code>.
     */
    val SIGNALEMENT_ID: TableField<Record, UUID?> = createField(DSL.name("signalement_element_signalement_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.signalement_element</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.signalement_element</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.signalement_element</code> table reference
     */
    constructor() : this(DSL.name("signalement_element"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, SIGNALEMENT_ELEMENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class SignalementElementPath : SignalementElement, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): SignalementElementPath = SignalementElementPath(DSL.name(alias), this)
        override fun `as`(alias: Name): SignalementElementPath = SignalementElementPath(alias, this)
        override fun `as`(alias: Table<*>): SignalementElementPath = SignalementElementPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(SIGNALEMENT_ELEMENT_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = SIGNALEMENT_ELEMENT_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SIGNALEMENT_ID_FKEY, SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SOUS_TYPE_FKEY)

    private lateinit var _signalement: SignalementPath

    /**
     * Get the implicit join path to the <code>remocra.signalement</code> table.
     */
    fun signalement(): SignalementPath {
        if (!this::_signalement.isInitialized) {
            _signalement = SignalementPath(this, SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SIGNALEMENT_ID_FKEY, null)
        }

        return _signalement
    }

    val signalement: SignalementPath
        get(): SignalementPath = signalement()

    private lateinit var _signalementSousTypeElement: SignalementSousTypeElementPath

    /**
     * Get the implicit join path to the
     * <code>remocra.signalement_sous_type_element</code> table.
     */
    fun signalementSousTypeElement(): SignalementSousTypeElementPath {
        if (!this::_signalementSousTypeElement.isInitialized) {
            _signalementSousTypeElement = SignalementSousTypeElementPath(this, SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SOUS_TYPE_FKEY, null)
        }

        return _signalementSousTypeElement
    }

    val signalementSousTypeElement: SignalementSousTypeElementPath
        get(): SignalementSousTypeElementPath = signalementSousTypeElement()

    private lateinit var _lSignalementElementSignalementTypeAnomalie: LSignalementElementSignalementTypeAnomaliePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_signalement_element_signalement_type_anomalie</code>
     * table
     */
    fun lSignalementElementSignalementTypeAnomalie(): LSignalementElementSignalementTypeAnomaliePath {
        if (!this::_lSignalementElementSignalementTypeAnomalie.isInitialized) {
            _lSignalementElementSignalementTypeAnomalie = LSignalementElementSignalementTypeAnomaliePath(this, null, L_SIGNALEMENT_ELEMENT_SIGNALEMENT_TYPE_ANOMALIE__L_SIGNALEMENT_ELEMENT_SIGNALEMENT_TYPE_ANOMALIE_ELEMENT_ID_FKEY.inverseKey)
        }

        return _lSignalementElementSignalementTypeAnomalie
    }

    val lSignalementElementSignalementTypeAnomalie: LSignalementElementSignalementTypeAnomaliePath
        get(): LSignalementElementSignalementTypeAnomaliePath = lSignalementElementSignalementTypeAnomalie()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.signalement_type_anomalie</code> table
     */
    val signalementTypeAnomalie: SignalementTypeAnomaliePath
        get(): SignalementTypeAnomaliePath = lSignalementElementSignalementTypeAnomalie().signalementTypeAnomalie()
    override fun `as`(alias: String): SignalementElement = SignalementElement(DSL.name(alias), this)
    override fun `as`(alias: Name): SignalementElement = SignalementElement(alias, this)
    override fun `as`(alias: Table<*>): SignalementElement = SignalementElement(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SignalementElement = SignalementElement(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SignalementElement = SignalementElement(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): SignalementElement = SignalementElement(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): SignalementElement = SignalementElement(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): SignalementElement = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): SignalementElement = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): SignalementElement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): SignalementElement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): SignalementElement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): SignalementElement = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): SignalementElement = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): SignalementElement = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): SignalementElement = where(DSL.notExists(select))
}
