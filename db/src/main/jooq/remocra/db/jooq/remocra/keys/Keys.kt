/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.keys

import org.jooq.ForeignKey
import org.jooq.Record
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import remocra.db.jooq.remocra.tables.Adresse
import remocra.db.jooq.remocra.tables.AdresseElement
import remocra.db.jooq.remocra.tables.AdresseSousTypeElement
import remocra.db.jooq.remocra.tables.AdresseTypeAnomalie
import remocra.db.jooq.remocra.tables.AdresseTypeElement
import remocra.db.jooq.remocra.tables.Anomalie
import remocra.db.jooq.remocra.tables.AnomalieCategorie
import remocra.db.jooq.remocra.tables.Api
import remocra.db.jooq.remocra.tables.CadastreParcelle
import remocra.db.jooq.remocra.tables.CadastreSection
import remocra.db.jooq.remocra.tables.CarroyageDfci
import remocra.db.jooq.remocra.tables.Commune
import remocra.db.jooq.remocra.tables.Contact
import remocra.db.jooq.remocra.tables.Couche
import remocra.db.jooq.remocra.tables.Courrier
import remocra.db.jooq.remocra.tables.Crise
import remocra.db.jooq.remocra.tables.CriseCategorie
import remocra.db.jooq.remocra.tables.CriseIndicateur
import remocra.db.jooq.remocra.tables.Dashboard
import remocra.db.jooq.remocra.tables.DashboardComponent
import remocra.db.jooq.remocra.tables.DashboardConfig
import remocra.db.jooq.remocra.tables.DashboardQuery
import remocra.db.jooq.remocra.tables.DebitSimultane
import remocra.db.jooq.remocra.tables.DebitSimultaneMesure
import remocra.db.jooq.remocra.tables.Diametre
import remocra.db.jooq.remocra.tables.Document
import remocra.db.jooq.remocra.tables.DocumentHabilitable
import remocra.db.jooq.remocra.tables.Domaine
import remocra.db.jooq.remocra.tables.Evenement
import remocra.db.jooq.remocra.tables.FicheResumeBloc
import remocra.db.jooq.remocra.tables.FonctionContact
import remocra.db.jooq.remocra.tables.Gestionnaire
import remocra.db.jooq.remocra.tables.GroupeCouche
import remocra.db.jooq.remocra.tables.IndisponibiliteTemporaire
import remocra.db.jooq.remocra.tables.Job
import remocra.db.jooq.remocra.tables.LAdresseDocument
import remocra.db.jooq.remocra.tables.LAdresseElementAdresseTypeAnomalie
import remocra.db.jooq.remocra.tables.LCommuneCis
import remocra.db.jooq.remocra.tables.LContactGestionnaire
import remocra.db.jooq.remocra.tables.LContactOrganisme
import remocra.db.jooq.remocra.tables.LContactRole
import remocra.db.jooq.remocra.tables.LCoucheCrise
import remocra.db.jooq.remocra.tables.LCoucheDroit
import remocra.db.jooq.remocra.tables.LCoucheModule
import remocra.db.jooq.remocra.tables.LCourrierContactGestionnaire
import remocra.db.jooq.remocra.tables.LCourrierContactOrganisme
import remocra.db.jooq.remocra.tables.LCourrierOrganisme
import remocra.db.jooq.remocra.tables.LCourrierUtilisateur
import remocra.db.jooq.remocra.tables.LCriseCommune
import remocra.db.jooq.remocra.tables.LCriseDocument
import remocra.db.jooq.remocra.tables.LDashboardProfil
import remocra.db.jooq.remocra.tables.LDebitSimultaneMesurePei
import remocra.db.jooq.remocra.tables.LDiametreNature
import remocra.db.jooq.remocra.tables.LEvenementDocument
import remocra.db.jooq.remocra.tables.LIndisponibiliteTemporairePei
import remocra.db.jooq.remocra.tables.LModeleCourrierProfilDroit
import remocra.db.jooq.remocra.tables.LPeiAnomalie
import remocra.db.jooq.remocra.tables.LPeiDocument
import remocra.db.jooq.remocra.tables.LPenaTypeEngin
import remocra.db.jooq.remocra.tables.LPermisCadastreParcelle
import remocra.db.jooq.remocra.tables.LPermisDocument
import remocra.db.jooq.remocra.tables.LProfilDroitDocumentHabilitable
import remocra.db.jooq.remocra.tables.LProfilUtilisateurOrganismeDroit
import remocra.db.jooq.remocra.tables.LRapportPersonnaliseProfilDroit
import remocra.db.jooq.remocra.tables.LThematiqueCourrier
import remocra.db.jooq.remocra.tables.LThematiqueDocumentHabilitable
import remocra.db.jooq.remocra.tables.LThematiqueModule
import remocra.db.jooq.remocra.tables.LToponymieCrise
import remocra.db.jooq.remocra.tables.LTourneePei
import remocra.db.jooq.remocra.tables.LTypeCriseCategorie
import remocra.db.jooq.remocra.tables.LVisiteAnomalie
import remocra.db.jooq.remocra.tables.LieuDit
import remocra.db.jooq.remocra.tables.LogLine
import remocra.db.jooq.remocra.tables.MarquePibi
import remocra.db.jooq.remocra.tables.Materiau
import remocra.db.jooq.remocra.tables.MessageEvenement
import remocra.db.jooq.remocra.tables.ModeleCourrier
import remocra.db.jooq.remocra.tables.ModeleCourrierParametre
import remocra.db.jooq.remocra.tables.ModelePibi
import remocra.db.jooq.remocra.tables.Module
import remocra.db.jooq.remocra.tables.Nature
import remocra.db.jooq.remocra.tables.NatureDeci
import remocra.db.jooq.remocra.tables.Niveau
import remocra.db.jooq.remocra.tables.Oldeb
import remocra.db.jooq.remocra.tables.OldebCaracteristique
import remocra.db.jooq.remocra.tables.OldebLocataire
import remocra.db.jooq.remocra.tables.OldebProprietaire
import remocra.db.jooq.remocra.tables.OldebPropriete
import remocra.db.jooq.remocra.tables.OldebTypeAcces
import remocra.db.jooq.remocra.tables.OldebTypeAction
import remocra.db.jooq.remocra.tables.OldebTypeAnomalie
import remocra.db.jooq.remocra.tables.OldebTypeAvis
import remocra.db.jooq.remocra.tables.OldebTypeCaracteristique
import remocra.db.jooq.remocra.tables.OldebTypeCategorieAnomalie
import remocra.db.jooq.remocra.tables.OldebTypeCategorieCaracteristique
import remocra.db.jooq.remocra.tables.OldebTypeDebroussaillement
import remocra.db.jooq.remocra.tables.OldebTypeResidence
import remocra.db.jooq.remocra.tables.OldebTypeSuite
import remocra.db.jooq.remocra.tables.OldebTypeZoneUrbanisme
import remocra.db.jooq.remocra.tables.OldebVisite
import remocra.db.jooq.remocra.tables.OldebVisiteAnomalie
import remocra.db.jooq.remocra.tables.OldebVisiteDocument
import remocra.db.jooq.remocra.tables.OldebVisiteSuite
import remocra.db.jooq.remocra.tables.Organisme
import remocra.db.jooq.remocra.tables.Parametre
import remocra.db.jooq.remocra.tables.Pei
import remocra.db.jooq.remocra.tables.PeiPrescrit
import remocra.db.jooq.remocra.tables.Pena
import remocra.db.jooq.remocra.tables.PenaAspiration
import remocra.db.jooq.remocra.tables.Permis
import remocra.db.jooq.remocra.tables.Pibi
import remocra.db.jooq.remocra.tables.PoidsAnomalie
import remocra.db.jooq.remocra.tables.ProfilDroit
import remocra.db.jooq.remocra.tables.ProfilOrganisme
import remocra.db.jooq.remocra.tables.ProfilUtilisateur
import remocra.db.jooq.remocra.tables.RapportPersonnalise
import remocra.db.jooq.remocra.tables.RapportPersonnaliseParametre
import remocra.db.jooq.remocra.tables.Rcci
import remocra.db.jooq.remocra.tables.RcciDocument
import remocra.db.jooq.remocra.tables.RcciTypeDegreCertitude
import remocra.db.jooq.remocra.tables.RcciTypeOrigineAlerte
import remocra.db.jooq.remocra.tables.RcciTypePrometheeCategorie
import remocra.db.jooq.remocra.tables.RcciTypePrometheeFamille
import remocra.db.jooq.remocra.tables.RcciTypePrometheePartition
import remocra.db.jooq.remocra.tables.Reservoir
import remocra.db.jooq.remocra.tables.RoleContact
import remocra.db.jooq.remocra.tables.Site
import remocra.db.jooq.remocra.tables.Task
import remocra.db.jooq.remocra.tables.Thematique
import remocra.db.jooq.remocra.tables.Toponymie
import remocra.db.jooq.remocra.tables.Tournee
import remocra.db.jooq.remocra.tables.TypeCanalisation
import remocra.db.jooq.remocra.tables.TypeCrise
import remocra.db.jooq.remocra.tables.TypeCriseCategorie
import remocra.db.jooq.remocra.tables.TypeEngin
import remocra.db.jooq.remocra.tables.TypeOrganisme
import remocra.db.jooq.remocra.tables.TypePenaAspiration
import remocra.db.jooq.remocra.tables.TypePermisAvis
import remocra.db.jooq.remocra.tables.TypePermisInterservice
import remocra.db.jooq.remocra.tables.TypeReseau
import remocra.db.jooq.remocra.tables.TypeToponymie
import remocra.db.jooq.remocra.tables.Utilisateur
import remocra.db.jooq.remocra.tables.Visite
import remocra.db.jooq.remocra.tables.VisiteCtrlDebitPression
import remocra.db.jooq.remocra.tables.Voie
import remocra.db.jooq.remocra.tables.ZoneIntegration

// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ADRESSE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Adresse.ADRESSE, DSL.name("adresse_pkey"), arrayOf(Adresse.ADRESSE.ID), true)
val ADRESSE_ELEMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(AdresseElement.ADRESSE_ELEMENT, DSL.name("adresse_element_pkey"), arrayOf(AdresseElement.ADRESSE_ELEMENT.ID), true)
val ADRESSE_SOUS_TYPE_ELEMENT_ADRESSE_SOUS_TYPE_ELEMENT_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(AdresseSousTypeElement.ADRESSE_SOUS_TYPE_ELEMENT, DSL.name("adresse_sous_type_element_adresse_sous_type_element_code_key"), arrayOf(AdresseSousTypeElement.ADRESSE_SOUS_TYPE_ELEMENT.CODE), true)
val ADRESSE_SOUS_TYPE_ELEMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(AdresseSousTypeElement.ADRESSE_SOUS_TYPE_ELEMENT, DSL.name("adresse_sous_type_element_pkey"), arrayOf(AdresseSousTypeElement.ADRESSE_SOUS_TYPE_ELEMENT.ID), true)
val ADRESSE_TYPE_ANOMALIE_ADRESSE_TYPE_ANOMALIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(AdresseTypeAnomalie.ADRESSE_TYPE_ANOMALIE, DSL.name("adresse_type_anomalie_adresse_type_anomalie_code_key"), arrayOf(AdresseTypeAnomalie.ADRESSE_TYPE_ANOMALIE.CODE), true)
val ADRESSE_TYPE_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(AdresseTypeAnomalie.ADRESSE_TYPE_ANOMALIE, DSL.name("adresse_type_anomalie_pkey"), arrayOf(AdresseTypeAnomalie.ADRESSE_TYPE_ANOMALIE.ID), true)
val ADRESSE_TYPE_ELEMENT_ADRESSE_TYPE_ELEMENT_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(AdresseTypeElement.ADRESSE_TYPE_ELEMENT, DSL.name("adresse_type_element_adresse_type_element_code_key"), arrayOf(AdresseTypeElement.ADRESSE_TYPE_ELEMENT.CODE), true)
val ADRESSE_TYPE_ELEMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(AdresseTypeElement.ADRESSE_TYPE_ELEMENT, DSL.name("adresse_type_element_pkey"), arrayOf(AdresseTypeElement.ADRESSE_TYPE_ELEMENT.ID), true)
val ANOMALIE_ANOMALIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Anomalie.ANOMALIE, DSL.name("anomalie_anomalie_code_key"), arrayOf(Anomalie.ANOMALIE.CODE), true)
val ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Anomalie.ANOMALIE, DSL.name("anomalie_pkey"), arrayOf(Anomalie.ANOMALIE.ID), true)
val ANOMALIE_CATEGORIE_ANOMALIE_CATEGORIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(AnomalieCategorie.ANOMALIE_CATEGORIE, DSL.name("anomalie_categorie_anomalie_categorie_code_key"), arrayOf(AnomalieCategorie.ANOMALIE_CATEGORIE.CODE), true)
val ANOMALIE_CATEGORIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(AnomalieCategorie.ANOMALIE_CATEGORIE, DSL.name("anomalie_categorie_pkey"), arrayOf(AnomalieCategorie.ANOMALIE_CATEGORIE.ID), true)
val API_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Api.API, DSL.name("api_pkey"), arrayOf(Api.API.ORGANISME_ID), true)
val CADASTRE_PARCELLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(CadastreParcelle.CADASTRE_PARCELLE, DSL.name("cadastre_parcelle_pkey"), arrayOf(CadastreParcelle.CADASTRE_PARCELLE.ID), true)
val CADASTRE_SECTION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(CadastreSection.CADASTRE_SECTION, DSL.name("cadastre_section_pkey"), arrayOf(CadastreSection.CADASTRE_SECTION.ID), true)
val CARROYAGE_DFCI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(CarroyageDfci.CARROYAGE_DFCI, DSL.name("carroyage_dfci_pkey"), arrayOf(CarroyageDfci.CARROYAGE_DFCI.ID), true)
val COMMUNE_COMMUNE_CODE_INSEE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Commune.COMMUNE, DSL.name("commune_commune_code_insee_key"), arrayOf(Commune.COMMUNE.CODE_INSEE), true)
val COMMUNE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Commune.COMMUNE, DSL.name("commune_pkey"), arrayOf(Commune.COMMUNE.ID), true)
val CONTACT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Contact.CONTACT, DSL.name("contact_pkey"), arrayOf(Contact.CONTACT.ID), true)
val COUCHE_COUCHE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Couche.COUCHE, DSL.name("couche_couche_code_key"), arrayOf(Couche.COUCHE.CODE), true)
val COUCHE_COUCHE_ORDRE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Couche.COUCHE, DSL.name("couche_couche_ordre_key"), arrayOf(Couche.COUCHE.ORDRE), true)
val COUCHE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Couche.COUCHE, DSL.name("couche_pkey"), arrayOf(Couche.COUCHE.ID), true)
val COURRIER_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Courrier.COURRIER, DSL.name("courrier_pkey"), arrayOf(Courrier.COURRIER.ID), true)
val CRISE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Crise.CRISE, DSL.name("crise_pkey"), arrayOf(Crise.CRISE.ID), true)
val CRISE_CATEGORIE_CRISE_CATEGORIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(CriseCategorie.CRISE_CATEGORIE, DSL.name("crise_categorie_crise_categorie_code_key"), arrayOf(CriseCategorie.CRISE_CATEGORIE.CODE), true)
val CRISE_CATEGORIE_CRISE_CATEGORIE_LIBELLE_KEY: UniqueKey<Record> = Internal.createUniqueKey(CriseCategorie.CRISE_CATEGORIE, DSL.name("crise_categorie_crise_categorie_libelle_key"), arrayOf(CriseCategorie.CRISE_CATEGORIE.LIBELLE), true)
val CRISE_CATEGORIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(CriseCategorie.CRISE_CATEGORIE, DSL.name("crise_categorie_pkey"), arrayOf(CriseCategorie.CRISE_CATEGORIE.ID), true)
val CRISE_INDICATEUR_PKEY: UniqueKey<Record> = Internal.createUniqueKey(CriseIndicateur.CRISE_INDICATEUR, DSL.name("crise_indicateur_pkey"), arrayOf(CriseIndicateur.CRISE_INDICATEUR.ID), true)
val DASHBOARD_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Dashboard.DASHBOARD, DSL.name("dashboard_pkey"), arrayOf(Dashboard.DASHBOARD.ID), true)
val DASHBOARD_COMPONENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(DashboardComponent.DASHBOARD_COMPONENT, DSL.name("dashboard_component_pkey"), arrayOf(DashboardComponent.DASHBOARD_COMPONENT.ID), true)
val DASHBOARD_QUERY_PKEY: UniqueKey<Record> = Internal.createUniqueKey(DashboardQuery.DASHBOARD_QUERY, DSL.name("dashboard_query_pkey"), arrayOf(DashboardQuery.DASHBOARD_QUERY.ID), true)
val DEBIT_SIMULTANE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(DebitSimultane.DEBIT_SIMULTANE, DSL.name("debit_simultane_pkey"), arrayOf(DebitSimultane.DEBIT_SIMULTANE.ID), true)
val DEBIT_SIMULTANE_MESURE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(DebitSimultaneMesure.DEBIT_SIMULTANE_MESURE, DSL.name("debit_simultane_mesure_pkey"), arrayOf(DebitSimultaneMesure.DEBIT_SIMULTANE_MESURE.ID), true)
val DIAMETRE_DIAMETRE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Diametre.DIAMETRE, DSL.name("diametre_diametre_code_key"), arrayOf(Diametre.DIAMETRE.CODE), true)
val DIAMETRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Diametre.DIAMETRE, DSL.name("diametre_pkey"), arrayOf(Diametre.DIAMETRE.ID), true)
val DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Document.DOCUMENT, DSL.name("document_pkey"), arrayOf(Document.DOCUMENT.ID), true)
val DOCUMENT_HABILITABLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(DocumentHabilitable.DOCUMENT_HABILITABLE, DSL.name("document_habilitable_pkey"), arrayOf(DocumentHabilitable.DOCUMENT_HABILITABLE.ID), true)
val DOMAINE_DOMAINE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Domaine.DOMAINE, DSL.name("domaine_domaine_code_key"), arrayOf(Domaine.DOMAINE.CODE), true)
val DOMAINE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Domaine.DOMAINE, DSL.name("domaine_pkey"), arrayOf(Domaine.DOMAINE.ID), true)
val EVENEMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Evenement.EVENEMENT, DSL.name("evenement_pkey"), arrayOf(Evenement.EVENEMENT.ID), true)
val FICHE_RESUME_BLOC_PKEY: UniqueKey<Record> = Internal.createUniqueKey(FicheResumeBloc.FICHE_RESUME_BLOC, DSL.name("fiche_resume_bloc_pkey"), arrayOf(FicheResumeBloc.FICHE_RESUME_BLOC.ID), true)
val FONCTION_CONTACT_FONCTION_CONTACT_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(FonctionContact.FONCTION_CONTACT, DSL.name("fonction_contact_fonction_contact_code_key"), arrayOf(FonctionContact.FONCTION_CONTACT.CODE), true)
val FONCTION_CONTACT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(FonctionContact.FONCTION_CONTACT, DSL.name("fonction_contact_pkey"), arrayOf(FonctionContact.FONCTION_CONTACT.ID), true)
val GESTIONNAIRE_GESTIONNAIRE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Gestionnaire.GESTIONNAIRE, DSL.name("gestionnaire_gestionnaire_code_key"), arrayOf(Gestionnaire.GESTIONNAIRE.CODE), true)
val GESTIONNAIRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Gestionnaire.GESTIONNAIRE, DSL.name("gestionnaire_pkey"), arrayOf(Gestionnaire.GESTIONNAIRE.ID), true)
val GROUPE_COUCHE_GROUPE_COUCHE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(GroupeCouche.GROUPE_COUCHE, DSL.name("groupe_couche_groupe_couche_code_key"), arrayOf(GroupeCouche.GROUPE_COUCHE.CODE), true)
val GROUPE_COUCHE_GROUPE_COUCHE_ORDRE_KEY: UniqueKey<Record> = Internal.createUniqueKey(GroupeCouche.GROUPE_COUCHE, DSL.name("groupe_couche_groupe_couche_ordre_key"), arrayOf(GroupeCouche.GROUPE_COUCHE.ORDRE), true)
val GROUPE_COUCHE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(GroupeCouche.GROUPE_COUCHE, DSL.name("groupe_couche_pkey"), arrayOf(GroupeCouche.GROUPE_COUCHE.ID), true)
val INDISPONIBILITE_TEMPORAIRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(IndisponibiliteTemporaire.INDISPONIBILITE_TEMPORAIRE, DSL.name("indisponibilite_temporaire_pkey"), arrayOf(IndisponibiliteTemporaire.INDISPONIBILITE_TEMPORAIRE.ID), true)
val JOB_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Job.JOB, DSL.name("job_pkey"), arrayOf(Job.JOB.ID), true)
val L_ADRESSE_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LAdresseDocument.L_ADRESSE_DOCUMENT, DSL.name("l_adresse_document_pkey"), arrayOf(LAdresseDocument.L_ADRESSE_DOCUMENT.DOCUMENT_ID, LAdresseDocument.L_ADRESSE_DOCUMENT.ADRESSE_ID), true)
val L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LAdresseElementAdresseTypeAnomalie.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE, DSL.name("l_adresse_element_adresse_type_anomalie_pkey"), arrayOf(LAdresseElementAdresseTypeAnomalie.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE.ADRESSE_TYPE_ANOMALIE_ID, LAdresseElementAdresseTypeAnomalie.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE.ELEMENT_ID), true)
val L_COMMUNE_CIS_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCommuneCis.L_COMMUNE_CIS, DSL.name("l_commune_cis_pkey"), arrayOf(LCommuneCis.L_COMMUNE_CIS.COMMUNE_ID, LCommuneCis.L_COMMUNE_CIS.CIS_ID), true)
val L_CONTACT_GESTIONNAIRE_CONTACT_ID_KEY: UniqueKey<Record> = Internal.createUniqueKey(LContactGestionnaire.L_CONTACT_GESTIONNAIRE, DSL.name("l_contact_gestionnaire_contact_id_key"), arrayOf(LContactGestionnaire.L_CONTACT_GESTIONNAIRE.CONTACT_ID), true)
val L_CONTACT_GESTIONNAIRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LContactGestionnaire.L_CONTACT_GESTIONNAIRE, DSL.name("l_contact_gestionnaire_pkey"), arrayOf(LContactGestionnaire.L_CONTACT_GESTIONNAIRE.CONTACT_ID, LContactGestionnaire.L_CONTACT_GESTIONNAIRE.GESTIONNAIRE_ID), true)
val L_CONTACT_ORGANISME_CONTACT_ID_KEY: UniqueKey<Record> = Internal.createUniqueKey(LContactOrganisme.L_CONTACT_ORGANISME, DSL.name("l_contact_organisme_contact_id_key"), arrayOf(LContactOrganisme.L_CONTACT_ORGANISME.CONTACT_ID), true)
val L_CONTACT_ORGANISME_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LContactOrganisme.L_CONTACT_ORGANISME, DSL.name("l_contact_organisme_pkey"), arrayOf(LContactOrganisme.L_CONTACT_ORGANISME.CONTACT_ID, LContactOrganisme.L_CONTACT_ORGANISME.ORGANISME_ID), true)
val L_CONTACT_ROLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LContactRole.L_CONTACT_ROLE, DSL.name("l_contact_role_pkey"), arrayOf(LContactRole.L_CONTACT_ROLE.CONTACT_ID, LContactRole.L_CONTACT_ROLE.ROLE_ID), true)
val L_COUCHE_CRISE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCoucheCrise.L_COUCHE_CRISE, DSL.name("l_couche_crise_pkey"), arrayOf(LCoucheCrise.L_COUCHE_CRISE.COUCHE_ID, LCoucheCrise.L_COUCHE_CRISE.CRISE_ID), true)
val L_COUCHE_DROIT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCoucheDroit.L_COUCHE_DROIT, DSL.name("l_couche_droit_pkey"), arrayOf(LCoucheDroit.L_COUCHE_DROIT.COUCHE_ID, LCoucheDroit.L_COUCHE_DROIT.PROFIL_DROIT_ID), true)
val L_COUCHE_MODULE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCoucheModule.L_COUCHE_MODULE, DSL.name("l_couche_module_pkey"), arrayOf(LCoucheModule.L_COUCHE_MODULE.COUCHE_ID, LCoucheModule.L_COUCHE_MODULE.MODULE_TYPE), true)
val L_COURRIER_CONTACT_GESTIONNAIRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCourrierContactGestionnaire.L_COURRIER_CONTACT_GESTIONNAIRE, DSL.name("l_courrier_contact_gestionnaire_pkey"), arrayOf(LCourrierContactGestionnaire.L_COURRIER_CONTACT_GESTIONNAIRE.COURRIER_ID, LCourrierContactGestionnaire.L_COURRIER_CONTACT_GESTIONNAIRE.CONTACT_ID), true)
val L_COURRIER_CONTACT_ORGANISME_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCourrierContactOrganisme.L_COURRIER_CONTACT_ORGANISME, DSL.name("l_courrier_contact_organisme_pkey"), arrayOf(LCourrierContactOrganisme.L_COURRIER_CONTACT_ORGANISME.COURRIER_ID, LCourrierContactOrganisme.L_COURRIER_CONTACT_ORGANISME.CONTACT_ID), true)
val L_COURRIER_ORGANISME_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCourrierOrganisme.L_COURRIER_ORGANISME, DSL.name("l_courrier_organisme_pkey"), arrayOf(LCourrierOrganisme.L_COURRIER_ORGANISME.COURRIER_ID, LCourrierOrganisme.L_COURRIER_ORGANISME.ORGANISME_ID), true)
val L_COURRIER_UTILISATEUR_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCourrierUtilisateur.L_COURRIER_UTILISATEUR, DSL.name("l_courrier_utilisateur_pkey"), arrayOf(LCourrierUtilisateur.L_COURRIER_UTILISATEUR.COURRIER_ID, LCourrierUtilisateur.L_COURRIER_UTILISATEUR.UTILISATEUR_ID), true)
val L_CRISE_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LCriseDocument.L_CRISE_DOCUMENT, DSL.name("l_crise_document_pkey"), arrayOf(LCriseDocument.L_CRISE_DOCUMENT.CRISE_ID, LCriseDocument.L_CRISE_DOCUMENT.DOCUMENT_ID), true)
val L_DASHBOARD_PROFIL_PROFIL_UTILISATEUR_ID_KEY: UniqueKey<Record> = Internal.createUniqueKey(LDashboardProfil.L_DASHBOARD_PROFIL, DSL.name("l_dashboard_profil_profil_utilisateur_id_key"), arrayOf(LDashboardProfil.L_DASHBOARD_PROFIL.PROFIL_UTILISATEUR_ID), true)
val L_DEBIT_SIMULTANE_MESURE_PEI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LDebitSimultaneMesurePei.L_DEBIT_SIMULTANE_MESURE_PEI, DSL.name("l_debit_simultane_mesure_pei_pkey"), arrayOf(LDebitSimultaneMesurePei.L_DEBIT_SIMULTANE_MESURE_PEI.DEBIT_SIMULTANE_MESURE_ID, LDebitSimultaneMesurePei.L_DEBIT_SIMULTANE_MESURE_PEI.PEI_ID), true)
val L_DIAMETRE_NATURE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LDiametreNature.L_DIAMETRE_NATURE, DSL.name("l_diametre_nature_pkey"), arrayOf(LDiametreNature.L_DIAMETRE_NATURE.DIAMETRE_ID, LDiametreNature.L_DIAMETRE_NATURE.NATURE_ID), true)
val L_EVENEMENT_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LEvenementDocument.L_EVENEMENT_DOCUMENT, DSL.name("l_evenement_document_pkey"), arrayOf(LEvenementDocument.L_EVENEMENT_DOCUMENT.EVENEMENT_ID, LEvenementDocument.L_EVENEMENT_DOCUMENT.DOCUMENT_ID), true)
val L_INDISPONIBILITE_TEMPORAIRE_PEI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LIndisponibiliteTemporairePei.L_INDISPONIBILITE_TEMPORAIRE_PEI, DSL.name("l_indisponibilite_temporaire_pei_pkey"), arrayOf(LIndisponibiliteTemporairePei.L_INDISPONIBILITE_TEMPORAIRE_PEI.PEI_ID, LIndisponibiliteTemporairePei.L_INDISPONIBILITE_TEMPORAIRE_PEI.INDISPONIBILITE_TEMPORAIRE_ID), true)
val L_MODELE_COURRIER_PROFIL_DROIT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LModeleCourrierProfilDroit.L_MODELE_COURRIER_PROFIL_DROIT, DSL.name("l_modele_courrier_profil_droit_pkey"), arrayOf(LModeleCourrierProfilDroit.L_MODELE_COURRIER_PROFIL_DROIT.PROFIL_DROIT_ID, LModeleCourrierProfilDroit.L_MODELE_COURRIER_PROFIL_DROIT.MODELE_COURRIER_ID), true)
val L_PEI_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LPeiAnomalie.L_PEI_ANOMALIE, DSL.name("l_pei_anomalie_pkey"), arrayOf(LPeiAnomalie.L_PEI_ANOMALIE.PEI_ID, LPeiAnomalie.L_PEI_ANOMALIE.ANOMALIE_ID), true)
val L_PEI_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LPeiDocument.L_PEI_DOCUMENT, DSL.name("l_pei_document_pkey"), arrayOf(LPeiDocument.L_PEI_DOCUMENT.PEI_ID, LPeiDocument.L_PEI_DOCUMENT.DOCUMENT_ID), true)
val L_PENA_TYPE_ENGIN_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LPenaTypeEngin.L_PENA_TYPE_ENGIN, DSL.name("l_pena_type_engin_pkey"), arrayOf(LPenaTypeEngin.L_PENA_TYPE_ENGIN.PENA_ID, LPenaTypeEngin.L_PENA_TYPE_ENGIN.TYPE_ENGIN_ID), true)
val L_PERMIS_CADASTRE_PARCELLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LPermisCadastreParcelle.L_PERMIS_CADASTRE_PARCELLE, DSL.name("l_permis_cadastre_parcelle_pkey"), arrayOf(LPermisCadastreParcelle.L_PERMIS_CADASTRE_PARCELLE.PERMIS_ID, LPermisCadastreParcelle.L_PERMIS_CADASTRE_PARCELLE.CADASTRE_PARCELLE_ID), true)
val L_PERMIS_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LPermisDocument.L_PERMIS_DOCUMENT, DSL.name("l_permis_document_pkey"), arrayOf(LPermisDocument.L_PERMIS_DOCUMENT.PERMIS_ID, LPermisDocument.L_PERMIS_DOCUMENT.DOCUMENT_ID), true)
val L_PROFIL_DROIT_DOCUMENT_HABILITABLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LProfilDroitDocumentHabilitable.L_PROFIL_DROIT_DOCUMENT_HABILITABLE, DSL.name("l_profil_droit_document_habilitable_pkey"), arrayOf(LProfilDroitDocumentHabilitable.L_PROFIL_DROIT_DOCUMENT_HABILITABLE.PROFIL_DROIT_ID, LProfilDroitDocumentHabilitable.L_PROFIL_DROIT_DOCUMENT_HABILITABLE.DOCUMENT_HABILITABLE_ID), true)
val L_PROFIL_UTILISATEUR_ORGANISME_DROIT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT, DSL.name("l_profil_utilisateur_organisme_droit_pkey"), arrayOf(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT.PROFIL_UTILISATEUR_ID, LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT.PROFIL_ORGANISME_ID), true)
val L_RAPPORT_PERSONNALISE_PROFIL_DROIT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LRapportPersonnaliseProfilDroit.L_RAPPORT_PERSONNALISE_PROFIL_DROIT, DSL.name("l_rapport_personnalise_profil_droit_pkey"), arrayOf(LRapportPersonnaliseProfilDroit.L_RAPPORT_PERSONNALISE_PROFIL_DROIT.PROFIL_DROIT_ID, LRapportPersonnaliseProfilDroit.L_RAPPORT_PERSONNALISE_PROFIL_DROIT.RAPPORT_PERSONNALISE_ID), true)
val L_THEMATIQUE_COURRIER_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LThematiqueCourrier.L_THEMATIQUE_COURRIER, DSL.name("l_thematique_courrier_pkey"), arrayOf(LThematiqueCourrier.L_THEMATIQUE_COURRIER.COURRIER_ID, LThematiqueCourrier.L_THEMATIQUE_COURRIER.THEMATIQUE_ID), true)
val L_THEMATIQUE_DOCUMENT_HABILITABLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LThematiqueDocumentHabilitable.L_THEMATIQUE_DOCUMENT_HABILITABLE, DSL.name("l_thematique_document_habilitable_pkey"), arrayOf(LThematiqueDocumentHabilitable.L_THEMATIQUE_DOCUMENT_HABILITABLE.THEMATIQUE_ID, LThematiqueDocumentHabilitable.L_THEMATIQUE_DOCUMENT_HABILITABLE.DOCUMENT_HABILITABLE_ID), true)
val L_THEMATIQUE_MODULE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LThematiqueModule.L_THEMATIQUE_MODULE, DSL.name("l_thematique_module_pkey"), arrayOf(LThematiqueModule.L_THEMATIQUE_MODULE.THEMATIQUE_ID, LThematiqueModule.L_THEMATIQUE_MODULE.MODULE_ID), true)
val L_TOURNEE_PEI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LTourneePei.L_TOURNEE_PEI, DSL.name("l_tournee_pei_pkey"), arrayOf(LTourneePei.L_TOURNEE_PEI.TOURNEE_ID, LTourneePei.L_TOURNEE_PEI.PEI_ID), true)
val L_TOURNEE_PEI_TOURNEE_ID_L_TOURNEE_PEI_ORDRE_KEY: UniqueKey<Record> = Internal.createUniqueKey(LTourneePei.L_TOURNEE_PEI, DSL.name("l_tournee_pei_tournee_id_l_tournee_pei_ordre_key"), arrayOf(LTourneePei.L_TOURNEE_PEI.TOURNEE_ID, LTourneePei.L_TOURNEE_PEI.ORDRE), true)
val L_TYPE_CRISE_CATEGORIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LTypeCriseCategorie.L_TYPE_CRISE_CATEGORIE, DSL.name("l_type_crise_categorie_pkey"), arrayOf(LTypeCriseCategorie.L_TYPE_CRISE_CATEGORIE.TYPE_CRISE_ID, LTypeCriseCategorie.L_TYPE_CRISE_CATEGORIE.CRISE_CATEGORIE_ID), true)
val L_VISITE_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LVisiteAnomalie.L_VISITE_ANOMALIE, DSL.name("l_visite_anomalie_pkey"), arrayOf(LVisiteAnomalie.L_VISITE_ANOMALIE.VISITE_ID, LVisiteAnomalie.L_VISITE_ANOMALIE.ANOMALIE_ID), true)
val LIEU_DIT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LieuDit.LIEU_DIT, DSL.name("lieu_dit_pkey"), arrayOf(LieuDit.LIEU_DIT.ID), true)
val LOG_LINE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LogLine.LOG_LINE, DSL.name("log_line_pkey"), arrayOf(LogLine.LOG_LINE.ID), true)
val MARQUE_PIBI_MARQUE_PIBI_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(MarquePibi.MARQUE_PIBI, DSL.name("marque_pibi_marque_pibi_code_key"), arrayOf(MarquePibi.MARQUE_PIBI.CODE), true)
val MARQUE_PIBI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(MarquePibi.MARQUE_PIBI, DSL.name("marque_pibi_pkey"), arrayOf(MarquePibi.MARQUE_PIBI.ID), true)
val MATERIAU_MATERIAU_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Materiau.MATERIAU, DSL.name("materiau_materiau_code_key"), arrayOf(Materiau.MATERIAU.CODE), true)
val MATERIAU_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Materiau.MATERIAU, DSL.name("materiau_pkey"), arrayOf(Materiau.MATERIAU.ID), true)
val MESSAGE_EVENEMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(MessageEvenement.MESSAGE_EVENEMENT, DSL.name("message_evenement_pkey"), arrayOf(MessageEvenement.MESSAGE_EVENEMENT.MESSAGE_ID), true)
val MODELE_COURRIER_MODELE_COURRIER_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(ModeleCourrier.MODELE_COURRIER, DSL.name("modele_courrier_modele_courrier_code_key"), arrayOf(ModeleCourrier.MODELE_COURRIER.CODE), true)
val MODELE_COURRIER_PKEY: UniqueKey<Record> = Internal.createUniqueKey(ModeleCourrier.MODELE_COURRIER, DSL.name("modele_courrier_pkey"), arrayOf(ModeleCourrier.MODELE_COURRIER.ID), true)
val MODELE_COURRIER_PARAMETRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(ModeleCourrierParametre.MODELE_COURRIER_PARAMETRE, DSL.name("modele_courrier_parametre_pkey"), arrayOf(ModeleCourrierParametre.MODELE_COURRIER_PARAMETRE.ID), true)
val MODELE_PIBI_MODELE_PIBI_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(ModelePibi.MODELE_PIBI, DSL.name("modele_pibi_modele_pibi_code_key"), arrayOf(ModelePibi.MODELE_PIBI.CODE), true)
val MODELE_PIBI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(ModelePibi.MODELE_PIBI, DSL.name("modele_pibi_pkey"), arrayOf(ModelePibi.MODELE_PIBI.ID), true)
val MODULE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Module.MODULE, DSL.name("module_pkey"), arrayOf(Module.MODULE.ID), true)
val NATURE_NATURE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Nature.NATURE, DSL.name("nature_nature_code_key"), arrayOf(Nature.NATURE.CODE), true)
val NATURE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Nature.NATURE, DSL.name("nature_pkey"), arrayOf(Nature.NATURE.ID), true)
val NATURE_DECI_NATURE_DECI_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(NatureDeci.NATURE_DECI, DSL.name("nature_deci_nature_deci_code_key"), arrayOf(NatureDeci.NATURE_DECI.CODE), true)
val NATURE_DECI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(NatureDeci.NATURE_DECI, DSL.name("nature_deci_pkey"), arrayOf(NatureDeci.NATURE_DECI.ID), true)
val NIVEAU_NIVEAU_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Niveau.NIVEAU, DSL.name("niveau_niveau_code_key"), arrayOf(Niveau.NIVEAU.CODE), true)
val NIVEAU_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Niveau.NIVEAU, DSL.name("niveau_pkey"), arrayOf(Niveau.NIVEAU.ID), true)
val OLDEB_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Oldeb.OLDEB, DSL.name("oldeb_pkey"), arrayOf(Oldeb.OLDEB.ID), true)
val OLDEB_CARACTERISTIQUE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebCaracteristique.OLDEB_CARACTERISTIQUE, DSL.name("oldeb_caracteristique_pkey"), arrayOf(OldebCaracteristique.OLDEB_CARACTERISTIQUE.OLDEB_ID, OldebCaracteristique.OLDEB_CARACTERISTIQUE.OLDEB_TYPE_CARACTERISTIQUE_ID), true)
val OLDEB_LOCATAIRE_OLDEB_LOCATAIRE_OLDEB_ID_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebLocataire.OLDEB_LOCATAIRE, DSL.name("oldeb_locataire_oldeb_locataire_oldeb_id_key"), arrayOf(OldebLocataire.OLDEB_LOCATAIRE.OLDEB_ID), true)
val OLDEB_LOCATAIRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebLocataire.OLDEB_LOCATAIRE, DSL.name("oldeb_locataire_pkey"), arrayOf(OldebLocataire.OLDEB_LOCATAIRE.ID), true)
val OLDEB_PROPRIETAIRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebProprietaire.OLDEB_PROPRIETAIRE, DSL.name("oldeb_proprietaire_pkey"), arrayOf(OldebProprietaire.OLDEB_PROPRIETAIRE.ID), true)
val OLDEB_PROPRIETE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebPropriete.OLDEB_PROPRIETE, DSL.name("oldeb_propriete_pkey"), arrayOf(OldebPropriete.OLDEB_PROPRIETE.ID), true)
val OLDEB_TYPE_ACCES_OLDEB_TYPE_ACCES_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAcces.OLDEB_TYPE_ACCES, DSL.name("oldeb_type_acces_oldeb_type_acces_code_key"), arrayOf(OldebTypeAcces.OLDEB_TYPE_ACCES.CODE), true)
val OLDEB_TYPE_ACCES_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAcces.OLDEB_TYPE_ACCES, DSL.name("oldeb_type_acces_pkey"), arrayOf(OldebTypeAcces.OLDEB_TYPE_ACCES.ID), true)
val OLDEB_TYPE_ACTION_OLDEB_TYPE_ACTION_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAction.OLDEB_TYPE_ACTION, DSL.name("oldeb_type_action_oldeb_type_action_code_key"), arrayOf(OldebTypeAction.OLDEB_TYPE_ACTION.CODE), true)
val OLDEB_TYPE_ACTION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAction.OLDEB_TYPE_ACTION, DSL.name("oldeb_type_action_pkey"), arrayOf(OldebTypeAction.OLDEB_TYPE_ACTION.ID), true)
val OLDEB_TYPE_ANOMALIE_OLDEB_TYPE_ANOMALIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAnomalie.OLDEB_TYPE_ANOMALIE, DSL.name("oldeb_type_anomalie_oldeb_type_anomalie_code_key"), arrayOf(OldebTypeAnomalie.OLDEB_TYPE_ANOMALIE.CODE), true)
val OLDEB_TYPE_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAnomalie.OLDEB_TYPE_ANOMALIE, DSL.name("oldeb_type_anomalie_pkey"), arrayOf(OldebTypeAnomalie.OLDEB_TYPE_ANOMALIE.ID), true)
val OLDEB_TYPE_AVIS_OLDEB_TYPE_AVIS_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAvis.OLDEB_TYPE_AVIS, DSL.name("oldeb_type_avis_oldeb_type_avis_code_key"), arrayOf(OldebTypeAvis.OLDEB_TYPE_AVIS.CODE), true)
val OLDEB_TYPE_AVIS_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeAvis.OLDEB_TYPE_AVIS, DSL.name("oldeb_type_avis_pkey"), arrayOf(OldebTypeAvis.OLDEB_TYPE_AVIS.ID), true)
val OLDEB_TYPE_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeCaracteristique.OLDEB_TYPE_CARACTERISTIQUE, DSL.name("oldeb_type_caracteristique_oldeb_type_caracteristique_code_key"), arrayOf(OldebTypeCaracteristique.OLDEB_TYPE_CARACTERISTIQUE.CODE), true)
val OLDEB_TYPE_CARACTERISTIQUE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeCaracteristique.OLDEB_TYPE_CARACTERISTIQUE, DSL.name("oldeb_type_caracteristique_pkey"), arrayOf(OldebTypeCaracteristique.OLDEB_TYPE_CARACTERISTIQUE.ID), true)
val OLDEB_TYPE_CATEGORIE_ANOMALIE_OLDEB_TYPE_CATEGORIE_ANOMALIE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeCategorieAnomalie.OLDEB_TYPE_CATEGORIE_ANOMALIE, DSL.name("oldeb_type_categorie_anomalie_oldeb_type_categorie_anomalie_key"), arrayOf(OldebTypeCategorieAnomalie.OLDEB_TYPE_CATEGORIE_ANOMALIE.CODE), true)
val OLDEB_TYPE_CATEGORIE_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeCategorieAnomalie.OLDEB_TYPE_CATEGORIE_ANOMALIE, DSL.name("oldeb_type_categorie_anomalie_pkey"), arrayOf(OldebTypeCategorieAnomalie.OLDEB_TYPE_CATEGORIE_ANOMALIE.ID), true)
val OLDEB_TYPE_CATEGORIE_CARACTER_OLDEB_TYPE_CATEGORIE_CARACTER_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeCategorieCaracteristique.OLDEB_TYPE_CATEGORIE_CARACTERISTIQUE, DSL.name("oldeb_type_categorie_caracter_oldeb_type_categorie_caracter_key"), arrayOf(OldebTypeCategorieCaracteristique.OLDEB_TYPE_CATEGORIE_CARACTERISTIQUE.CODE), true)
val OLDEB_TYPE_CATEGORIE_CARACTERISTIQUE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeCategorieCaracteristique.OLDEB_TYPE_CATEGORIE_CARACTERISTIQUE, DSL.name("oldeb_type_categorie_caracteristique_pkey"), arrayOf(OldebTypeCategorieCaracteristique.OLDEB_TYPE_CATEGORIE_CARACTERISTIQUE.ID), true)
val OLDEB_TYPE_DEBROUSSAILLEMENT_OLDEB_TYPE_DEBROUSSAILLEMENT_C_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeDebroussaillement.OLDEB_TYPE_DEBROUSSAILLEMENT, DSL.name("oldeb_type_debroussaillement_oldeb_type_debroussaillement_c_key"), arrayOf(OldebTypeDebroussaillement.OLDEB_TYPE_DEBROUSSAILLEMENT.CODE), true)
val OLDEB_TYPE_DEBROUSSAILLEMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeDebroussaillement.OLDEB_TYPE_DEBROUSSAILLEMENT, DSL.name("oldeb_type_debroussaillement_pkey"), arrayOf(OldebTypeDebroussaillement.OLDEB_TYPE_DEBROUSSAILLEMENT.ID), true)
val OLDEB_TYPE_RESIDENCE_OLDEB_TYPE_RESIDENCE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeResidence.OLDEB_TYPE_RESIDENCE, DSL.name("oldeb_type_residence_oldeb_type_residence_code_key"), arrayOf(OldebTypeResidence.OLDEB_TYPE_RESIDENCE.CODE), true)
val OLDEB_TYPE_RESIDENCE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeResidence.OLDEB_TYPE_RESIDENCE, DSL.name("oldeb_type_residence_pkey"), arrayOf(OldebTypeResidence.OLDEB_TYPE_RESIDENCE.ID), true)
val OLDEB_TYPE_SUITE_OLDEB_TYPE_SUITE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeSuite.OLDEB_TYPE_SUITE, DSL.name("oldeb_type_suite_oldeb_type_suite_code_key"), arrayOf(OldebTypeSuite.OLDEB_TYPE_SUITE.CODE), true)
val OLDEB_TYPE_SUITE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeSuite.OLDEB_TYPE_SUITE, DSL.name("oldeb_type_suite_pkey"), arrayOf(OldebTypeSuite.OLDEB_TYPE_SUITE.ID), true)
val OLDEB_TYPE_ZONE_URBANISME_OLDEB_TYPE_ZONE_URBANISME_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeZoneUrbanisme.OLDEB_TYPE_ZONE_URBANISME, DSL.name("oldeb_type_zone_urbanisme_oldeb_type_zone_urbanisme_code_key"), arrayOf(OldebTypeZoneUrbanisme.OLDEB_TYPE_ZONE_URBANISME.CODE), true)
val OLDEB_TYPE_ZONE_URBANISME_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebTypeZoneUrbanisme.OLDEB_TYPE_ZONE_URBANISME, DSL.name("oldeb_type_zone_urbanisme_pkey"), arrayOf(OldebTypeZoneUrbanisme.OLDEB_TYPE_ZONE_URBANISME.ID), true)
val OLDEB_VISITE_OLDEB_VISITE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(OldebVisite.OLDEB_VISITE, DSL.name("oldeb_visite_oldeb_visite_code_key"), arrayOf(OldebVisite.OLDEB_VISITE.CODE), true)
val OLDEB_VISITE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebVisite.OLDEB_VISITE, DSL.name("oldeb_visite_pkey"), arrayOf(OldebVisite.OLDEB_VISITE.ID), true)
val OLDEB_VISITE_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebVisiteAnomalie.OLDEB_VISITE_ANOMALIE, DSL.name("oldeb_visite_anomalie_pkey"), arrayOf(OldebVisiteAnomalie.OLDEB_VISITE_ANOMALIE.OLDEB_VISITE_ID, OldebVisiteAnomalie.OLDEB_VISITE_ANOMALIE.OLDEB_TYPE_ANOMALIE_ID), true)
val OLDEB_VISITE_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebVisiteDocument.OLDEB_VISITE_DOCUMENT, DSL.name("oldeb_visite_document_pkey"), arrayOf(OldebVisiteDocument.OLDEB_VISITE_DOCUMENT.ID), true)
val OLDEB_VISITE_SUITE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(OldebVisiteSuite.OLDEB_VISITE_SUITE, DSL.name("oldeb_visite_suite_pkey"), arrayOf(OldebVisiteSuite.OLDEB_VISITE_SUITE.ID), true)
val ORGANISME_KEYCLOAK_ID_UNIQUE: UniqueKey<Record> = Internal.createUniqueKey(Organisme.ORGANISME, DSL.name("organisme_keycloak_id_unique"), arrayOf(Organisme.ORGANISME.KEYCLOAK_ID), true)
val ORGANISME_ORGANISME_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Organisme.ORGANISME, DSL.name("organisme_organisme_code_key"), arrayOf(Organisme.ORGANISME.CODE), true)
val ORGANISME_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Organisme.ORGANISME, DSL.name("organisme_pkey"), arrayOf(Organisme.ORGANISME.ID), true)
val PARAMETRE_PARAMETRE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Parametre.PARAMETRE, DSL.name("parametre_parametre_code_key"), arrayOf(Parametre.PARAMETRE.CODE), true)
val PARAMETRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Parametre.PARAMETRE, DSL.name("parametre_pkey"), arrayOf(Parametre.PARAMETRE.ID), true)
val PEI_PEI_NUMERO_COMPLET_KEY: UniqueKey<Record> = Internal.createUniqueKey(Pei.PEI, DSL.name("pei_pei_numero_complet_key"), arrayOf(Pei.PEI.NUMERO_COMPLET), true)
val PEI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Pei.PEI, DSL.name("pei_pkey"), arrayOf(Pei.PEI.ID), true)
val PEI_PRESCRIT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(PeiPrescrit.PEI_PRESCRIT, DSL.name("pei_prescrit_pkey"), arrayOf(PeiPrescrit.PEI_PRESCRIT.ID), true)
val PENA_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Pena.PENA, DSL.name("pena_pkey"), arrayOf(Pena.PENA.ID), true)
val PENA_ASPIRATION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(PenaAspiration.PENA_ASPIRATION, DSL.name("pena_aspiration_pkey"), arrayOf(PenaAspiration.PENA_ASPIRATION.ID), true)
val PERMIS_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Permis.PERMIS, DSL.name("permis_pkey"), arrayOf(Permis.PERMIS.ID), true)
val PIBI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Pibi.PIBI, DSL.name("pibi_pkey"), arrayOf(Pibi.PIBI.ID), true)
val POIDS_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(PoidsAnomalie.POIDS_ANOMALIE, DSL.name("poids_anomalie_pkey"), arrayOf(PoidsAnomalie.POIDS_ANOMALIE.ID), true)
val POIDS_ANOMALIE_POIDS_ANOMALIE_ANOMALIE_ID_POIDS_ANOMALIE_NA_KEY: UniqueKey<Record> = Internal.createUniqueKey(PoidsAnomalie.POIDS_ANOMALIE, DSL.name("poids_anomalie_poids_anomalie_anomalie_id_poids_anomalie_na_key"), arrayOf(PoidsAnomalie.POIDS_ANOMALIE.ANOMALIE_ID, PoidsAnomalie.POIDS_ANOMALIE.NATURE_ID), true)
val PROFIL_DROIT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(ProfilDroit.PROFIL_DROIT, DSL.name("profil_droit_pkey"), arrayOf(ProfilDroit.PROFIL_DROIT.ID), true)
val PROFIL_DROIT_PROFIL_DROIT_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(ProfilDroit.PROFIL_DROIT, DSL.name("profil_droit_profil_droit_code_key"), arrayOf(ProfilDroit.PROFIL_DROIT.CODE), true)
val PROFIL_ORGANISME_PKEY: UniqueKey<Record> = Internal.createUniqueKey(ProfilOrganisme.PROFIL_ORGANISME, DSL.name("profil_organisme_pkey"), arrayOf(ProfilOrganisme.PROFIL_ORGANISME.ID), true)
val PROFIL_ORGANISME_PROFIL_ORGANISME_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(ProfilOrganisme.PROFIL_ORGANISME, DSL.name("profil_organisme_profil_organisme_code_key"), arrayOf(ProfilOrganisme.PROFIL_ORGANISME.CODE), true)
val PROFIL_UTILISATEUR_PKEY: UniqueKey<Record> = Internal.createUniqueKey(ProfilUtilisateur.PROFIL_UTILISATEUR, DSL.name("profil_utilisateur_pkey"), arrayOf(ProfilUtilisateur.PROFIL_UTILISATEUR.ID), true)
val PROFIL_UTILISATEUR_PROFIL_UTILISATEUR_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(ProfilUtilisateur.PROFIL_UTILISATEUR, DSL.name("profil_utilisateur_profil_utilisateur_code_key"), arrayOf(ProfilUtilisateur.PROFIL_UTILISATEUR.CODE), true)
val RAPPORT_PERSONNALISE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RapportPersonnalise.RAPPORT_PERSONNALISE, DSL.name("rapport_personnalise_pkey"), arrayOf(RapportPersonnalise.RAPPORT_PERSONNALISE.ID), true)
val RAPPORT_PERSONNALISE_RAPPORT_PERSONNALISE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(RapportPersonnalise.RAPPORT_PERSONNALISE, DSL.name("rapport_personnalise_rapport_personnalise_code_key"), arrayOf(RapportPersonnalise.RAPPORT_PERSONNALISE.CODE), true)
val RAPPORT_PERSONNALISE_PARAMETRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RapportPersonnaliseParametre.RAPPORT_PERSONNALISE_PARAMETRE, DSL.name("rapport_personnalise_parametre_pkey"), arrayOf(RapportPersonnaliseParametre.RAPPORT_PERSONNALISE_PARAMETRE.ID), true)
val RCCI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Rcci.RCCI, DSL.name("rcci_pkey"), arrayOf(Rcci.RCCI.ID), true)
val RCCI_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RcciDocument.RCCI_DOCUMENT, DSL.name("rcci_document_pkey"), arrayOf(RcciDocument.RCCI_DOCUMENT.ID), true)
val RCCI_TYPE_DEGRE_CERTITUDE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypeDegreCertitude.RCCI_TYPE_DEGRE_CERTITUDE, DSL.name("rcci_type_degre_certitude_pkey"), arrayOf(RcciTypeDegreCertitude.RCCI_TYPE_DEGRE_CERTITUDE.ID), true)
val RCCI_TYPE_DEGRE_CERTITUDE_RCCI_TYPE_DEGRE_CERTITUDE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypeDegreCertitude.RCCI_TYPE_DEGRE_CERTITUDE, DSL.name("rcci_type_degre_certitude_rcci_type_degre_certitude_code_key"), arrayOf(RcciTypeDegreCertitude.RCCI_TYPE_DEGRE_CERTITUDE.CODE), true)
val RCCI_TYPE_ORIGINE_ALERTE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypeOrigineAlerte.RCCI_TYPE_ORIGINE_ALERTE, DSL.name("rcci_type_origine_alerte_pkey"), arrayOf(RcciTypeOrigineAlerte.RCCI_TYPE_ORIGINE_ALERTE.ID), true)
val RCCI_TYPE_ORIGINE_ALERTE_RCCI_TYPE_ORIGINE_ALERTE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypeOrigineAlerte.RCCI_TYPE_ORIGINE_ALERTE, DSL.name("rcci_type_origine_alerte_rcci_type_origine_alerte_code_key"), arrayOf(RcciTypeOrigineAlerte.RCCI_TYPE_ORIGINE_ALERTE.CODE), true)
val RCCI_TYPE_PROMETHEE_CATEGORIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypePrometheeCategorie.RCCI_TYPE_PROMETHEE_CATEGORIE, DSL.name("rcci_type_promethee_categorie_pkey"), arrayOf(RcciTypePrometheeCategorie.RCCI_TYPE_PROMETHEE_CATEGORIE.ID), true)
val RCCI_TYPE_PROMETHEE_CATEGORIE_RCCI_TYPE_PROMETHEE_CATEGORIE_KEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypePrometheeCategorie.RCCI_TYPE_PROMETHEE_CATEGORIE, DSL.name("rcci_type_promethee_categorie_rcci_type_promethee_categorie_key"), arrayOf(RcciTypePrometheeCategorie.RCCI_TYPE_PROMETHEE_CATEGORIE.CODE), true)
val RCCI_TYPE_PROMETHEE_FAMILLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypePrometheeFamille.RCCI_TYPE_PROMETHEE_FAMILLE, DSL.name("rcci_type_promethee_famille_pkey"), arrayOf(RcciTypePrometheeFamille.RCCI_TYPE_PROMETHEE_FAMILLE.ID), true)
val RCCI_TYPE_PROMETHEE_FAMILLE_RCCI_TYPE_PROMETHEE_FAMILLE_COD_KEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypePrometheeFamille.RCCI_TYPE_PROMETHEE_FAMILLE, DSL.name("rcci_type_promethee_famille_rcci_type_promethee_famille_cod_key"), arrayOf(RcciTypePrometheeFamille.RCCI_TYPE_PROMETHEE_FAMILLE.CODE), true)
val RCCI_TYPE_PROMETHEE_PARTITION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypePrometheePartition.RCCI_TYPE_PROMETHEE_PARTITION, DSL.name("rcci_type_promethee_partition_pkey"), arrayOf(RcciTypePrometheePartition.RCCI_TYPE_PROMETHEE_PARTITION.ID), true)
val RCCI_TYPE_PROMETHEE_PARTITION_RCCI_TYPE_PROMETHEE_PARTITION_KEY: UniqueKey<Record> = Internal.createUniqueKey(RcciTypePrometheePartition.RCCI_TYPE_PROMETHEE_PARTITION, DSL.name("rcci_type_promethee_partition_rcci_type_promethee_partition_key"), arrayOf(RcciTypePrometheePartition.RCCI_TYPE_PROMETHEE_PARTITION.CODE), true)
val RESERVOIR_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Reservoir.RESERVOIR, DSL.name("reservoir_pkey"), arrayOf(Reservoir.RESERVOIR.ID), true)
val RESERVOIR_RESERVOIR_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Reservoir.RESERVOIR, DSL.name("reservoir_reservoir_code_key"), arrayOf(Reservoir.RESERVOIR.CODE), true)
val ROLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(RoleContact.ROLE_CONTACT, DSL.name("role_pkey"), arrayOf(RoleContact.ROLE_CONTACT.ID), true)
val ROLE_ROLE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(RoleContact.ROLE_CONTACT, DSL.name("role_role_code_key"), arrayOf(RoleContact.ROLE_CONTACT.CODE), true)
val SITE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Site.SITE, DSL.name("site_pkey"), arrayOf(Site.SITE.ID), true)
val SITE_SITE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Site.SITE, DSL.name("site_site_code_key"), arrayOf(Site.SITE.CODE), true)
val TASK_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Task.TASK, DSL.name("task_pkey"), arrayOf(Task.TASK.ID), true)
val TASK_TASK_TYPE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Task.TASK, DSL.name("task_task_type_key"), arrayOf(Task.TASK.TYPE), true)
val THEMATIQUE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Thematique.THEMATIQUE, DSL.name("thematique_pkey"), arrayOf(Thematique.THEMATIQUE.ID), true)
val THEMATIQUE_THEMATIQUE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Thematique.THEMATIQUE, DSL.name("thematique_thematique_code_key"), arrayOf(Thematique.THEMATIQUE.CODE), true)
val TOPONYMIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Toponymie.TOPONYMIE, DSL.name("toponymie_pkey"), arrayOf(Toponymie.TOPONYMIE.ID), true)
val TOPONYMIE_TOPONYMIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Toponymie.TOPONYMIE, DSL.name("toponymie_toponymie_code_key"), arrayOf(Toponymie.TOPONYMIE.CODE), true)
val TOURNEE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Tournee.TOURNEE, DSL.name("tournee_pkey"), arrayOf(Tournee.TOURNEE.ID), true)
val TOURNEE_TOURNEE_ORGANISME_ID_TOURNEE_LIBELLE_KEY: UniqueKey<Record> = Internal.createUniqueKey(Tournee.TOURNEE, DSL.name("tournee_tournee_organisme_id_tournee_libelle_key"), arrayOf(Tournee.TOURNEE.ORGANISME_ID, Tournee.TOURNEE.LIBELLE), true)
val TYPE_CANALISATION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeCanalisation.TYPE_CANALISATION, DSL.name("type_canalisation_pkey"), arrayOf(TypeCanalisation.TYPE_CANALISATION.ID), true)
val TYPE_CANALISATION_TYPE_CANALISATION_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeCanalisation.TYPE_CANALISATION, DSL.name("type_canalisation_type_canalisation_code_key"), arrayOf(TypeCanalisation.TYPE_CANALISATION.CODE), true)
val TYPE_CRISE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeCrise.TYPE_CRISE, DSL.name("type_crise_pkey"), arrayOf(TypeCrise.TYPE_CRISE.ID), true)
val TYPE_CRISE_TYPE_CRISE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeCrise.TYPE_CRISE, DSL.name("type_crise_type_crise_code_key"), arrayOf(TypeCrise.TYPE_CRISE.CODE), true)
val TYPE_CRISE_CATEGORIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeCriseCategorie.TYPE_CRISE_CATEGORIE, DSL.name("type_crise_categorie_pkey"), arrayOf(TypeCriseCategorie.TYPE_CRISE_CATEGORIE.ID), true)
val TYPE_CRISE_CATEGORIE_TYPE_CRISE_CATEGORIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeCriseCategorie.TYPE_CRISE_CATEGORIE, DSL.name("type_crise_categorie_type_crise_categorie_code_key"), arrayOf(TypeCriseCategorie.TYPE_CRISE_CATEGORIE.CODE), true)
val TYPE_CRISE_CATEGORIE_TYPE_CRISE_CATEGORIE_LIBELLE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeCriseCategorie.TYPE_CRISE_CATEGORIE, DSL.name("type_crise_categorie_type_crise_categorie_libelle_key"), arrayOf(TypeCriseCategorie.TYPE_CRISE_CATEGORIE.LIBELLE), true)
val TYPE_ENGIN_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeEngin.TYPE_ENGIN, DSL.name("type_engin_pkey"), arrayOf(TypeEngin.TYPE_ENGIN.ID), true)
val TYPE_ENGIN_TYPE_ENGIN_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeEngin.TYPE_ENGIN, DSL.name("type_engin_type_engin_code_key"), arrayOf(TypeEngin.TYPE_ENGIN.CODE), true)
val TYPE_ORGANISME_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeOrganisme.TYPE_ORGANISME, DSL.name("type_organisme_pkey"), arrayOf(TypeOrganisme.TYPE_ORGANISME.ID), true)
val TYPE_ORGANISME_TYPE_ORGANISME_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeOrganisme.TYPE_ORGANISME, DSL.name("type_organisme_type_organisme_code_key"), arrayOf(TypeOrganisme.TYPE_ORGANISME.CODE), true)
val TYPE_PENA_ASPIRATION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypePenaAspiration.TYPE_PENA_ASPIRATION, DSL.name("type_pena_aspiration_pkey"), arrayOf(TypePenaAspiration.TYPE_PENA_ASPIRATION.ID), true)
val TYPE_PENA_ASPIRATION_TYPE_PENA_ASPIRATION_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypePenaAspiration.TYPE_PENA_ASPIRATION, DSL.name("type_pena_aspiration_type_pena_aspiration_code_key"), arrayOf(TypePenaAspiration.TYPE_PENA_ASPIRATION.CODE), true)
val TYPE_PERMIS_AVIS_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypePermisAvis.TYPE_PERMIS_AVIS, DSL.name("type_permis_avis_pkey"), arrayOf(TypePermisAvis.TYPE_PERMIS_AVIS.ID), true)
val TYPE_PERMIS_AVIS_TYPE_PERMIS_AVIS_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypePermisAvis.TYPE_PERMIS_AVIS, DSL.name("type_permis_avis_type_permis_avis_code_key"), arrayOf(TypePermisAvis.TYPE_PERMIS_AVIS.CODE), true)
val TYPE_PERMIS_AVIS_TYPE_PERMIS_AVIS_LIBELLE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypePermisAvis.TYPE_PERMIS_AVIS, DSL.name("type_permis_avis_type_permis_avis_libelle_key"), arrayOf(TypePermisAvis.TYPE_PERMIS_AVIS.LIBELLE), true)
val TYPE_PERMIS_INTERSERVICE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypePermisInterservice.TYPE_PERMIS_INTERSERVICE, DSL.name("type_permis_interservice_pkey"), arrayOf(TypePermisInterservice.TYPE_PERMIS_INTERSERVICE.ID), true)
val TYPE_PERMIS_INTERSERVICE_TYPE_PERMIS_INTERSERVICE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypePermisInterservice.TYPE_PERMIS_INTERSERVICE, DSL.name("type_permis_interservice_type_permis_interservice_code_key"), arrayOf(TypePermisInterservice.TYPE_PERMIS_INTERSERVICE.CODE), true)
val TYPE_PERMIS_INTERSERVICE_TYPE_PERMIS_INTERSERVICE_LIBELLE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypePermisInterservice.TYPE_PERMIS_INTERSERVICE, DSL.name("type_permis_interservice_type_permis_interservice_libelle_key"), arrayOf(TypePermisInterservice.TYPE_PERMIS_INTERSERVICE.LIBELLE), true)
val TYPE_RESEAU_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeReseau.TYPE_RESEAU, DSL.name("type_reseau_pkey"), arrayOf(TypeReseau.TYPE_RESEAU.ID), true)
val TYPE_RESEAU_TYPE_RESEAU_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeReseau.TYPE_RESEAU, DSL.name("type_reseau_type_reseau_code_key"), arrayOf(TypeReseau.TYPE_RESEAU.CODE), true)
val TYPE_TOPONYMIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeToponymie.TYPE_TOPONYMIE, DSL.name("type_toponymie_pkey"), arrayOf(TypeToponymie.TYPE_TOPONYMIE.ID), true)
val TYPE_TOPONYMIE_TYPE_TOPONYMIE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeToponymie.TYPE_TOPONYMIE, DSL.name("type_toponymie_type_toponymie_code_key"), arrayOf(TypeToponymie.TYPE_TOPONYMIE.CODE), true)
val UTILISATEUR_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Utilisateur.UTILISATEUR, DSL.name("utilisateur_pkey"), arrayOf(Utilisateur.UTILISATEUR.ID), true)
val UTILISATEUR_UTILISATEUR_EMAIL_KEY: UniqueKey<Record> = Internal.createUniqueKey(Utilisateur.UTILISATEUR, DSL.name("utilisateur_utilisateur_email_key"), arrayOf(Utilisateur.UTILISATEUR.EMAIL), true)
val UTILISATEUR_UTILISATEUR_USERNAME_KEY: UniqueKey<Record> = Internal.createUniqueKey(Utilisateur.UTILISATEUR, DSL.name("utilisateur_utilisateur_username_key"), arrayOf(Utilisateur.UTILISATEUR.USERNAME), true)
val VISITE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Visite.VISITE, DSL.name("visite_pkey"), arrayOf(Visite.VISITE.ID), true)
val VISITE_CTRL_DEBIT_PRESSION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(VisiteCtrlDebitPression.VISITE_CTRL_DEBIT_PRESSION, DSL.name("visite_ctrl_debit_pression_pkey"), arrayOf(VisiteCtrlDebitPression.VISITE_CTRL_DEBIT_PRESSION.VISITE_ID), true)
val VOIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Voie.VOIE, DSL.name("voie_pkey"), arrayOf(Voie.VOIE.ID), true)
val VOIE_VOIE_LIBELLE_VOIE_COMMUNE_ID_KEY: UniqueKey<Record> = Internal.createUniqueKey(Voie.VOIE, DSL.name("voie_voie_libelle_voie_commune_id_key"), arrayOf(Voie.VOIE.LIBELLE, Voie.VOIE.COMMUNE_ID), true)
val ZONE_INTEGRATION_PKEY: UniqueKey<Record> = Internal.createUniqueKey(ZoneIntegration.ZONE_INTEGRATION, DSL.name("zone_integration_pkey"), arrayOf(ZoneIntegration.ZONE_INTEGRATION.ID), true)
val ZONE_INTEGRATION_ZONE_INTEGRATION_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(ZoneIntegration.ZONE_INTEGRATION, DSL.name("zone_integration_zone_integration_code_key"), arrayOf(ZoneIntegration.ZONE_INTEGRATION.CODE), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val ADRESSE__ADRESSE_ADRESSE_UTILISATEUR_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Adresse.ADRESSE, DSL.name("adresse_adresse_utilisateur_fkey"), arrayOf(Adresse.ADRESSE.UTILISATEUR), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_ADRESSE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(AdresseElement.ADRESSE_ELEMENT, DSL.name("adresse_element_adresse_element_adresse_id_fkey"), arrayOf(AdresseElement.ADRESSE_ELEMENT.ADRESSE_ID), remocra.db.jooq.remocra.keys.ADRESSE_PKEY, arrayOf(Adresse.ADRESSE.ID), true)
val ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_SOUS_TYPE_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(AdresseElement.ADRESSE_ELEMENT, DSL.name("adresse_element_adresse_element_sous_type_fkey"), arrayOf(AdresseElement.ADRESSE_ELEMENT.SOUS_TYPE), remocra.db.jooq.remocra.keys.ADRESSE_SOUS_TYPE_ELEMENT_PKEY, arrayOf(AdresseSousTypeElement.ADRESSE_SOUS_TYPE_ELEMENT.ID), true)
val ADRESSE_SOUS_TYPE_ELEMENT__ADRESSE_SOUS_TYPE_ELEMENT_ADRESSE_SOUS_TYPE_ELEMENT_TYPE_E_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(AdresseSousTypeElement.ADRESSE_SOUS_TYPE_ELEMENT, DSL.name("adresse_sous_type_element_adresse_sous_type_element_type_e_fkey"), arrayOf(AdresseSousTypeElement.ADRESSE_SOUS_TYPE_ELEMENT.TYPE_ELEMENT), remocra.db.jooq.remocra.keys.ADRESSE_TYPE_ELEMENT_PKEY, arrayOf(AdresseTypeElement.ADRESSE_TYPE_ELEMENT.ID), true)
val ANOMALIE__ANOMALIE_ANOMALIE_ANOMALIE_CATEGORIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Anomalie.ANOMALIE, DSL.name("anomalie_anomalie_anomalie_categorie_id_fkey"), arrayOf(Anomalie.ANOMALIE.ANOMALIE_CATEGORIE_ID), remocra.db.jooq.remocra.keys.ANOMALIE_CATEGORIE_PKEY, arrayOf(AnomalieCategorie.ANOMALIE_CATEGORIE.ID), true)
val API__API_API_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Api.API, DSL.name("api_api_organisme_id_fkey"), arrayOf(Api.API.ORGANISME_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val CADASTRE_PARCELLE__CADASTRE_PARCELLE_CADASTRE_PARCELLE_CADASTRE_SECTION_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(CadastreParcelle.CADASTRE_PARCELLE, DSL.name("cadastre_parcelle_cadastre_parcelle_cadastre_section_id_fkey"), arrayOf(CadastreParcelle.CADASTRE_PARCELLE.CADASTRE_SECTION_ID), remocra.db.jooq.remocra.keys.CADASTRE_SECTION_PKEY, arrayOf(CadastreSection.CADASTRE_SECTION.ID), true)
val CADASTRE_SECTION__CADASTRE_SECTION_CADASTRE_SECTION_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(CadastreSection.CADASTRE_SECTION, DSL.name("cadastre_section_cadastre_section_commune_id_fkey"), arrayOf(CadastreSection.CADASTRE_SECTION.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val CONTACT__CONTACT_CONTACT_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_commune_id_fkey"), arrayOf(Contact.CONTACT.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val CONTACT__CONTACT_CONTACT_FONCTION_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_fonction_fkey"), arrayOf(Contact.CONTACT.FONCTION_CONTACT_ID), remocra.db.jooq.remocra.keys.FONCTION_CONTACT_PKEY, arrayOf(FonctionContact.FONCTION_CONTACT.ID), true)
val CONTACT__CONTACT_CONTACT_LIEU_DIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_lieu_dit_id_fkey"), arrayOf(Contact.CONTACT.LIEU_DIT_ID), remocra.db.jooq.remocra.keys.LIEU_DIT_PKEY, arrayOf(LieuDit.LIEU_DIT.ID), true)
val CONTACT__CONTACT_CONTACT_VOIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_voie_id_fkey"), arrayOf(Contact.CONTACT.VOIE_ID), remocra.db.jooq.remocra.keys.VOIE_PKEY, arrayOf(Voie.VOIE.ID), true)
val COUCHE__COUCHE_COUCHE_GROUPE_COUCHE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Couche.COUCHE, DSL.name("couche_couche_groupe_couche_id_fkey"), arrayOf(Couche.COUCHE.GROUPE_COUCHE_ID), remocra.db.jooq.remocra.keys.GROUPE_COUCHE_PKEY, arrayOf(GroupeCouche.GROUPE_COUCHE.ID), true)
val COURRIER__COURRIER_COURRIER_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Courrier.COURRIER, DSL.name("courrier_courrier_document_id_fkey"), arrayOf(Courrier.COURRIER.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val COURRIER__COURRIER_COURRIER_EXPEDITEUR_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Courrier.COURRIER, DSL.name("courrier_courrier_expediteur_fkey"), arrayOf(Courrier.COURRIER.EXPEDITEUR), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val CRISE__CRISE_CRISE_TYPE_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Crise.CRISE, DSL.name("crise_crise_type_crise_id_fkey"), arrayOf(Crise.CRISE.TYPE_CRISE_ID), remocra.db.jooq.remocra.keys.TYPE_CRISE_PKEY, arrayOf(TypeCrise.TYPE_CRISE.ID), true)
val CRISE_INDICATEUR__CRISE_INDICATEUR_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(CriseIndicateur.CRISE_INDICATEUR, DSL.name("crise_indicateur_crise_id_fkey"), arrayOf(CriseIndicateur.CRISE_INDICATEUR.CRISE_ID), remocra.db.jooq.remocra.keys.CRISE_PKEY, arrayOf(Crise.CRISE.ID), true)
val DASHBOARD_COMPONENT__DASHBOARD_COMPONENT_DASHBOARD_COMPONENT_DAHSBOARD_QUERY_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(DashboardComponent.DASHBOARD_COMPONENT, DSL.name("dashboard_component_dashboard_component_dahsboard_query_id_fkey"), arrayOf(DashboardComponent.DASHBOARD_COMPONENT.DAHSBOARD_QUERY_ID), remocra.db.jooq.remocra.keys.DASHBOARD_QUERY_PKEY, arrayOf(DashboardQuery.DASHBOARD_QUERY.ID), true)
val DASHBOARD_CONFIG__DASHBOARD_CONFIG_DASHBOARD_CONFIG_DASHBOARD_COMPONENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(DashboardConfig.DASHBOARD_CONFIG, DSL.name("dashboard_config_dashboard_config_dashboard_component_id_fkey"), arrayOf(DashboardConfig.DASHBOARD_CONFIG.DASHBOARD_COMPONENT_ID), remocra.db.jooq.remocra.keys.DASHBOARD_COMPONENT_PKEY, arrayOf(DashboardComponent.DASHBOARD_COMPONENT.ID), true)
val DASHBOARD_CONFIG__DASHBOARD_CONFIG_DASHBOARD_CONFIG_DASHBOARD_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(DashboardConfig.DASHBOARD_CONFIG, DSL.name("dashboard_config_dashboard_config_dashboard_id_fkey"), arrayOf(DashboardConfig.DASHBOARD_CONFIG.DASHBOARD_ID), remocra.db.jooq.remocra.keys.DASHBOARD_PKEY, arrayOf(Dashboard.DASHBOARD.ID), true)
val DEBIT_SIMULTANE__DEBIT_SIMULTANE_DEBIT_SIMULTANE_SITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(DebitSimultane.DEBIT_SIMULTANE, DSL.name("debit_simultane_debit_simultane_site_id_fkey"), arrayOf(DebitSimultane.DEBIT_SIMULTANE.SITE_ID), remocra.db.jooq.remocra.keys.SITE_PKEY, arrayOf(Site.SITE.ID), true)
val DEBIT_SIMULTANE_MESURE__DEBIT_SIMULTANE_MESURE_DEBIT_SIMULTANE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(DebitSimultaneMesure.DEBIT_SIMULTANE_MESURE, DSL.name("debit_simultane_mesure_debit_simultane_id_fkey"), arrayOf(DebitSimultaneMesure.DEBIT_SIMULTANE_MESURE.DEBIT_SIMULTANE_ID), remocra.db.jooq.remocra.keys.DEBIT_SIMULTANE_PKEY, arrayOf(DebitSimultane.DEBIT_SIMULTANE.ID), true)
val DEBIT_SIMULTANE_MESURE__DEBIT_SIMULTANE_MESURE_DEBIT_SIMULTANE_MESURE_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(DebitSimultaneMesure.DEBIT_SIMULTANE_MESURE, DSL.name("debit_simultane_mesure_debit_simultane_mesure_document_id_fkey"), arrayOf(DebitSimultaneMesure.DEBIT_SIMULTANE_MESURE.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val DOCUMENT_HABILITABLE__DOCUMENT_HABILITABLE_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(DocumentHabilitable.DOCUMENT_HABILITABLE, DSL.name("document_habilitable_document_id_fkey"), arrayOf(DocumentHabilitable.DOCUMENT_HABILITABLE.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val EVENEMENT__EVENEMENT_EVENEMENT_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Evenement.EVENEMENT, DSL.name("evenement_evenement_crise_id_fkey"), arrayOf(Evenement.EVENEMENT.CRISE_ID), remocra.db.jooq.remocra.keys.CRISE_PKEY, arrayOf(Crise.CRISE.ID), true)
val EVENEMENT__EVENEMENT_EVENEMENT_TYPE_CRISE_CATEGORIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Evenement.EVENEMENT, DSL.name("evenement_evenement_type_crise_categorie_id_fkey"), arrayOf(Evenement.EVENEMENT.TYPE_CRISE_CATEGORIE_ID), remocra.db.jooq.remocra.keys.TYPE_CRISE_CATEGORIE_PKEY, arrayOf(TypeCriseCategorie.TYPE_CRISE_CATEGORIE.ID), true)
val EVENEMENT__EVENEMENT_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Evenement.EVENEMENT, DSL.name("evenement_utilisateur_id_fkey"), arrayOf(Evenement.EVENEMENT.UTILISATEUR_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val JOB__JOB_JOB_TASK_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Job.JOB, DSL.name("job_job_task_id_fkey"), arrayOf(Job.JOB.TASK_ID), remocra.db.jooq.remocra.keys.TASK_PKEY, arrayOf(Task.TASK.ID), true)
val JOB__JOB_JOB_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Job.JOB, DSL.name("job_job_utilisateur_id_fkey"), arrayOf(Job.JOB.UTILISATEUR_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val L_ADRESSE_DOCUMENT__L_ADRESSE_DOCUMENT_ADRESSE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LAdresseDocument.L_ADRESSE_DOCUMENT, DSL.name("l_adresse_document_adresse_id_fkey"), arrayOf(LAdresseDocument.L_ADRESSE_DOCUMENT.ADRESSE_ID), remocra.db.jooq.remocra.keys.ADRESSE_PKEY, arrayOf(Adresse.ADRESSE.ID), true)
val L_ADRESSE_DOCUMENT__L_ADRESSE_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LAdresseDocument.L_ADRESSE_DOCUMENT, DSL.name("l_adresse_document_document_id_fkey"), arrayOf(LAdresseDocument.L_ADRESSE_DOCUMENT.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE__L_ADRESSE_ELEMENT_ADRESSE_TYPE_AN_ADRESSE_TYPE_ANOMALIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LAdresseElementAdresseTypeAnomalie.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE, DSL.name("l_adresse_element_adresse_type_an_adresse_type_anomalie_id_fkey"), arrayOf(LAdresseElementAdresseTypeAnomalie.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE.ADRESSE_TYPE_ANOMALIE_ID), remocra.db.jooq.remocra.keys.ADRESSE_TYPE_ANOMALIE_PKEY, arrayOf(AdresseTypeAnomalie.ADRESSE_TYPE_ANOMALIE.ID), true)
val L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE__L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE_ELEMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LAdresseElementAdresseTypeAnomalie.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE, DSL.name("l_adresse_element_adresse_type_anomalie_element_id_fkey"), arrayOf(LAdresseElementAdresseTypeAnomalie.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE.ELEMENT_ID), remocra.db.jooq.remocra.keys.ADRESSE_ELEMENT_PKEY, arrayOf(AdresseElement.ADRESSE_ELEMENT.ID), true)
val L_COMMUNE_CIS__L_COMMUNE_CIS_CIS_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCommuneCis.L_COMMUNE_CIS, DSL.name("l_commune_cis_cis_id_fkey"), arrayOf(LCommuneCis.L_COMMUNE_CIS.CIS_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val L_COMMUNE_CIS__L_COMMUNE_CIS_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCommuneCis.L_COMMUNE_CIS, DSL.name("l_commune_cis_commune_id_fkey"), arrayOf(LCommuneCis.L_COMMUNE_CIS.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_CONTACT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactGestionnaire.L_CONTACT_GESTIONNAIRE, DSL.name("l_contact_gestionnaire_contact_id_fkey"), arrayOf(LContactGestionnaire.L_CONTACT_GESTIONNAIRE.CONTACT_ID), remocra.db.jooq.remocra.keys.CONTACT_PKEY, arrayOf(Contact.CONTACT.ID), true)
val L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_GESTIONNAIRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactGestionnaire.L_CONTACT_GESTIONNAIRE, DSL.name("l_contact_gestionnaire_gestionnaire_id_fkey"), arrayOf(LContactGestionnaire.L_CONTACT_GESTIONNAIRE.GESTIONNAIRE_ID), remocra.db.jooq.remocra.keys.GESTIONNAIRE_PKEY, arrayOf(Gestionnaire.GESTIONNAIRE.ID), true)
val L_CONTACT_GESTIONNAIRE__L_CONTACT_GESTIONNAIRE_SITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactGestionnaire.L_CONTACT_GESTIONNAIRE, DSL.name("l_contact_gestionnaire_site_id_fkey"), arrayOf(LContactGestionnaire.L_CONTACT_GESTIONNAIRE.SITE_ID), remocra.db.jooq.remocra.keys.SITE_PKEY, arrayOf(Site.SITE.ID), true)
val L_CONTACT_ORGANISME__L_CONTACT_ORGANISME_CONTACT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactOrganisme.L_CONTACT_ORGANISME, DSL.name("l_contact_organisme_contact_id_fkey"), arrayOf(LContactOrganisme.L_CONTACT_ORGANISME.CONTACT_ID), remocra.db.jooq.remocra.keys.CONTACT_PKEY, arrayOf(Contact.CONTACT.ID), true)
val L_CONTACT_ORGANISME__L_CONTACT_ORGANISME_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactOrganisme.L_CONTACT_ORGANISME, DSL.name("l_contact_organisme_organisme_id_fkey"), arrayOf(LContactOrganisme.L_CONTACT_ORGANISME.ORGANISME_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val L_CONTACT_ROLE__L_CONTACT_ROLE_CONTACT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactRole.L_CONTACT_ROLE, DSL.name("l_contact_role_contact_id_fkey"), arrayOf(LContactRole.L_CONTACT_ROLE.CONTACT_ID), remocra.db.jooq.remocra.keys.CONTACT_PKEY, arrayOf(Contact.CONTACT.ID), true)
val L_CONTACT_ROLE__L_CONTACT_ROLE_ROLE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactRole.L_CONTACT_ROLE, DSL.name("l_contact_role_role_id_fkey"), arrayOf(LContactRole.L_CONTACT_ROLE.ROLE_ID), remocra.db.jooq.remocra.keys.ROLE_PKEY, arrayOf(RoleContact.ROLE_CONTACT.ID), true)
val L_COUCHE_CRISE__L_COUCHE_CRISE_COUCHE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCoucheCrise.L_COUCHE_CRISE, DSL.name("l_couche_crise_couche_id_fkey"), arrayOf(LCoucheCrise.L_COUCHE_CRISE.COUCHE_ID), remocra.db.jooq.remocra.keys.COUCHE_PKEY, arrayOf(Couche.COUCHE.ID), true)
val L_COUCHE_CRISE__L_COUCHE_CRISE_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCoucheCrise.L_COUCHE_CRISE, DSL.name("l_couche_crise_crise_id_fkey"), arrayOf(LCoucheCrise.L_COUCHE_CRISE.CRISE_ID), remocra.db.jooq.remocra.keys.CRISE_PKEY, arrayOf(Crise.CRISE.ID), true)
val L_COUCHE_DROIT__L_COUCHE_DROIT_COUCHE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCoucheDroit.L_COUCHE_DROIT, DSL.name("l_couche_droit_couche_id_fkey"), arrayOf(LCoucheDroit.L_COUCHE_DROIT.COUCHE_ID), remocra.db.jooq.remocra.keys.COUCHE_PKEY, arrayOf(Couche.COUCHE.ID), true)
val L_COUCHE_DROIT__L_COUCHE_DROIT_PROFIL_DROIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCoucheDroit.L_COUCHE_DROIT, DSL.name("l_couche_droit_profil_droit_id_fkey"), arrayOf(LCoucheDroit.L_COUCHE_DROIT.PROFIL_DROIT_ID), remocra.db.jooq.remocra.keys.PROFIL_DROIT_PKEY, arrayOf(ProfilDroit.PROFIL_DROIT.ID), true)
val L_COUCHE_MODULE__L_COUCHE_MODULE_COUCHE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCoucheModule.L_COUCHE_MODULE, DSL.name("l_couche_module_couche_id_fkey"), arrayOf(LCoucheModule.L_COUCHE_MODULE.COUCHE_ID), remocra.db.jooq.remocra.keys.COUCHE_PKEY, arrayOf(Couche.COUCHE.ID), true)
val L_COURRIER_CONTACT_GESTIONNAIRE__L_COURRIER_CONTACT_GESTIONNAIRE_CONTACT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierContactGestionnaire.L_COURRIER_CONTACT_GESTIONNAIRE, DSL.name("l_courrier_contact_gestionnaire_contact_id_fkey"), arrayOf(LCourrierContactGestionnaire.L_COURRIER_CONTACT_GESTIONNAIRE.CONTACT_ID), remocra.db.jooq.remocra.keys.CONTACT_PKEY, arrayOf(Contact.CONTACT.ID), true)
val L_COURRIER_CONTACT_GESTIONNAIRE__L_COURRIER_CONTACT_GESTIONNAIRE_COURRIER_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierContactGestionnaire.L_COURRIER_CONTACT_GESTIONNAIRE, DSL.name("l_courrier_contact_gestionnaire_courrier_id_fkey"), arrayOf(LCourrierContactGestionnaire.L_COURRIER_CONTACT_GESTIONNAIRE.COURRIER_ID), remocra.db.jooq.remocra.keys.COURRIER_PKEY, arrayOf(Courrier.COURRIER.ID), true)
val L_COURRIER_CONTACT_ORGANISME__L_COURRIER_CONTACT_ORGANISME_CONTACT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierContactOrganisme.L_COURRIER_CONTACT_ORGANISME, DSL.name("l_courrier_contact_organisme_contact_id_fkey"), arrayOf(LCourrierContactOrganisme.L_COURRIER_CONTACT_ORGANISME.CONTACT_ID), remocra.db.jooq.remocra.keys.CONTACT_PKEY, arrayOf(Contact.CONTACT.ID), true)
val L_COURRIER_CONTACT_ORGANISME__L_COURRIER_CONTACT_ORGANISME_COURRIER_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierContactOrganisme.L_COURRIER_CONTACT_ORGANISME, DSL.name("l_courrier_contact_organisme_courrier_id_fkey"), arrayOf(LCourrierContactOrganisme.L_COURRIER_CONTACT_ORGANISME.COURRIER_ID), remocra.db.jooq.remocra.keys.COURRIER_PKEY, arrayOf(Courrier.COURRIER.ID), true)
val L_COURRIER_ORGANISME__L_COURRIER_ORGANISME_COURRIER_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierOrganisme.L_COURRIER_ORGANISME, DSL.name("l_courrier_organisme_courrier_id_fkey"), arrayOf(LCourrierOrganisme.L_COURRIER_ORGANISME.COURRIER_ID), remocra.db.jooq.remocra.keys.COURRIER_PKEY, arrayOf(Courrier.COURRIER.ID), true)
val L_COURRIER_ORGANISME__L_COURRIER_ORGANISME_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierOrganisme.L_COURRIER_ORGANISME, DSL.name("l_courrier_organisme_organisme_id_fkey"), arrayOf(LCourrierOrganisme.L_COURRIER_ORGANISME.ORGANISME_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val L_COURRIER_UTILISATEUR__L_COURRIER_UTILISATEUR_COURRIER_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierUtilisateur.L_COURRIER_UTILISATEUR, DSL.name("l_courrier_utilisateur_courrier_id_fkey"), arrayOf(LCourrierUtilisateur.L_COURRIER_UTILISATEUR.COURRIER_ID), remocra.db.jooq.remocra.keys.COURRIER_PKEY, arrayOf(Courrier.COURRIER.ID), true)
val L_COURRIER_UTILISATEUR__L_COURRIER_UTILISATEUR_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCourrierUtilisateur.L_COURRIER_UTILISATEUR, DSL.name("l_courrier_utilisateur_utilisateur_id_fkey"), arrayOf(LCourrierUtilisateur.L_COURRIER_UTILISATEUR.UTILISATEUR_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val L_CRISE_COMMUNE__L_CRISE_COMMUNE_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCriseCommune.L_CRISE_COMMUNE, DSL.name("l_crise_commune_commune_id_fkey"), arrayOf(LCriseCommune.L_CRISE_COMMUNE.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val L_CRISE_COMMUNE__L_CRISE_COMMUNE_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCriseCommune.L_CRISE_COMMUNE, DSL.name("l_crise_commune_crise_id_fkey"), arrayOf(LCriseCommune.L_CRISE_COMMUNE.CRISE_ID), remocra.db.jooq.remocra.keys.CRISE_PKEY, arrayOf(Crise.CRISE.ID), true)
val L_CRISE_DOCUMENT__L_CRISE_DOCUMENT_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCriseDocument.L_CRISE_DOCUMENT, DSL.name("l_crise_document_crise_id_fkey"), arrayOf(LCriseDocument.L_CRISE_DOCUMENT.CRISE_ID), remocra.db.jooq.remocra.keys.CRISE_PKEY, arrayOf(Crise.CRISE.ID), true)
val L_CRISE_DOCUMENT__L_CRISE_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LCriseDocument.L_CRISE_DOCUMENT, DSL.name("l_crise_document_document_id_fkey"), arrayOf(LCriseDocument.L_CRISE_DOCUMENT.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val L_DASHBOARD_PROFIL__L_DASHBOARD_PROFIL_DASHBOARD_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LDashboardProfil.L_DASHBOARD_PROFIL, DSL.name("l_dashboard_profil_dashboard_id_fkey"), arrayOf(LDashboardProfil.L_DASHBOARD_PROFIL.DASHBOARD_ID), remocra.db.jooq.remocra.keys.DASHBOARD_PKEY, arrayOf(Dashboard.DASHBOARD.ID), true)
val L_DASHBOARD_PROFIL__L_DASHBOARD_PROFIL_PROFIL_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LDashboardProfil.L_DASHBOARD_PROFIL, DSL.name("l_dashboard_profil_profil_utilisateur_id_fkey"), arrayOf(LDashboardProfil.L_DASHBOARD_PROFIL.PROFIL_UTILISATEUR_ID), remocra.db.jooq.remocra.keys.PROFIL_UTILISATEUR_PKEY, arrayOf(ProfilUtilisateur.PROFIL_UTILISATEUR.ID), true)
val L_DEBIT_SIMULTANE_MESURE_PEI__L_DEBIT_SIMULTANE_MESURE_PEI_DEBIT_SIMULTANE_MESURE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LDebitSimultaneMesurePei.L_DEBIT_SIMULTANE_MESURE_PEI, DSL.name("l_debit_simultane_mesure_pei_debit_simultane_mesure_id_fkey"), arrayOf(LDebitSimultaneMesurePei.L_DEBIT_SIMULTANE_MESURE_PEI.DEBIT_SIMULTANE_MESURE_ID), remocra.db.jooq.remocra.keys.DEBIT_SIMULTANE_MESURE_PKEY, arrayOf(DebitSimultaneMesure.DEBIT_SIMULTANE_MESURE.ID), true)
val L_DEBIT_SIMULTANE_MESURE_PEI__L_DEBIT_SIMULTANE_MESURE_PEI_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LDebitSimultaneMesurePei.L_DEBIT_SIMULTANE_MESURE_PEI, DSL.name("l_debit_simultane_mesure_pei_pei_id_fkey"), arrayOf(LDebitSimultaneMesurePei.L_DEBIT_SIMULTANE_MESURE_PEI.PEI_ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val L_DIAMETRE_NATURE__L_DIAMETRE_NATURE_DIAMETRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LDiametreNature.L_DIAMETRE_NATURE, DSL.name("l_diametre_nature_diametre_id_fkey"), arrayOf(LDiametreNature.L_DIAMETRE_NATURE.DIAMETRE_ID), remocra.db.jooq.remocra.keys.DIAMETRE_PKEY, arrayOf(Diametre.DIAMETRE.ID), true)
val L_DIAMETRE_NATURE__L_DIAMETRE_NATURE_NATURE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LDiametreNature.L_DIAMETRE_NATURE, DSL.name("l_diametre_nature_nature_id_fkey"), arrayOf(LDiametreNature.L_DIAMETRE_NATURE.NATURE_ID), remocra.db.jooq.remocra.keys.NATURE_PKEY, arrayOf(Nature.NATURE.ID), true)
val L_EVENEMENT_DOCUMENT__L_EVENEMENT_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LEvenementDocument.L_EVENEMENT_DOCUMENT, DSL.name("l_evenement_document_document_id_fkey"), arrayOf(LEvenementDocument.L_EVENEMENT_DOCUMENT.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val L_EVENEMENT_DOCUMENT__L_EVENEMENT_DOCUMENT_EVENEMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LEvenementDocument.L_EVENEMENT_DOCUMENT, DSL.name("l_evenement_document_evenement_id_fkey"), arrayOf(LEvenementDocument.L_EVENEMENT_DOCUMENT.EVENEMENT_ID), remocra.db.jooq.remocra.keys.EVENEMENT_PKEY, arrayOf(Evenement.EVENEMENT.ID), true)
val L_INDISPONIBILITE_TEMPORAIRE_PEI__L_INDISPONIBILITE_TEMPORAIRE__INDISPONIBILITE_TEMPORAIRE_I_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LIndisponibiliteTemporairePei.L_INDISPONIBILITE_TEMPORAIRE_PEI, DSL.name("l_indisponibilite_temporaire__indisponibilite_temporaire_i_fkey"), arrayOf(LIndisponibiliteTemporairePei.L_INDISPONIBILITE_TEMPORAIRE_PEI.INDISPONIBILITE_TEMPORAIRE_ID), remocra.db.jooq.remocra.keys.INDISPONIBILITE_TEMPORAIRE_PKEY, arrayOf(IndisponibiliteTemporaire.INDISPONIBILITE_TEMPORAIRE.ID), true)
val L_INDISPONIBILITE_TEMPORAIRE_PEI__L_INDISPONIBILITE_TEMPORAIRE_PEI_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LIndisponibiliteTemporairePei.L_INDISPONIBILITE_TEMPORAIRE_PEI, DSL.name("l_indisponibilite_temporaire_pei_pei_id_fkey"), arrayOf(LIndisponibiliteTemporairePei.L_INDISPONIBILITE_TEMPORAIRE_PEI.PEI_ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val L_MODELE_COURRIER_PROFIL_DROIT__L_MODELE_COURRIER_PROFIL_DROIT_MODELE_COURRIER_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LModeleCourrierProfilDroit.L_MODELE_COURRIER_PROFIL_DROIT, DSL.name("l_modele_courrier_profil_droit_modele_courrier_id_fkey"), arrayOf(LModeleCourrierProfilDroit.L_MODELE_COURRIER_PROFIL_DROIT.MODELE_COURRIER_ID), remocra.db.jooq.remocra.keys.MODELE_COURRIER_PKEY, arrayOf(ModeleCourrier.MODELE_COURRIER.ID), true)
val L_MODELE_COURRIER_PROFIL_DROIT__L_MODELE_COURRIER_PROFIL_DROIT_PROFIL_DROIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LModeleCourrierProfilDroit.L_MODELE_COURRIER_PROFIL_DROIT, DSL.name("l_modele_courrier_profil_droit_profil_droit_id_fkey"), arrayOf(LModeleCourrierProfilDroit.L_MODELE_COURRIER_PROFIL_DROIT.PROFIL_DROIT_ID), remocra.db.jooq.remocra.keys.PROFIL_DROIT_PKEY, arrayOf(ProfilDroit.PROFIL_DROIT.ID), true)
val L_PEI_ANOMALIE__L_PEI_ANOMALIE_ANOMALIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPeiAnomalie.L_PEI_ANOMALIE, DSL.name("l_pei_anomalie_anomalie_id_fkey"), arrayOf(LPeiAnomalie.L_PEI_ANOMALIE.ANOMALIE_ID), remocra.db.jooq.remocra.keys.ANOMALIE_PKEY, arrayOf(Anomalie.ANOMALIE.ID), true)
val L_PEI_ANOMALIE__L_PEI_ANOMALIE_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPeiAnomalie.L_PEI_ANOMALIE, DSL.name("l_pei_anomalie_pei_id_fkey"), arrayOf(LPeiAnomalie.L_PEI_ANOMALIE.PEI_ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val L_PEI_DOCUMENT__L_PEI_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPeiDocument.L_PEI_DOCUMENT, DSL.name("l_pei_document_document_id_fkey"), arrayOf(LPeiDocument.L_PEI_DOCUMENT.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val L_PEI_DOCUMENT__L_PEI_DOCUMENT_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPeiDocument.L_PEI_DOCUMENT, DSL.name("l_pei_document_pei_id_fkey"), arrayOf(LPeiDocument.L_PEI_DOCUMENT.PEI_ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_PENA_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPenaTypeEngin.L_PENA_TYPE_ENGIN, DSL.name("l_pena_type_engin_pena_id_fkey"), arrayOf(LPenaTypeEngin.L_PENA_TYPE_ENGIN.PENA_ID), remocra.db.jooq.remocra.keys.PENA_PKEY, arrayOf(Pena.PENA.ID), true)
val L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_TYPE_ENGIN_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPenaTypeEngin.L_PENA_TYPE_ENGIN, DSL.name("l_pena_type_engin_type_engin_id_fkey"), arrayOf(LPenaTypeEngin.L_PENA_TYPE_ENGIN.TYPE_ENGIN_ID), remocra.db.jooq.remocra.keys.TYPE_ENGIN_PKEY, arrayOf(TypeEngin.TYPE_ENGIN.ID), true)
val L_PERMIS_CADASTRE_PARCELLE__L_PERMIS_CADASTRE_PARCELLE_CADASTRE_PARCELLE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPermisCadastreParcelle.L_PERMIS_CADASTRE_PARCELLE, DSL.name("l_permis_cadastre_parcelle_cadastre_parcelle_id_fkey"), arrayOf(LPermisCadastreParcelle.L_PERMIS_CADASTRE_PARCELLE.CADASTRE_PARCELLE_ID), remocra.db.jooq.remocra.keys.CADASTRE_PARCELLE_PKEY, arrayOf(CadastreParcelle.CADASTRE_PARCELLE.ID), true)
val L_PERMIS_CADASTRE_PARCELLE__L_PERMIS_CADASTRE_PARCELLE_PERMIS_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPermisCadastreParcelle.L_PERMIS_CADASTRE_PARCELLE, DSL.name("l_permis_cadastre_parcelle_permis_id_fkey"), arrayOf(LPermisCadastreParcelle.L_PERMIS_CADASTRE_PARCELLE.PERMIS_ID), remocra.db.jooq.remocra.keys.PERMIS_PKEY, arrayOf(Permis.PERMIS.ID), true)
val L_PERMIS_DOCUMENT__L_PERMIS_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPermisDocument.L_PERMIS_DOCUMENT, DSL.name("l_permis_document_document_id_fkey"), arrayOf(LPermisDocument.L_PERMIS_DOCUMENT.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val L_PERMIS_DOCUMENT__L_PERMIS_DOCUMENT_PERMIS_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LPermisDocument.L_PERMIS_DOCUMENT, DSL.name("l_permis_document_permis_id_fkey"), arrayOf(LPermisDocument.L_PERMIS_DOCUMENT.PERMIS_ID), remocra.db.jooq.remocra.keys.PERMIS_PKEY, arrayOf(Permis.PERMIS.ID), true)
val L_PROFIL_DROIT_DOCUMENT_HABILITABLE__L_PROFIL_DROIT_DOCUMENT_HABILITABL_DOCUMENT_HABILITABLE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LProfilDroitDocumentHabilitable.L_PROFIL_DROIT_DOCUMENT_HABILITABLE, DSL.name("l_profil_droit_document_habilitabl_document_habilitable_id_fkey"), arrayOf(LProfilDroitDocumentHabilitable.L_PROFIL_DROIT_DOCUMENT_HABILITABLE.DOCUMENT_HABILITABLE_ID), remocra.db.jooq.remocra.keys.DOCUMENT_HABILITABLE_PKEY, arrayOf(DocumentHabilitable.DOCUMENT_HABILITABLE.ID), true)
val L_PROFIL_DROIT_DOCUMENT_HABILITABLE__L_PROFIL_DROIT_DOCUMENT_HABILITABLE_PROFIL_DROIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LProfilDroitDocumentHabilitable.L_PROFIL_DROIT_DOCUMENT_HABILITABLE, DSL.name("l_profil_droit_document_habilitable_profil_droit_id_fkey"), arrayOf(LProfilDroitDocumentHabilitable.L_PROFIL_DROIT_DOCUMENT_HABILITABLE.PROFIL_DROIT_ID), remocra.db.jooq.remocra.keys.PROFIL_DROIT_PKEY, arrayOf(ProfilDroit.PROFIL_DROIT.ID), true)
val L_PROFIL_UTILISATEUR_ORGANISME_DROIT__L_PROFIL_UTILISATEUR_ORGANISME_DROIT_PROFIL_DROIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT, DSL.name("l_profil_utilisateur_organisme_droit_profil_droit_id_fkey"), arrayOf(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT.PROFIL_DROIT_ID), remocra.db.jooq.remocra.keys.PROFIL_DROIT_PKEY, arrayOf(ProfilDroit.PROFIL_DROIT.ID), true)
val L_PROFIL_UTILISATEUR_ORGANISME_DROIT__L_PROFIL_UTILISATEUR_ORGANISME_DROIT_PROFIL_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT, DSL.name("l_profil_utilisateur_organisme_droit_profil_organisme_id_fkey"), arrayOf(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT.PROFIL_ORGANISME_ID), remocra.db.jooq.remocra.keys.PROFIL_ORGANISME_PKEY, arrayOf(ProfilOrganisme.PROFIL_ORGANISME.ID), true)
val L_PROFIL_UTILISATEUR_ORGANISME_DROIT__L_PROFIL_UTILISATEUR_ORGANISME_DROIT_PROFIL_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT, DSL.name("l_profil_utilisateur_organisme_droit_profil_utilisateur_id_fkey"), arrayOf(LProfilUtilisateurOrganismeDroit.L_PROFIL_UTILISATEUR_ORGANISME_DROIT.PROFIL_UTILISATEUR_ID), remocra.db.jooq.remocra.keys.PROFIL_UTILISATEUR_PKEY, arrayOf(ProfilUtilisateur.PROFIL_UTILISATEUR.ID), true)
val L_RAPPORT_PERSONNALISE_PROFIL_DROIT__L_RAPPORT_PERSONNALISE_PROFIL_DROI_RAPPORT_PERSONNALISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LRapportPersonnaliseProfilDroit.L_RAPPORT_PERSONNALISE_PROFIL_DROIT, DSL.name("l_rapport_personnalise_profil_droi_rapport_personnalise_id_fkey"), arrayOf(LRapportPersonnaliseProfilDroit.L_RAPPORT_PERSONNALISE_PROFIL_DROIT.RAPPORT_PERSONNALISE_ID), remocra.db.jooq.remocra.keys.RAPPORT_PERSONNALISE_PKEY, arrayOf(RapportPersonnalise.RAPPORT_PERSONNALISE.ID), true)
val L_RAPPORT_PERSONNALISE_PROFIL_DROIT__L_RAPPORT_PERSONNALISE_PROFIL_DROIT_PROFIL_DROIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LRapportPersonnaliseProfilDroit.L_RAPPORT_PERSONNALISE_PROFIL_DROIT, DSL.name("l_rapport_personnalise_profil_droit_profil_droit_id_fkey"), arrayOf(LRapportPersonnaliseProfilDroit.L_RAPPORT_PERSONNALISE_PROFIL_DROIT.PROFIL_DROIT_ID), remocra.db.jooq.remocra.keys.PROFIL_DROIT_PKEY, arrayOf(ProfilDroit.PROFIL_DROIT.ID), true)
val L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_COURRIER_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LThematiqueCourrier.L_THEMATIQUE_COURRIER, DSL.name("l_thematique_courrier_courrier_id_fkey"), arrayOf(LThematiqueCourrier.L_THEMATIQUE_COURRIER.COURRIER_ID), remocra.db.jooq.remocra.keys.COURRIER_PKEY, arrayOf(Courrier.COURRIER.ID), true)
val L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_THEMATIQUE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LThematiqueCourrier.L_THEMATIQUE_COURRIER, DSL.name("l_thematique_courrier_thematique_id_fkey"), arrayOf(LThematiqueCourrier.L_THEMATIQUE_COURRIER.THEMATIQUE_ID), remocra.db.jooq.remocra.keys.THEMATIQUE_PKEY, arrayOf(Thematique.THEMATIQUE.ID), true)
val L_THEMATIQUE_DOCUMENT_HABILITABLE__L_THEMATIQUE_DOCUMENT_HABILITABLE_DOCUMENT_HABILITABLE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LThematiqueDocumentHabilitable.L_THEMATIQUE_DOCUMENT_HABILITABLE, DSL.name("l_thematique_document_habilitable_document_habilitable_id_fkey"), arrayOf(LThematiqueDocumentHabilitable.L_THEMATIQUE_DOCUMENT_HABILITABLE.DOCUMENT_HABILITABLE_ID), remocra.db.jooq.remocra.keys.DOCUMENT_HABILITABLE_PKEY, arrayOf(DocumentHabilitable.DOCUMENT_HABILITABLE.ID), true)
val L_THEMATIQUE_DOCUMENT_HABILITABLE__L_THEMATIQUE_DOCUMENT_HABILITABLE_THEMATIQUE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LThematiqueDocumentHabilitable.L_THEMATIQUE_DOCUMENT_HABILITABLE, DSL.name("l_thematique_document_habilitable_thematique_id_fkey"), arrayOf(LThematiqueDocumentHabilitable.L_THEMATIQUE_DOCUMENT_HABILITABLE.THEMATIQUE_ID), remocra.db.jooq.remocra.keys.THEMATIQUE_PKEY, arrayOf(Thematique.THEMATIQUE.ID), true)
val L_THEMATIQUE_MODULE__L_THEMATIQUE_MODULE_MODULE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LThematiqueModule.L_THEMATIQUE_MODULE, DSL.name("l_thematique_module_module_id_fkey"), arrayOf(LThematiqueModule.L_THEMATIQUE_MODULE.MODULE_ID), remocra.db.jooq.remocra.keys.MODULE_PKEY, arrayOf(Module.MODULE.ID), true)
val L_THEMATIQUE_MODULE__L_THEMATIQUE_MODULE_THEMATIQUE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LThematiqueModule.L_THEMATIQUE_MODULE, DSL.name("l_thematique_module_thematique_id_fkey"), arrayOf(LThematiqueModule.L_THEMATIQUE_MODULE.THEMATIQUE_ID), remocra.db.jooq.remocra.keys.THEMATIQUE_PKEY, arrayOf(Thematique.THEMATIQUE.ID), true)
val L_TOPONYMIE_CRISE__L_TOPONYMIE_CRISE_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LToponymieCrise.L_TOPONYMIE_CRISE, DSL.name("l_toponymie_crise_crise_id_fkey"), arrayOf(LToponymieCrise.L_TOPONYMIE_CRISE.CRISE_ID), remocra.db.jooq.remocra.keys.CRISE_PKEY, arrayOf(Crise.CRISE.ID), true)
val L_TOPONYMIE_CRISE__L_TOPONYMIE_CRISE_TYPE_TOPONYMIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LToponymieCrise.L_TOPONYMIE_CRISE, DSL.name("l_toponymie_crise_type_toponymie_id_fkey"), arrayOf(LToponymieCrise.L_TOPONYMIE_CRISE.TYPE_TOPONYMIE_ID), remocra.db.jooq.remocra.keys.TYPE_TOPONYMIE_PKEY, arrayOf(TypeToponymie.TYPE_TOPONYMIE.ID), true)
val L_TOURNEE_PEI__L_TOURNEE_PEI_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LTourneePei.L_TOURNEE_PEI, DSL.name("l_tournee_pei_pei_id_fkey"), arrayOf(LTourneePei.L_TOURNEE_PEI.PEI_ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val L_TOURNEE_PEI__L_TOURNEE_PEI_TOURNEE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LTourneePei.L_TOURNEE_PEI, DSL.name("l_tournee_pei_tournee_id_fkey"), arrayOf(LTourneePei.L_TOURNEE_PEI.TOURNEE_ID), remocra.db.jooq.remocra.keys.TOURNEE_PKEY, arrayOf(Tournee.TOURNEE.ID), true)
val L_TYPE_CRISE_CATEGORIE__L_TYPE_CRISE_CATEGORIE_CRISE_CATEGORIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LTypeCriseCategorie.L_TYPE_CRISE_CATEGORIE, DSL.name("l_type_crise_categorie_crise_categorie_id_fkey"), arrayOf(LTypeCriseCategorie.L_TYPE_CRISE_CATEGORIE.CRISE_CATEGORIE_ID), remocra.db.jooq.remocra.keys.CRISE_CATEGORIE_PKEY, arrayOf(CriseCategorie.CRISE_CATEGORIE.ID), true)
val L_TYPE_CRISE_CATEGORIE__L_TYPE_CRISE_CATEGORIE_TYPE_CRISE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LTypeCriseCategorie.L_TYPE_CRISE_CATEGORIE, DSL.name("l_type_crise_categorie_type_crise_id_fkey"), arrayOf(LTypeCriseCategorie.L_TYPE_CRISE_CATEGORIE.TYPE_CRISE_ID), remocra.db.jooq.remocra.keys.TYPE_CRISE_PKEY, arrayOf(TypeCrise.TYPE_CRISE.ID), true)
val L_VISITE_ANOMALIE__L_VISITE_ANOMALIE_ANOMALIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LVisiteAnomalie.L_VISITE_ANOMALIE, DSL.name("l_visite_anomalie_anomalie_id_fkey"), arrayOf(LVisiteAnomalie.L_VISITE_ANOMALIE.ANOMALIE_ID), remocra.db.jooq.remocra.keys.ANOMALIE_PKEY, arrayOf(Anomalie.ANOMALIE.ID), true)
val L_VISITE_ANOMALIE__L_VISITE_ANOMALIE_VISITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LVisiteAnomalie.L_VISITE_ANOMALIE, DSL.name("l_visite_anomalie_visite_id_fkey"), arrayOf(LVisiteAnomalie.L_VISITE_ANOMALIE.VISITE_ID), remocra.db.jooq.remocra.keys.VISITE_PKEY, arrayOf(Visite.VISITE.ID), true)
val LIEU_DIT__LIEU_DIT_LIEU_DIT_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LieuDit.LIEU_DIT, DSL.name("lieu_dit_lieu_dit_commune_id_fkey"), arrayOf(LieuDit.LIEU_DIT.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val LOG_LINE__LOG_LINE_LOG_LINE_JOB_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LogLine.LOG_LINE, DSL.name("log_line_log_line_job_id_fkey"), arrayOf(LogLine.LOG_LINE.JOB_ID), remocra.db.jooq.remocra.keys.JOB_PKEY, arrayOf(Job.JOB.ID), true)
val MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_EVENEMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(MessageEvenement.MESSAGE_EVENEMENT, DSL.name("message_evenement_evenement_id_fkey"), arrayOf(MessageEvenement.MESSAGE_EVENEMENT.EVENEMENT_ID), remocra.db.jooq.remocra.keys.EVENEMENT_PKEY, arrayOf(Evenement.EVENEMENT.ID), true)
val MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(MessageEvenement.MESSAGE_EVENEMENT, DSL.name("message_evenement_utilisateur_id_fkey"), arrayOf(MessageEvenement.MESSAGE_EVENEMENT.UTILISATEUR_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val MODELE_COURRIER__MODELE_COURRIER_MODELE_COURRIER_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(ModeleCourrier.MODELE_COURRIER, DSL.name("modele_courrier_modele_courrier_document_id_fkey"), arrayOf(ModeleCourrier.MODELE_COURRIER.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val MODELE_COURRIER_PARAMETRE__MODELE_COURRIER_PARAMETRE_MODELE_COURRIER_PARAMETRE_MODELE_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(ModeleCourrierParametre.MODELE_COURRIER_PARAMETRE, DSL.name("modele_courrier_parametre_modele_courrier_parametre_modele_fkey"), arrayOf(ModeleCourrierParametre.MODELE_COURRIER_PARAMETRE.MODELE_COURRIER_ID), remocra.db.jooq.remocra.keys.MODELE_COURRIER_PKEY, arrayOf(ModeleCourrier.MODELE_COURRIER.ID), true)
val MODELE_PIBI__MODELE_PIBI_MODELE_PIBI_MARQUE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(ModelePibi.MODELE_PIBI, DSL.name("modele_pibi_modele_pibi_marque_id_fkey"), arrayOf(ModelePibi.MODELE_PIBI.MARQUE_ID), remocra.db.jooq.remocra.keys.MARQUE_PIBI_PKEY, arrayOf(MarquePibi.MARQUE_PIBI.ID), true)
val OLDEB__OLDEB_OLDEB_CADASTRE_PARCELLE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Oldeb.OLDEB, DSL.name("oldeb_oldeb_cadastre_parcelle_id_fkey"), arrayOf(Oldeb.OLDEB.CADASTRE_PARCELLE_ID), remocra.db.jooq.remocra.keys.CADASTRE_PARCELLE_PKEY, arrayOf(CadastreParcelle.CADASTRE_PARCELLE.ID), true)
val OLDEB__OLDEB_OLDEB_CADASTRE_SECTION_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Oldeb.OLDEB, DSL.name("oldeb_oldeb_cadastre_section_id_fkey"), arrayOf(Oldeb.OLDEB.CADASTRE_SECTION_ID), remocra.db.jooq.remocra.keys.CADASTRE_SECTION_PKEY, arrayOf(CadastreSection.CADASTRE_SECTION.ID), true)
val OLDEB__OLDEB_OLDEB_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Oldeb.OLDEB, DSL.name("oldeb_oldeb_commune_id_fkey"), arrayOf(Oldeb.OLDEB.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val OLDEB__OLDEB_OLDEB_LIEU_DIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Oldeb.OLDEB, DSL.name("oldeb_oldeb_lieu_dit_id_fkey"), arrayOf(Oldeb.OLDEB.LIEU_DIT_ID), remocra.db.jooq.remocra.keys.LIEU_DIT_PKEY, arrayOf(LieuDit.LIEU_DIT.ID), true)
val OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ACCES_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Oldeb.OLDEB, DSL.name("oldeb_oldeb_oldeb_type_acces_id_fkey"), arrayOf(Oldeb.OLDEB.OLDEB_TYPE_ACCES_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_ACCES_PKEY, arrayOf(OldebTypeAcces.OLDEB_TYPE_ACCES.ID), true)
val OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ZONE_URBANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Oldeb.OLDEB, DSL.name("oldeb_oldeb_oldeb_type_zone_urbanisme_id_fkey"), arrayOf(Oldeb.OLDEB.OLDEB_TYPE_ZONE_URBANISME_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_ZONE_URBANISME_PKEY, arrayOf(OldebTypeZoneUrbanisme.OLDEB_TYPE_ZONE_URBANISME.ID), true)
val OLDEB__OLDEB_OLDEB_VOIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Oldeb.OLDEB, DSL.name("oldeb_oldeb_voie_id_fkey"), arrayOf(Oldeb.OLDEB.VOIE_ID), remocra.db.jooq.remocra.keys.VOIE_PKEY, arrayOf(Voie.VOIE.ID), true)
val OLDEB_CARACTERISTIQUE__OLDEB_CARACTERISTIQUE_OLDEB_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebCaracteristique.OLDEB_CARACTERISTIQUE, DSL.name("oldeb_caracteristique_oldeb_id_fkey"), arrayOf(OldebCaracteristique.OLDEB_CARACTERISTIQUE.OLDEB_ID), remocra.db.jooq.remocra.keys.OLDEB_PKEY, arrayOf(Oldeb.OLDEB.ID), true)
val OLDEB_CARACTERISTIQUE__OLDEB_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebCaracteristique.OLDEB_CARACTERISTIQUE, DSL.name("oldeb_caracteristique_oldeb_type_caracteristique_id_fkey"), arrayOf(OldebCaracteristique.OLDEB_CARACTERISTIQUE.OLDEB_TYPE_CARACTERISTIQUE_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_CARACTERISTIQUE_PKEY, arrayOf(OldebTypeCaracteristique.OLDEB_TYPE_CARACTERISTIQUE.ID), true)
val OLDEB_LOCATAIRE__OLDEB_LOCATAIRE_OLDEB_LOCATAIRE_OLDEB_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebLocataire.OLDEB_LOCATAIRE, DSL.name("oldeb_locataire_oldeb_locataire_oldeb_id_fkey"), arrayOf(OldebLocataire.OLDEB_LOCATAIRE.OLDEB_ID), remocra.db.jooq.remocra.keys.OLDEB_PKEY, arrayOf(Oldeb.OLDEB.ID), true)
val OLDEB_PROPRIETE__OLDEB_PROPRIETE_OLDEB_PROPRIETE_OLDEB_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebPropriete.OLDEB_PROPRIETE, DSL.name("oldeb_propriete_oldeb_propriete_oldeb_id_fkey"), arrayOf(OldebPropriete.OLDEB_PROPRIETE.OLDEB_ID), remocra.db.jooq.remocra.keys.OLDEB_PKEY, arrayOf(Oldeb.OLDEB.ID), true)
val OLDEB_PROPRIETE__OLDEB_PROPRIETE_OLDEB_PROPRIETE_OLDEB_PROPRIETAIRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebPropriete.OLDEB_PROPRIETE, DSL.name("oldeb_propriete_oldeb_propriete_oldeb_proprietaire_id_fkey"), arrayOf(OldebPropriete.OLDEB_PROPRIETE.OLDEB_PROPRIETAIRE_ID), remocra.db.jooq.remocra.keys.OLDEB_PROPRIETAIRE_PKEY, arrayOf(OldebProprietaire.OLDEB_PROPRIETAIRE.ID), true)
val OLDEB_PROPRIETE__OLDEB_PROPRIETE_OLDEB_PROPRIETE_OLDEB_TYPE_RESIDENCE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebPropriete.OLDEB_PROPRIETE, DSL.name("oldeb_propriete_oldeb_propriete_oldeb_type_residence_id_fkey"), arrayOf(OldebPropriete.OLDEB_PROPRIETE.OLDEB_TYPE_RESIDENCE_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_RESIDENCE_PKEY, arrayOf(OldebTypeResidence.OLDEB_TYPE_RESIDENCE.ID), true)
val OLDEB_TYPE_ANOMALIE__OLDEB_TYPE_ANOMALIE_OLDEB_TYPE_ANOMALIE_OLDEB_TYPE_CATEGOR_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebTypeAnomalie.OLDEB_TYPE_ANOMALIE, DSL.name("oldeb_type_anomalie_oldeb_type_anomalie_oldeb_type_categor_fkey"), arrayOf(OldebTypeAnomalie.OLDEB_TYPE_ANOMALIE.OLDEB_TYPE_CATEGORIE_ANOMALIE_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_CATEGORIE_ANOMALIE_PKEY, arrayOf(OldebTypeCategorieAnomalie.OLDEB_TYPE_CATEGORIE_ANOMALIE.ID), true)
val OLDEB_TYPE_CARACTERISTIQUE__OLDEB_TYPE_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_OLDE_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebTypeCaracteristique.OLDEB_TYPE_CARACTERISTIQUE, DSL.name("oldeb_type_caracteristique_oldeb_type_caracteristique_olde_fkey"), arrayOf(OldebTypeCaracteristique.OLDEB_TYPE_CARACTERISTIQUE.OLDEB_TYPE_CATEGORIE_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_CATEGORIE_CARACTERISTIQUE_PKEY, arrayOf(OldebTypeCategorieCaracteristique.OLDEB_TYPE_CATEGORIE_CARACTERISTIQUE.ID), true)
val OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_ACCES_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisite.OLDEB_VISITE, DSL.name("oldeb_visite_oldeb_visite_debroussaillement_acces_id_fkey"), arrayOf(OldebVisite.OLDEB_VISITE.DEBROUSSAILLEMENT_ACCES_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_DEBROUSSAILLEMENT_PKEY, arrayOf(OldebTypeDebroussaillement.OLDEB_TYPE_DEBROUSSAILLEMENT.ID), true)
val OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_DEBROUSSAILLEMENT_PARCELLE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisite.OLDEB_VISITE, DSL.name("oldeb_visite_oldeb_visite_debroussaillement_parcelle_id_fkey"), arrayOf(OldebVisite.OLDEB_VISITE.DEBROUSSAILLEMENT_PARCELLE_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_DEBROUSSAILLEMENT_PKEY, arrayOf(OldebTypeDebroussaillement.OLDEB_TYPE_DEBROUSSAILLEMENT.ID), true)
val OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisite.OLDEB_VISITE, DSL.name("oldeb_visite_oldeb_visite_oldeb_id_fkey"), arrayOf(OldebVisite.OLDEB_VISITE.OLDEB_ID), remocra.db.jooq.remocra.keys.OLDEB_PKEY, arrayOf(Oldeb.OLDEB.ID), true)
val OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_ACTION_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisite.OLDEB_VISITE, DSL.name("oldeb_visite_oldeb_visite_oldeb_type_action_id_fkey"), arrayOf(OldebVisite.OLDEB_VISITE.OLDEB_TYPE_ACTION_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_ACTION_PKEY, arrayOf(OldebTypeAction.OLDEB_TYPE_ACTION.ID), true)
val OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_TYPE_AVIS_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisite.OLDEB_VISITE, DSL.name("oldeb_visite_oldeb_visite_oldeb_type_avis_id_fkey"), arrayOf(OldebVisite.OLDEB_VISITE.OLDEB_TYPE_AVIS_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_AVIS_PKEY, arrayOf(OldebTypeAvis.OLDEB_TYPE_AVIS.ID), true)
val OLDEB_VISITE_ANOMALIE__OLDEB_VISITE_ANOMALIE_OLDEB_TYPE_ANOMALIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisiteAnomalie.OLDEB_VISITE_ANOMALIE, DSL.name("oldeb_visite_anomalie_oldeb_type_anomalie_id_fkey"), arrayOf(OldebVisiteAnomalie.OLDEB_VISITE_ANOMALIE.OLDEB_TYPE_ANOMALIE_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_ANOMALIE_PKEY, arrayOf(OldebTypeAnomalie.OLDEB_TYPE_ANOMALIE.ID), true)
val OLDEB_VISITE_ANOMALIE__OLDEB_VISITE_ANOMALIE_OLDEB_VISITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisiteAnomalie.OLDEB_VISITE_ANOMALIE, DSL.name("oldeb_visite_anomalie_oldeb_visite_id_fkey"), arrayOf(OldebVisiteAnomalie.OLDEB_VISITE_ANOMALIE.OLDEB_VISITE_ID), remocra.db.jooq.remocra.keys.OLDEB_VISITE_PKEY, arrayOf(OldebVisite.OLDEB_VISITE.ID), true)
val OLDEB_VISITE_DOCUMENT__OLDEB_VISITE_DOCUMENT_OLDEB_VISITE_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisiteDocument.OLDEB_VISITE_DOCUMENT, DSL.name("oldeb_visite_document_oldeb_visite_document_document_id_fkey"), arrayOf(OldebVisiteDocument.OLDEB_VISITE_DOCUMENT.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val OLDEB_VISITE_DOCUMENT__OLDEB_VISITE_DOCUMENT_OLDEB_VISITE_DOCUMENT_OLDEB_VISITE_I_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisiteDocument.OLDEB_VISITE_DOCUMENT, DSL.name("oldeb_visite_document_oldeb_visite_document_oldeb_visite_i_fkey"), arrayOf(OldebVisiteDocument.OLDEB_VISITE_DOCUMENT.OLDEB_VISITE_ID), remocra.db.jooq.remocra.keys.OLDEB_VISITE_PKEY, arrayOf(OldebVisite.OLDEB_VISITE.ID), true)
val OLDEB_VISITE_SUITE__OLDEB_VISITE_SUITE_OLDEB_VISITE_SUITE_OLDEB_TYPE_SUITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisiteSuite.OLDEB_VISITE_SUITE, DSL.name("oldeb_visite_suite_oldeb_visite_suite_oldeb_type_suite_id_fkey"), arrayOf(OldebVisiteSuite.OLDEB_VISITE_SUITE.OLDEB_TYPE_SUITE_ID), remocra.db.jooq.remocra.keys.OLDEB_TYPE_SUITE_PKEY, arrayOf(OldebTypeSuite.OLDEB_TYPE_SUITE.ID), true)
val OLDEB_VISITE_SUITE__OLDEB_VISITE_SUITE_OLDEB_VISITE_SUITE_OLDEB_VISITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(OldebVisiteSuite.OLDEB_VISITE_SUITE, DSL.name("oldeb_visite_suite_oldeb_visite_suite_oldeb_visite_id_fkey"), arrayOf(OldebVisiteSuite.OLDEB_VISITE_SUITE.OLDEB_VISITE_ID), remocra.db.jooq.remocra.keys.OLDEB_VISITE_PKEY, arrayOf(OldebVisite.OLDEB_VISITE.ID), true)
val ORGANISME__ORGANISME_ORGANISME_PARENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Organisme.ORGANISME, DSL.name("organisme_organisme_parent_id_fkey"), arrayOf(Organisme.ORGANISME.PARENT_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val ORGANISME__ORGANISME_ORGANISME_PROFIL_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Organisme.ORGANISME, DSL.name("organisme_organisme_profil_organisme_id_fkey"), arrayOf(Organisme.ORGANISME.PROFIL_ORGANISME_ID), remocra.db.jooq.remocra.keys.PROFIL_ORGANISME_PKEY, arrayOf(ProfilOrganisme.PROFIL_ORGANISME.ID), true)
val ORGANISME__ORGANISME_ORGANISME_TYPE_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Organisme.ORGANISME, DSL.name("organisme_organisme_type_organisme_id_fkey"), arrayOf(Organisme.ORGANISME.TYPE_ORGANISME_ID), remocra.db.jooq.remocra.keys.TYPE_ORGANISME_PKEY, arrayOf(TypeOrganisme.TYPE_ORGANISME.ID), true)
val ORGANISME__ORGANISME_ORGANISME_ZONE_INTEGRATION_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Organisme.ORGANISME, DSL.name("organisme_organisme_zone_integration_id_fkey"), arrayOf(Organisme.ORGANISME.ZONE_INTEGRATION_ID), remocra.db.jooq.remocra.keys.ZONE_INTEGRATION_PKEY, arrayOf(ZoneIntegration.ZONE_INTEGRATION.ID), true)
val PEI__PEI_PEI_AUTORITE_DECI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_autorite_deci_id_fkey"), arrayOf(Pei.PEI.AUTORITE_DECI_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val PEI__PEI_PEI_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_commune_id_fkey"), arrayOf(Pei.PEI.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val PEI__PEI_PEI_CROISEMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_croisement_id_fkey"), arrayOf(Pei.PEI.CROISEMENT_ID), remocra.db.jooq.remocra.keys.VOIE_PKEY, arrayOf(Voie.VOIE.ID), true)
val PEI__PEI_PEI_DOMAINE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_domaine_id_fkey"), arrayOf(Pei.PEI.DOMAINE_ID), remocra.db.jooq.remocra.keys.DOMAINE_PKEY, arrayOf(Domaine.DOMAINE.ID), true)
val PEI__PEI_PEI_GESTIONNAIRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_gestionnaire_id_fkey"), arrayOf(Pei.PEI.GESTIONNAIRE_ID), remocra.db.jooq.remocra.keys.GESTIONNAIRE_PKEY, arrayOf(Gestionnaire.GESTIONNAIRE.ID), true)
val PEI__PEI_PEI_LIEU_DIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_lieu_dit_id_fkey"), arrayOf(Pei.PEI.LIEU_DIT_ID), remocra.db.jooq.remocra.keys.LIEU_DIT_PKEY, arrayOf(LieuDit.LIEU_DIT.ID), true)
val PEI__PEI_PEI_MAINTENANCE_DECI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_maintenance_deci_id_fkey"), arrayOf(Pei.PEI.MAINTENANCE_DECI_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val PEI__PEI_PEI_NATURE_DECI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_nature_deci_id_fkey"), arrayOf(Pei.PEI.NATURE_DECI_ID), remocra.db.jooq.remocra.keys.NATURE_DECI_PKEY, arrayOf(NatureDeci.NATURE_DECI.ID), true)
val PEI__PEI_PEI_NATURE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_nature_id_fkey"), arrayOf(Pei.PEI.NATURE_ID), remocra.db.jooq.remocra.keys.NATURE_PKEY, arrayOf(Nature.NATURE.ID), true)
val PEI__PEI_PEI_NIVEAU_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_niveau_id_fkey"), arrayOf(Pei.PEI.NIVEAU_ID), remocra.db.jooq.remocra.keys.NIVEAU_PKEY, arrayOf(Niveau.NIVEAU.ID), true)
val PEI__PEI_PEI_SERVICE_PUBLIC_DECI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_service_public_deci_id_fkey"), arrayOf(Pei.PEI.SERVICE_PUBLIC_DECI_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val PEI__PEI_PEI_SITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_site_id_fkey"), arrayOf(Pei.PEI.SITE_ID), remocra.db.jooq.remocra.keys.SITE_PKEY, arrayOf(Site.SITE.ID), true)
val PEI__PEI_PEI_VOIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_voie_id_fkey"), arrayOf(Pei.PEI.VOIE_ID), remocra.db.jooq.remocra.keys.VOIE_PKEY, arrayOf(Voie.VOIE.ID), true)
val PEI__PEI_PEI_ZONE_SPECIALE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pei.PEI, DSL.name("pei_pei_zone_speciale_id_fkey"), arrayOf(Pei.PEI.ZONE_SPECIALE_ID), remocra.db.jooq.remocra.keys.ZONE_INTEGRATION_PKEY, arrayOf(ZoneIntegration.ZONE_INTEGRATION.ID), true)
val PEI_PRESCRIT__PEI_PRESCRIT_PEI_PRESCRIT_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PeiPrescrit.PEI_PRESCRIT, DSL.name("pei_prescrit_pei_prescrit_organisme_id_fkey"), arrayOf(PeiPrescrit.PEI_PRESCRIT.ORGANISME_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val PENA__PENA_PENA_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pena.PENA, DSL.name("pena_pena_id_fkey"), arrayOf(Pena.PENA.ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val PENA__PENA_PENA_MATERIAU_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pena.PENA, DSL.name("pena_pena_materiau_id_fkey"), arrayOf(Pena.PENA.MATERIAU_ID), remocra.db.jooq.remocra.keys.MATERIAU_PKEY, arrayOf(Materiau.MATERIAU.ID), true)
val PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_PENA_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PenaAspiration.PENA_ASPIRATION, DSL.name("pena_aspiration_pena_aspiration_pena_id_fkey"), arrayOf(PenaAspiration.PENA_ASPIRATION.PENA_ID), remocra.db.jooq.remocra.keys.PENA_PKEY, arrayOf(Pena.PENA.ID), true)
val PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_TYPE_PENA_ASPIRATION_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PenaAspiration.PENA_ASPIRATION, DSL.name("pena_aspiration_pena_aspiration_type_pena_aspiration_id_fkey"), arrayOf(PenaAspiration.PENA_ASPIRATION.TYPE_PENA_ASPIRATION_ID), remocra.db.jooq.remocra.keys.TYPE_PENA_ASPIRATION_PKEY, arrayOf(TypePenaAspiration.TYPE_PENA_ASPIRATION.ID), true)
val PERMIS__PERMIS_PERMIS_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Permis.PERMIS, DSL.name("permis_permis_commune_id_fkey"), arrayOf(Permis.PERMIS.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val PERMIS__PERMIS_PERMIS_INSTRUCTEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Permis.PERMIS, DSL.name("permis_permis_instructeur_id_fkey"), arrayOf(Permis.PERMIS.INSTRUCTEUR_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val PERMIS__PERMIS_PERMIS_SERVICE_INSTRUCTEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Permis.PERMIS, DSL.name("permis_permis_service_instructeur_id_fkey"), arrayOf(Permis.PERMIS.SERVICE_INSTRUCTEUR_ID), remocra.db.jooq.remocra.keys.TYPE_ORGANISME_PKEY, arrayOf(TypeOrganisme.TYPE_ORGANISME.ID), true)
val PERMIS__PERMIS_PERMIS_TYPE_PERMIS_AVIS_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Permis.PERMIS, DSL.name("permis_permis_type_permis_avis_id_fkey"), arrayOf(Permis.PERMIS.TYPE_PERMIS_AVIS_ID), remocra.db.jooq.remocra.keys.TYPE_PERMIS_AVIS_PKEY, arrayOf(TypePermisAvis.TYPE_PERMIS_AVIS.ID), true)
val PERMIS__PERMIS_PERMIS_TYPE_PERMIS_INTERSERVICE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Permis.PERMIS, DSL.name("permis_permis_type_permis_interservice_id_fkey"), arrayOf(Permis.PERMIS.TYPE_PERMIS_INTERSERVICE_ID), remocra.db.jooq.remocra.keys.TYPE_PERMIS_INTERSERVICE_PKEY, arrayOf(TypePermisInterservice.TYPE_PERMIS_INTERSERVICE.ID), true)
val PERMIS__PERMIS_PERMIS_VOIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Permis.PERMIS, DSL.name("permis_permis_voie_id_fkey"), arrayOf(Permis.PERMIS.VOIE_ID), remocra.db.jooq.remocra.keys.VOIE_PKEY, arrayOf(Voie.VOIE.ID), true)
val PIBI__PIBI_PIBI_DIAMETRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_diametre_id_fkey"), arrayOf(Pibi.PIBI.DIAMETRE_ID), remocra.db.jooq.remocra.keys.DIAMETRE_PKEY, arrayOf(Diametre.DIAMETRE.ID), true)
val PIBI__PIBI_PIBI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_id_fkey"), arrayOf(Pibi.PIBI.ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val PIBI__PIBI_PIBI_JUMELE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_jumele_id_fkey"), arrayOf(Pibi.PIBI.JUMELE_ID), remocra.db.jooq.remocra.keys.PIBI_PKEY, arrayOf(Pibi.PIBI.ID), true)
val PIBI__PIBI_PIBI_MARQUE_PIBI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_marque_pibi_id_fkey"), arrayOf(Pibi.PIBI.MARQUE_PIBI_ID), remocra.db.jooq.remocra.keys.MARQUE_PIBI_PKEY, arrayOf(MarquePibi.MARQUE_PIBI.ID), true)
val PIBI__PIBI_PIBI_MODELE_PIBI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_modele_pibi_id_fkey"), arrayOf(Pibi.PIBI.MODELE_PIBI_ID), remocra.db.jooq.remocra.keys.MODELE_PIBI_PKEY, arrayOf(ModelePibi.MODELE_PIBI.ID), true)
val PIBI__PIBI_PIBI_PENA_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_pena_id_fkey"), arrayOf(Pibi.PIBI.PENA_ID), remocra.db.jooq.remocra.keys.PENA_PKEY, arrayOf(Pena.PENA.ID), true)
val PIBI__PIBI_PIBI_RESERVOIR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_reservoir_id_fkey"), arrayOf(Pibi.PIBI.RESERVOIR_ID), remocra.db.jooq.remocra.keys.RESERVOIR_PKEY, arrayOf(Reservoir.RESERVOIR.ID), true)
val PIBI__PIBI_PIBI_SERVICE_EAU_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_service_eau_id_fkey"), arrayOf(Pibi.PIBI.SERVICE_EAU_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val PIBI__PIBI_PIBI_TYPE_CANALISATION_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_type_canalisation_id_fkey"), arrayOf(Pibi.PIBI.TYPE_CANALISATION_ID), remocra.db.jooq.remocra.keys.TYPE_CANALISATION_PKEY, arrayOf(TypeCanalisation.TYPE_CANALISATION.ID), true)
val PIBI__PIBI_PIBI_TYPE_RESEAU_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Pibi.PIBI, DSL.name("pibi_pibi_type_reseau_id_fkey"), arrayOf(Pibi.PIBI.TYPE_RESEAU_ID), remocra.db.jooq.remocra.keys.TYPE_RESEAU_PKEY, arrayOf(TypeReseau.TYPE_RESEAU.ID), true)
val POIDS_ANOMALIE__POIDS_ANOMALIE_POIDS_ANOMALIE_ANOMALIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PoidsAnomalie.POIDS_ANOMALIE, DSL.name("poids_anomalie_poids_anomalie_anomalie_id_fkey"), arrayOf(PoidsAnomalie.POIDS_ANOMALIE.ANOMALIE_ID), remocra.db.jooq.remocra.keys.ANOMALIE_PKEY, arrayOf(Anomalie.ANOMALIE.ID), true)
val POIDS_ANOMALIE__POIDS_ANOMALIE_POIDS_ANOMALIE_NATURE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PoidsAnomalie.POIDS_ANOMALIE, DSL.name("poids_anomalie_poids_anomalie_nature_id_fkey"), arrayOf(PoidsAnomalie.POIDS_ANOMALIE.NATURE_ID), remocra.db.jooq.remocra.keys.NATURE_PKEY, arrayOf(Nature.NATURE.ID), true)
val PROFIL_ORGANISME__PROFIL_ORGANISME_PROFIL_ORGANISME_TYPE_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(ProfilOrganisme.PROFIL_ORGANISME, DSL.name("profil_organisme_profil_organisme_type_organisme_id_fkey"), arrayOf(ProfilOrganisme.PROFIL_ORGANISME.TYPE_ORGANISME_ID), remocra.db.jooq.remocra.keys.TYPE_ORGANISME_PKEY, arrayOf(TypeOrganisme.TYPE_ORGANISME.ID), true)
val PROFIL_UTILISATEUR__PROFIL_UTILISATEUR_PROFIL_UTILISATEUR_TYPE_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(ProfilUtilisateur.PROFIL_UTILISATEUR, DSL.name("profil_utilisateur_profil_utilisateur_type_organisme_id_fkey"), arrayOf(ProfilUtilisateur.PROFIL_UTILISATEUR.TYPE_ORGANISME_ID), remocra.db.jooq.remocra.keys.TYPE_ORGANISME_PKEY, arrayOf(TypeOrganisme.TYPE_ORGANISME.ID), true)
val RAPPORT_PERSONNALISE_PARAMETRE__RAPPORT_PERSONNALISE_PARAMETR_RAPPORT_PERSONNALISE_PARAMET_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(RapportPersonnaliseParametre.RAPPORT_PERSONNALISE_PARAMETRE, DSL.name("rapport_personnalise_parametr_rapport_personnalise_paramet_fkey"), arrayOf(RapportPersonnaliseParametre.RAPPORT_PERSONNALISE_PARAMETRE.RAPPORT_PERSONNALISE_ID), remocra.db.jooq.remocra.keys.RAPPORT_PERSONNALISE_PKEY, arrayOf(RapportPersonnalise.RAPPORT_PERSONNALISE.ID), true)
val RCCI__RCCI_RCCI_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_commune_id_fkey"), arrayOf(Rcci.RCCI.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val RCCI__RCCI_RCCI_RCCI_ARRIVEE_DDTM_ONF_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_rcci_arrivee_ddtm_onf_id_fkey"), arrayOf(Rcci.RCCI.RCCI_ARRIVEE_DDTM_ONF_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val RCCI__RCCI_RCCI_RCCI_ARRIVEE_GENDARMERIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_rcci_arrivee_gendarmerie_id_fkey"), arrayOf(Rcci.RCCI.RCCI_ARRIVEE_GENDARMERIE_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val RCCI__RCCI_RCCI_RCCI_ARRIVEE_POLICE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_rcci_arrivee_police_id_fkey"), arrayOf(Rcci.RCCI.RCCI_ARRIVEE_POLICE_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val RCCI__RCCI_RCCI_RCCI_ARRIVEE_SDIS_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_rcci_arrivee_sdis_id_fkey"), arrayOf(Rcci.RCCI.RCCI_ARRIVEE_SDIS_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val RCCI__RCCI_RCCI_RCCI_TYPE_DEGRE_CERTITUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_rcci_type_degre_certitude_id_fkey"), arrayOf(Rcci.RCCI.RCCI_TYPE_DEGRE_CERTITUDE_ID), remocra.db.jooq.remocra.keys.RCCI_TYPE_DEGRE_CERTITUDE_PKEY, arrayOf(RcciTypeDegreCertitude.RCCI_TYPE_DEGRE_CERTITUDE.ID), true)
val RCCI__RCCI_RCCI_RCCI_TYPE_ORIGINE_ALERTE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_rcci_type_origine_alerte_id_fkey"), arrayOf(Rcci.RCCI.RCCI_TYPE_ORIGINE_ALERTE_ID), remocra.db.jooq.remocra.keys.RCCI_TYPE_ORIGINE_ALERTE_PKEY, arrayOf(RcciTypeOrigineAlerte.RCCI_TYPE_ORIGINE_ALERTE.ID), true)
val RCCI__RCCI_RCCI_RCCI_TYPE_PROMETHEE_CATEGORIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_rcci_type_promethee_categorie_id_fkey"), arrayOf(Rcci.RCCI.RCCI_TYPE_PROMETHEE_CATEGORIE_ID), remocra.db.jooq.remocra.keys.RCCI_TYPE_PROMETHEE_CATEGORIE_PKEY, arrayOf(RcciTypePrometheeCategorie.RCCI_TYPE_PROMETHEE_CATEGORIE.ID), true)
val RCCI__RCCI_RCCI_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Rcci.RCCI, DSL.name("rcci_rcci_utilisateur_id_fkey"), arrayOf(Rcci.RCCI.UTILISATEUR_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val RCCI_DOCUMENT__RCCI_DOCUMENT_RCCI_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(RcciDocument.RCCI_DOCUMENT, DSL.name("rcci_document_rcci_document_document_id_fkey"), arrayOf(RcciDocument.RCCI_DOCUMENT.DOCUMENT_ID), remocra.db.jooq.remocra.keys.DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val RCCI_DOCUMENT__RCCI_DOCUMENT_RCCI_DOCUMENT_RCCI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(RcciDocument.RCCI_DOCUMENT, DSL.name("rcci_document_rcci_document_rcci_id_fkey"), arrayOf(RcciDocument.RCCI_DOCUMENT.RCCI_ID), remocra.db.jooq.remocra.keys.RCCI_PKEY, arrayOf(Rcci.RCCI.ID), true)
val RCCI_TYPE_PROMETHEE_CATEGORIE__RCCI_TYPE_PROMETHEE_CATEGORIE_RCCI_TYPE_PROMETHEE_CATEGORI_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(RcciTypePrometheeCategorie.RCCI_TYPE_PROMETHEE_CATEGORIE, DSL.name("rcci_type_promethee_categorie_rcci_type_promethee_categori_fkey"), arrayOf(RcciTypePrometheeCategorie.RCCI_TYPE_PROMETHEE_CATEGORIE.RCCI_TYPE_PROMETHEE_PARTITION_ID), remocra.db.jooq.remocra.keys.RCCI_TYPE_PROMETHEE_PARTITION_PKEY, arrayOf(RcciTypePrometheePartition.RCCI_TYPE_PROMETHEE_PARTITION.ID), true)
val RCCI_TYPE_PROMETHEE_PARTITION__RCCI_TYPE_PROMETHEE_PARTITION_RCCI_TYPE_PROMETHEE_PARTITIO_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(RcciTypePrometheePartition.RCCI_TYPE_PROMETHEE_PARTITION, DSL.name("rcci_type_promethee_partition_rcci_type_promethee_partitio_fkey"), arrayOf(RcciTypePrometheePartition.RCCI_TYPE_PROMETHEE_PARTITION.RCCI_TYPE_PROMETHEE_FAMILLE_ID), remocra.db.jooq.remocra.keys.RCCI_TYPE_PROMETHEE_FAMILLE_PKEY, arrayOf(RcciTypePrometheeFamille.RCCI_TYPE_PROMETHEE_FAMILLE.ID), true)
val SITE__SITE_SITE_GESTIONNAIRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Site.SITE, DSL.name("site_site_gestionnaire_id_fkey"), arrayOf(Site.SITE.GESTIONNAIRE_ID), remocra.db.jooq.remocra.keys.GESTIONNAIRE_PKEY, arrayOf(Gestionnaire.GESTIONNAIRE.ID), true)
val TOPONYMIE__TOPONYMIE_TYPE_TOPONYMIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Toponymie.TOPONYMIE, DSL.name("toponymie_type_toponymie_id_fkey"), arrayOf(Toponymie.TOPONYMIE.TYPE_TOPONYMIE_ID), remocra.db.jooq.remocra.keys.TYPE_TOPONYMIE_PKEY, arrayOf(TypeToponymie.TYPE_TOPONYMIE.ID), true)
val TOURNEE__TOURNEE_TOURNEE_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Tournee.TOURNEE, DSL.name("tournee_tournee_organisme_id_fkey"), arrayOf(Tournee.TOURNEE.ORGANISME_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val TOURNEE__TOURNEE_TOURNEE_RESERVATION_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Tournee.TOURNEE, DSL.name("tournee_tournee_reservation_utilisateur_id_fkey"), arrayOf(Tournee.TOURNEE.RESERVATION_UTILISATEUR_ID), remocra.db.jooq.remocra.keys.UTILISATEUR_PKEY, arrayOf(Utilisateur.UTILISATEUR.ID), true)
val TYPE_CRISE_CATEGORIE__TYPE_CRISE_CATEGORIE_TYPE_CRISE_CATEGORIE_CRISE_CATEGORIE__FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(TypeCriseCategorie.TYPE_CRISE_CATEGORIE, DSL.name("type_crise_categorie_type_crise_categorie_crise_categorie__fkey"), arrayOf(TypeCriseCategorie.TYPE_CRISE_CATEGORIE.CRISE_CATEGORIE_ID), remocra.db.jooq.remocra.keys.CRISE_CATEGORIE_PKEY, arrayOf(CriseCategorie.CRISE_CATEGORIE.ID), true)
val TYPE_ORGANISME__TYPE_ORGANISME_TYPE_ORGANISME_PARENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(TypeOrganisme.TYPE_ORGANISME, DSL.name("type_organisme_type_organisme_parent_id_fkey"), arrayOf(TypeOrganisme.TYPE_ORGANISME.PARENT_ID), remocra.db.jooq.remocra.keys.TYPE_ORGANISME_PKEY, arrayOf(TypeOrganisme.TYPE_ORGANISME.ID), true)
val UTILISATEUR__UTILISATEUR_UTILISATEUR_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Utilisateur.UTILISATEUR, DSL.name("utilisateur_utilisateur_organisme_id_fkey"), arrayOf(Utilisateur.UTILISATEUR.ORGANISME_ID), remocra.db.jooq.remocra.keys.ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val UTILISATEUR__UTILISATEUR_UTILISATEUR_PROFIL_UTILISATEUR_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Utilisateur.UTILISATEUR, DSL.name("utilisateur_utilisateur_profil_utilisateur_id_fkey"), arrayOf(Utilisateur.UTILISATEUR.PROFIL_UTILISATEUR_ID), remocra.db.jooq.remocra.keys.PROFIL_UTILISATEUR_PKEY, arrayOf(ProfilUtilisateur.PROFIL_UTILISATEUR.ID), true)
val VISITE__VISITE_VISITE_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Visite.VISITE, DSL.name("visite_visite_pei_id_fkey"), arrayOf(Visite.VISITE.PEI_ID), remocra.db.jooq.remocra.keys.PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val VISITE_CTRL_DEBIT_PRESSION__VISITE_CTRL_DEBIT_PRESSION_VISITE_CTRL_DEBIT_PRESSION_VISI_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(VisiteCtrlDebitPression.VISITE_CTRL_DEBIT_PRESSION, DSL.name("visite_ctrl_debit_pression_visite_ctrl_debit_pression_visi_fkey"), arrayOf(VisiteCtrlDebitPression.VISITE_CTRL_DEBIT_PRESSION.VISITE_ID), remocra.db.jooq.remocra.keys.VISITE_PKEY, arrayOf(Visite.VISITE.ID), true)
val VOIE__VOIE_VOIE_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Voie.VOIE, DSL.name("voie_voie_commune_id_fkey"), arrayOf(Voie.VOIE.COMMUNE_ID), remocra.db.jooq.remocra.keys.COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
