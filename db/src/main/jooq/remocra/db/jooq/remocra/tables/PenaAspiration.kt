/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.indexes.PENA_ASPIRATION_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.PENA_ASPIRATION_PKEY
import remocra.db.jooq.remocra.keys.PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_PENA_ID_FKEY
import remocra.db.jooq.remocra.keys.PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_TYPE_PENA_ASPIRATION_ID_FKEY
import remocra.db.jooq.remocra.tables.Pena.PenaPath
import remocra.db.jooq.remocra.tables.TypePenaAspiration.TypePenaAspirationPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class PenaAspiration(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.pena_aspiration</code>
         */
        val PENA_ASPIRATION: PenaAspiration = PenaAspiration()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.pena_aspiration.pena_aspiration_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("pena_aspiration_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.pena_aspiration.pena_aspiration_pena_id</code>.
     */
    val PENA_ID: TableField<Record, UUID?> = createField(DSL.name("pena_aspiration_pena_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>remocra.pena_aspiration.pena_aspiration_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("pena_aspiration_geometrie"), SQLDataType.GEOMETRY, this, "", GeometryBinding())

    /**
     * The column <code>remocra.pena_aspiration.pena_aspiration_numero</code>.
     * Identifiant interne
     */
    val NUMERO: TableField<Record, String?> = createField(DSL.name("pena_aspiration_numero"), SQLDataType.CLOB.nullable(false), this, "Identifiant interne")

    /**
     * The column
     * <code>remocra.pena_aspiration.pena_aspiration_est_normalise</code>.
     * Indique si le PEI est normalisé ou non
     */
    val EST_NORMALISE: TableField<Record, Boolean?> = createField(DSL.name("pena_aspiration_est_normalise"), SQLDataType.BOOLEAN.nullable(false), this, "Indique si le PEI est normalisé ou non")

    /**
     * The column
     * <code>remocra.pena_aspiration.pena_aspiration_hauteur_superieure_3_metres</code>.
     * Indique si la hauteur de l'aspiration est supérieure à 3 mètres
     */
    val HAUTEUR_SUPERIEURE_3_METRES: TableField<Record, Boolean?> = createField(DSL.name("pena_aspiration_hauteur_superieure_3_metres"), SQLDataType.BOOLEAN.nullable(false), this, "Indique si la hauteur de l'aspiration est supérieure à 3 mètres")

    /**
     * The column
     * <code>remocra.pena_aspiration.pena_aspiration_type_pena_aspiration_id</code>.
     */
    val TYPE_PENA_ASPIRATION_ID: TableField<Record, UUID?> = createField(DSL.name("pena_aspiration_type_pena_aspiration_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>remocra.pena_aspiration.pena_aspiration_est_deporte</code>. Indique
     * si le dispositif d'aspiration est à proximité ou déporté
     */
    val EST_DEPORTE: TableField<Record, Boolean?> = createField(DSL.name("pena_aspiration_est_deporte"), SQLDataType.BOOLEAN.nullable(false), this, "Indique si le dispositif d'aspiration est à proximité ou déporté")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.pena_aspiration</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.pena_aspiration</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.pena_aspiration</code> table reference
     */
    constructor() : this(DSL.name("pena_aspiration"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PENA_ASPIRATION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PenaAspirationPath : PenaAspiration, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): PenaAspirationPath = PenaAspirationPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PenaAspirationPath = PenaAspirationPath(alias, this)
        override fun `as`(alias: Table<*>): PenaAspirationPath = PenaAspirationPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(PENA_ASPIRATION_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = PENA_ASPIRATION_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_PENA_ID_FKEY, PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_TYPE_PENA_ASPIRATION_ID_FKEY)

    private lateinit var _pena: PenaPath

    /**
     * Get the implicit join path to the <code>remocra.pena</code> table.
     */
    fun pena(): PenaPath {
        if (!this::_pena.isInitialized) {
            _pena = PenaPath(this, PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_PENA_ID_FKEY, null)
        }

        return _pena
    }

    val pena: PenaPath
        get(): PenaPath = pena()

    private lateinit var _typePenaAspiration: TypePenaAspirationPath

    /**
     * Get the implicit join path to the
     * <code>remocra.type_pena_aspiration</code> table.
     */
    fun typePenaAspiration(): TypePenaAspirationPath {
        if (!this::_typePenaAspiration.isInitialized) {
            _typePenaAspiration = TypePenaAspirationPath(this, PENA_ASPIRATION__PENA_ASPIRATION_PENA_ASPIRATION_TYPE_PENA_ASPIRATION_ID_FKEY, null)
        }

        return _typePenaAspiration
    }

    val typePenaAspiration: TypePenaAspirationPath
        get(): TypePenaAspirationPath = typePenaAspiration()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_point_pena_aspiration"), "((geometrytype(pena_aspiration_geometrie) = 'POINT'::text))", true),
    )
    override fun `as`(alias: String): PenaAspiration = PenaAspiration(DSL.name(alias), this)
    override fun `as`(alias: Name): PenaAspiration = PenaAspiration(alias, this)
    override fun `as`(alias: Table<*>): PenaAspiration = PenaAspiration(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PenaAspiration = PenaAspiration(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PenaAspiration = PenaAspiration(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PenaAspiration = PenaAspiration(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PenaAspiration = PenaAspiration(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PenaAspiration = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PenaAspiration = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PenaAspiration = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): PenaAspiration = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): PenaAspiration = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PenaAspiration = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PenaAspiration = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PenaAspiration = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PenaAspiration = where(DSL.notExists(select))
}
