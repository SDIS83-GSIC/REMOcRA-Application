/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.L_PENA_TYPE_ENGIN_PKEY
import remocra.db.jooq.remocra.keys.L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_PENA_ID_FKEY
import remocra.db.jooq.remocra.keys.L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_TYPE_ENGIN_ID_FKEY
import remocra.db.jooq.remocra.tables.Pena.PenaPath
import remocra.db.jooq.remocra.tables.TypeEngin.TypeEnginPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class LPenaTypeEngin(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.l_pena_type_engin</code>
         */
        val L_PENA_TYPE_ENGIN: LPenaTypeEngin = LPenaTypeEngin()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.l_pena_type_engin.pena_id</code>.
     */
    val PENA_ID: TableField<Record, UUID?> = createField(DSL.name("pena_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.l_pena_type_engin.type_engin_id</code>.
     */
    val TYPE_ENGIN_ID: TableField<Record, UUID?> = createField(DSL.name("type_engin_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.l_pena_type_engin</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.l_pena_type_engin</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.l_pena_type_engin</code> table reference
     */
    constructor() : this(DSL.name("l_pena_type_engin"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, L_PENA_TYPE_ENGIN, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LPenaTypeEnginPath : LPenaTypeEngin, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): LPenaTypeEnginPath = LPenaTypeEnginPath(DSL.name(alias), this)
        override fun `as`(alias: Name): LPenaTypeEnginPath = LPenaTypeEnginPath(alias, this)
        override fun `as`(alias: Table<*>): LPenaTypeEnginPath = LPenaTypeEnginPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = L_PENA_TYPE_ENGIN_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_PENA_ID_FKEY, L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_TYPE_ENGIN_ID_FKEY)

    private lateinit var _pena: PenaPath

    /**
     * Get the implicit join path to the <code>remocra.pena</code> table.
     */
    fun pena(): PenaPath {
        if (!this::_pena.isInitialized) {
            _pena = PenaPath(this, L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_PENA_ID_FKEY, null)
        }

        return _pena
    }

    val pena: PenaPath
        get(): PenaPath = pena()

    private lateinit var _typeEngin: TypeEnginPath

    /**
     * Get the implicit join path to the <code>remocra.type_engin</code> table.
     */
    fun typeEngin(): TypeEnginPath {
        if (!this::_typeEngin.isInitialized) {
            _typeEngin = TypeEnginPath(this, L_PENA_TYPE_ENGIN__L_PENA_TYPE_ENGIN_TYPE_ENGIN_ID_FKEY, null)
        }

        return _typeEngin
    }

    val typeEngin: TypeEnginPath
        get(): TypeEnginPath = typeEngin()
    override fun `as`(alias: String): LPenaTypeEngin = LPenaTypeEngin(DSL.name(alias), this)
    override fun `as`(alias: Name): LPenaTypeEngin = LPenaTypeEngin(alias, this)
    override fun `as`(alias: Table<*>): LPenaTypeEngin = LPenaTypeEngin(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LPenaTypeEngin = LPenaTypeEngin(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LPenaTypeEngin = LPenaTypeEngin(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): LPenaTypeEngin = LPenaTypeEngin(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): LPenaTypeEngin = LPenaTypeEngin(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): LPenaTypeEngin = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): LPenaTypeEngin = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): LPenaTypeEngin = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): LPenaTypeEngin = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): LPenaTypeEngin = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): LPenaTypeEngin = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): LPenaTypeEngin = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): LPenaTypeEngin = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): LPenaTypeEngin = where(DSL.notExists(select))
}
