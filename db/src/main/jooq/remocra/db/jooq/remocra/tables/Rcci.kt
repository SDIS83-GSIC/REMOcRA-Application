/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.Direction
import remocra.db.jooq.remocra.enums.OuiNonNa
import remocra.db.jooq.remocra.enums.RisqueMeteo
import remocra.db.jooq.remocra.indexes.RCCI_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.RCCI_DOCUMENT__RCCI_DOCUMENT_RCCI_DOCUMENT_RCCI_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI_PKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_COMMUNE_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_ARRIVEE_DDTM_ONF_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_ARRIVEE_GENDARMERIE_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_ARRIVEE_POLICE_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_ARRIVEE_SDIS_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_INDICE_ROTHERMEL_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_TYPE_DEGRE_CERTITUDE_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_TYPE_ORIGINE_ALERTE_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_RCCI_TYPE_PROMETHEE_CATEGORIE_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_UTILISATEUR_ID_FKEY
import remocra.db.jooq.remocra.keys.RCCI__RCCI_RCCI_VOIE_ID_FKEY
import remocra.db.jooq.remocra.tables.Commune.CommunePath
import remocra.db.jooq.remocra.tables.RcciDocument.RcciDocumentPath
import remocra.db.jooq.remocra.tables.RcciIndiceRothermel.RcciIndiceRothermelPath
import remocra.db.jooq.remocra.tables.RcciTypeDegreCertitude.RcciTypeDegreCertitudePath
import remocra.db.jooq.remocra.tables.RcciTypeOrigineAlerte.RcciTypeOrigineAlertePath
import remocra.db.jooq.remocra.tables.RcciTypePrometheeCategorie.RcciTypePrometheeCategoriePath
import remocra.db.jooq.remocra.tables.Utilisateur.UtilisateurPath
import remocra.db.jooq.remocra.tables.Voie.VoiePath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Rcci(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.rcci</code>
         */
        val RCCI: Rcci = Rcci()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.rcci.rcci_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("rcci_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.rcci.rcci_commentaire_conclusion</code>.
     */
    val COMMENTAIRE_CONCLUSION: TableField<Record, String?> = createField(DSL.name("rcci_commentaire_conclusion"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.rcci.rcci_complement</code>.
     */
    val COMPLEMENT: TableField<Record, String?> = createField(DSL.name("rcci_complement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.rcci.rcci_carroyage_dfci</code>.
     */
    val CARROYAGE_DFCI: TableField<Record, String?> = createField(DSL.name("rcci_carroyage_dfci"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.rcci.rcci_date_incendie</code>.
     */
    val DATE_INCENDIE: TableField<Record, ZonedDateTime?> = createField(DSL.name("rcci_date_incendie"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.rcci.rcci_date_modification</code>.
     */
    val DATE_MODIFICATION: TableField<Record, ZonedDateTime?> = createField(DSL.name("rcci_date_modification"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.rcci.rcci_direction_vent</code>.
     */
    val DIRECTION_VENT: TableField<Record, Direction?> = createField(DSL.name("rcci_direction_vent"), SQLDataType.VARCHAR.asEnumDataType(Direction::class.java), this, "")

    /**
     * The column <code>remocra.rcci.rcci_force_vent</code>.
     */
    val FORCE_VENT: TableField<Record, Int?> = createField(DSL.name("rcci_force_vent"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.rcci.rcci_forces_ordre</code>.
     */
    val FORCES_ORDRE: TableField<Record, String?> = createField(DSL.name("rcci_forces_ordre"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.rcci.rcci_gdh</code>.
     */
    val GDH: TableField<Record, ZonedDateTime?> = createField(DSL.name("rcci_gdh"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.rcci.rcci_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("rcci_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    /**
     * The column <code>remocra.rcci.rcci_hygrometrie</code>.
     */
    val HYGROMETRIE: TableField<Record, Int?> = createField(DSL.name("rcci_hygrometrie"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.rcci.rcci_point_eclosion</code>.
     */
    val POINT_ECLOSION: TableField<Record, String?> = createField(DSL.name("rcci_point_eclosion"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.rcci.rcci_premier_cos</code>.
     */
    val PREMIER_COS: TableField<Record, String?> = createField(DSL.name("rcci_premier_cos"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.rcci.rcci_premier_engin</code>.
     */
    val PREMIER_ENGIN: TableField<Record, String?> = createField(DSL.name("rcci_premier_engin"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.rcci.rcci_superficie_finale</code>.
     */
    val SUPERFICIE_FINALE: TableField<Record, Double?> = createField(DSL.name("rcci_superficie_finale"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>remocra.rcci.rcci_superficie_referent</code>.
     */
    val SUPERFICIE_REFERENT: TableField<Record, Double?> = createField(DSL.name("rcci_superficie_referent"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>remocra.rcci.rcci_superficie_secours</code>.
     */
    val SUPERFICIE_SECOURS: TableField<Record, Double?> = createField(DSL.name("rcci_superficie_secours"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>remocra.rcci.rcci_temperature</code>.
     */
    val TEMPERATURE: TableField<Record, Double?> = createField(DSL.name("rcci_temperature"), SQLDataType.DOUBLE, this, "")

    /**
     * The column <code>remocra.rcci.rcci_voie_texte</code>.
     */
    val VOIE_TEXTE: TableField<Record, String?> = createField(DSL.name("rcci_voie_texte"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.rcci.rcci_commune_id</code>.
     */
    val COMMUNE_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_commune_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>remocra.rcci.rcci_rcci_type_promethee_categorie_id</code>.
     */
    val RCCI_TYPE_PROMETHEE_CATEGORIE_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_type_promethee_categorie_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.rcci.rcci_rcci_type_degre_certitude_id</code>.
     */
    val RCCI_TYPE_DEGRE_CERTITUDE_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_type_degre_certitude_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.rcci.rcci_rcci_type_origine_alerte_id</code>.
     */
    val RCCI_TYPE_ORIGINE_ALERTE_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_type_origine_alerte_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.rcci.rcci_rcci_arrivee_ddtm_onf_id</code>.
     */
    val RCCI_ARRIVEE_DDTM_ONF_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_arrivee_ddtm_onf_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.rcci.rcci_rcci_arrivee_sdis_id</code>.
     */
    val RCCI_ARRIVEE_SDIS_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_arrivee_sdis_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.rcci.rcci_rcci_arrivee_gendarmerie_id</code>.
     */
    val RCCI_ARRIVEE_GENDARMERIE_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_arrivee_gendarmerie_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.rcci.rcci_rcci_arrivee_police_id</code>.
     */
    val RCCI_ARRIVEE_POLICE_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_arrivee_police_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.rcci.rcci_utilisateur_id</code>.
     */
    val UTILISATEUR_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_utilisateur_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.rcci.rcci_risque_meteo</code>.
     */
    val RISQUE_METEO: TableField<Record, RisqueMeteo?> = createField(DSL.name("rcci_risque_meteo"), SQLDataType.VARCHAR.asEnumDataType(RisqueMeteo::class.java), this, "")

    /**
     * The column <code>remocra.rcci.rcci_rcci_indice_rothermel_id</code>.
     */
    val RCCI_INDICE_ROTHERMEL_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_rcci_indice_rothermel_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.rcci.rcci_vent_local</code>.
     */
    val VENT_LOCAL: TableField<Record, OuiNonNa?> = createField(DSL.name("rcci_vent_local"), SQLDataType.VARCHAR.asEnumDataType(OuiNonNa::class.java), this, "")

    /**
     * The column <code>remocra.rcci.rcci_gel_lieux</code>.
     */
    val GEL_LIEUX: TableField<Record, OuiNonNa?> = createField(DSL.name("rcci_gel_lieux"), SQLDataType.VARCHAR.asEnumDataType(OuiNonNa::class.java), this, "")

    /**
     * The column <code>remocra.rcci.rcci_voie_id</code>.
     */
    val VOIE_ID: TableField<Record, UUID?> = createField(DSL.name("rcci_voie_id"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.rcci</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.rcci</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.rcci</code> table reference
     */
    constructor() : this(DSL.name("rcci"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RCCI, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class RcciPath : Rcci, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): RcciPath = RcciPath(DSL.name(alias), this)
        override fun `as`(alias: Name): RcciPath = RcciPath(alias, this)
        override fun `as`(alias: Table<*>): RcciPath = RcciPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(RCCI_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = RCCI_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(RCCI__RCCI_RCCI_COMMUNE_ID_FKEY, RCCI__RCCI_RCCI_RCCI_ARRIVEE_DDTM_ONF_ID_FKEY, RCCI__RCCI_RCCI_RCCI_ARRIVEE_GENDARMERIE_ID_FKEY, RCCI__RCCI_RCCI_RCCI_ARRIVEE_POLICE_ID_FKEY, RCCI__RCCI_RCCI_RCCI_ARRIVEE_SDIS_ID_FKEY, RCCI__RCCI_RCCI_RCCI_INDICE_ROTHERMEL_ID_FKEY, RCCI__RCCI_RCCI_RCCI_TYPE_DEGRE_CERTITUDE_ID_FKEY, RCCI__RCCI_RCCI_RCCI_TYPE_ORIGINE_ALERTE_ID_FKEY, RCCI__RCCI_RCCI_RCCI_TYPE_PROMETHEE_CATEGORIE_ID_FKEY, RCCI__RCCI_RCCI_UTILISATEUR_ID_FKEY, RCCI__RCCI_RCCI_VOIE_ID_FKEY)

    private lateinit var _commune: CommunePath

    /**
     * Get the implicit join path to the <code>remocra.commune</code> table.
     */
    fun commune(): CommunePath {
        if (!this::_commune.isInitialized) {
            _commune = CommunePath(this, RCCI__RCCI_RCCI_COMMUNE_ID_FKEY, null)
        }

        return _commune
    }

    val commune: CommunePath
        get(): CommunePath = commune()

    private lateinit var _rcciRcciRcciArriveeDdtmOnfIdFkey: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table,
     * via the <code>rcci_rcci_rcci_arrivee_ddtm_onf_id_fkey</code> key.
     */
    fun rcciRcciRcciArriveeDdtmOnfIdFkey(): UtilisateurPath {
        if (!this::_rcciRcciRcciArriveeDdtmOnfIdFkey.isInitialized) {
            _rcciRcciRcciArriveeDdtmOnfIdFkey = UtilisateurPath(this, RCCI__RCCI_RCCI_RCCI_ARRIVEE_DDTM_ONF_ID_FKEY, null)
        }

        return _rcciRcciRcciArriveeDdtmOnfIdFkey
    }

    val rcciRcciRcciArriveeDdtmOnfIdFkey: UtilisateurPath
        get(): UtilisateurPath = rcciRcciRcciArriveeDdtmOnfIdFkey()

    private lateinit var _rcciRcciRcciArriveeGendarmerieIdFkey: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table,
     * via the <code>rcci_rcci_rcci_arrivee_gendarmerie_id_fkey</code> key.
     */
    fun rcciRcciRcciArriveeGendarmerieIdFkey(): UtilisateurPath {
        if (!this::_rcciRcciRcciArriveeGendarmerieIdFkey.isInitialized) {
            _rcciRcciRcciArriveeGendarmerieIdFkey = UtilisateurPath(this, RCCI__RCCI_RCCI_RCCI_ARRIVEE_GENDARMERIE_ID_FKEY, null)
        }

        return _rcciRcciRcciArriveeGendarmerieIdFkey
    }

    val rcciRcciRcciArriveeGendarmerieIdFkey: UtilisateurPath
        get(): UtilisateurPath = rcciRcciRcciArriveeGendarmerieIdFkey()

    private lateinit var _rcciRcciRcciArriveePoliceIdFkey: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table,
     * via the <code>rcci_rcci_rcci_arrivee_police_id_fkey</code> key.
     */
    fun rcciRcciRcciArriveePoliceIdFkey(): UtilisateurPath {
        if (!this::_rcciRcciRcciArriveePoliceIdFkey.isInitialized) {
            _rcciRcciRcciArriveePoliceIdFkey = UtilisateurPath(this, RCCI__RCCI_RCCI_RCCI_ARRIVEE_POLICE_ID_FKEY, null)
        }

        return _rcciRcciRcciArriveePoliceIdFkey
    }

    val rcciRcciRcciArriveePoliceIdFkey: UtilisateurPath
        get(): UtilisateurPath = rcciRcciRcciArriveePoliceIdFkey()

    private lateinit var _rcciRcciRcciArriveeSdisIdFkey: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table,
     * via the <code>rcci_rcci_rcci_arrivee_sdis_id_fkey</code> key.
     */
    fun rcciRcciRcciArriveeSdisIdFkey(): UtilisateurPath {
        if (!this::_rcciRcciRcciArriveeSdisIdFkey.isInitialized) {
            _rcciRcciRcciArriveeSdisIdFkey = UtilisateurPath(this, RCCI__RCCI_RCCI_RCCI_ARRIVEE_SDIS_ID_FKEY, null)
        }

        return _rcciRcciRcciArriveeSdisIdFkey
    }

    val rcciRcciRcciArriveeSdisIdFkey: UtilisateurPath
        get(): UtilisateurPath = rcciRcciRcciArriveeSdisIdFkey()

    private lateinit var _rcciIndiceRothermel: RcciIndiceRothermelPath

    /**
     * Get the implicit join path to the
     * <code>remocra.rcci_indice_rothermel</code> table.
     */
    fun rcciIndiceRothermel(): RcciIndiceRothermelPath {
        if (!this::_rcciIndiceRothermel.isInitialized) {
            _rcciIndiceRothermel = RcciIndiceRothermelPath(this, RCCI__RCCI_RCCI_RCCI_INDICE_ROTHERMEL_ID_FKEY, null)
        }

        return _rcciIndiceRothermel
    }

    val rcciIndiceRothermel: RcciIndiceRothermelPath
        get(): RcciIndiceRothermelPath = rcciIndiceRothermel()

    private lateinit var _rcciTypeDegreCertitude: RcciTypeDegreCertitudePath

    /**
     * Get the implicit join path to the
     * <code>remocra.rcci_type_degre_certitude</code> table.
     */
    fun rcciTypeDegreCertitude(): RcciTypeDegreCertitudePath {
        if (!this::_rcciTypeDegreCertitude.isInitialized) {
            _rcciTypeDegreCertitude = RcciTypeDegreCertitudePath(this, RCCI__RCCI_RCCI_RCCI_TYPE_DEGRE_CERTITUDE_ID_FKEY, null)
        }

        return _rcciTypeDegreCertitude
    }

    val rcciTypeDegreCertitude: RcciTypeDegreCertitudePath
        get(): RcciTypeDegreCertitudePath = rcciTypeDegreCertitude()

    private lateinit var _rcciTypeOrigineAlerte: RcciTypeOrigineAlertePath

    /**
     * Get the implicit join path to the
     * <code>remocra.rcci_type_origine_alerte</code> table.
     */
    fun rcciTypeOrigineAlerte(): RcciTypeOrigineAlertePath {
        if (!this::_rcciTypeOrigineAlerte.isInitialized) {
            _rcciTypeOrigineAlerte = RcciTypeOrigineAlertePath(this, RCCI__RCCI_RCCI_RCCI_TYPE_ORIGINE_ALERTE_ID_FKEY, null)
        }

        return _rcciTypeOrigineAlerte
    }

    val rcciTypeOrigineAlerte: RcciTypeOrigineAlertePath
        get(): RcciTypeOrigineAlertePath = rcciTypeOrigineAlerte()

    private lateinit var _rcciTypePrometheeCategorie: RcciTypePrometheeCategoriePath

    /**
     * Get the implicit join path to the
     * <code>remocra.rcci_type_promethee_categorie</code> table.
     */
    fun rcciTypePrometheeCategorie(): RcciTypePrometheeCategoriePath {
        if (!this::_rcciTypePrometheeCategorie.isInitialized) {
            _rcciTypePrometheeCategorie = RcciTypePrometheeCategoriePath(this, RCCI__RCCI_RCCI_RCCI_TYPE_PROMETHEE_CATEGORIE_ID_FKEY, null)
        }

        return _rcciTypePrometheeCategorie
    }

    val rcciTypePrometheeCategorie: RcciTypePrometheeCategoriePath
        get(): RcciTypePrometheeCategoriePath = rcciTypePrometheeCategorie()

    private lateinit var _rcciRcciUtilisateurIdFkey: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table,
     * via the <code>rcci_rcci_utilisateur_id_fkey</code> key.
     */
    fun rcciRcciUtilisateurIdFkey(): UtilisateurPath {
        if (!this::_rcciRcciUtilisateurIdFkey.isInitialized) {
            _rcciRcciUtilisateurIdFkey = UtilisateurPath(this, RCCI__RCCI_RCCI_UTILISATEUR_ID_FKEY, null)
        }

        return _rcciRcciUtilisateurIdFkey
    }

    val rcciRcciUtilisateurIdFkey: UtilisateurPath
        get(): UtilisateurPath = rcciRcciUtilisateurIdFkey()

    private lateinit var _voie: VoiePath

    /**
     * Get the implicit join path to the <code>remocra.voie</code> table.
     */
    fun voie(): VoiePath {
        if (!this::_voie.isInitialized) {
            _voie = VoiePath(this, RCCI__RCCI_RCCI_VOIE_ID_FKEY, null)
        }

        return _voie
    }

    val voie: VoiePath
        get(): VoiePath = voie()

    private lateinit var _rcciDocument: RcciDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.rcci_document</code> table
     */
    fun rcciDocument(): RcciDocumentPath {
        if (!this::_rcciDocument.isInitialized) {
            _rcciDocument = RcciDocumentPath(this, null, RCCI_DOCUMENT__RCCI_DOCUMENT_RCCI_DOCUMENT_RCCI_ID_FKEY.inverseKey)
        }

        return _rcciDocument
    }

    val rcciDocument: RcciDocumentPath
        get(): RcciDocumentPath = rcciDocument()
    override fun `as`(alias: String): Rcci = Rcci(DSL.name(alias), this)
    override fun `as`(alias: Name): Rcci = Rcci(alias, this)
    override fun `as`(alias: Table<*>): Rcci = Rcci(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Rcci = Rcci(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Rcci = Rcci(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Rcci = Rcci(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Rcci = Rcci(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Rcci = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Rcci = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Rcci = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Rcci = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Rcci = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Rcci = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Rcci = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Rcci = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Rcci = where(DSL.notExists(select))
}
