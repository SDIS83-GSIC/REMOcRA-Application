/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.TypeDashboardComponents
import remocra.db.jooq.remocra.keys.DASHBOARD_COMPONENT_PKEY
import remocra.db.jooq.remocra.keys.DASHBOARD_COMPONENT__DASHBOARD_COMPONENT_DASHBOARD_COMPONENT_DAHSBOARD_QUERY_ID_FKEY
import remocra.db.jooq.remocra.keys.DASHBOARD_CONFIG__DASHBOARD_CONFIG_DASHBOARD_CONFIG_DASHBOARD_COMPONENT_ID_FKEY
import remocra.db.jooq.remocra.tables.DashboardConfig.DashboardConfigPath
import remocra.db.jooq.remocra.tables.DashboardQuery.DashboardQueryPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class DashboardComponent(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.dashboard_component</code>
         */
        val DASHBOARD_COMPONENT: DashboardComponent = DashboardComponent()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>remocra.dashboard_component.dashboard_component_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("dashboard_component_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.dashboard_component.dashboard_component_dahsboard_query_id</code>.
     */
    val DAHSBOARD_QUERY_ID: TableField<Record, UUID?> = createField(DSL.name("dashboard_component_dahsboard_query_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.dashboard_component.dashboard_component_key</code>.
     */
    val KEY: TableField<Record, TypeDashboardComponents?> = createField(DSL.name("dashboard_component_key"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(TypeDashboardComponents::class.java), this, "")

    /**
     * The column
     * <code>remocra.dashboard_component.dashboard_component_title</code>.
     */
    val TITLE: TableField<Record, String?> = createField(DSL.name("dashboard_component_title"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.dashboard_component.dashboard_component_config</code>.
     */
    val CONFIG: TableField<Record, JSONB?> = createField(DSL.name("dashboard_component_config"), SQLDataType.JSONB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.dashboard_component</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.dashboard_component</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.dashboard_component</code> table reference
     */
    constructor() : this(DSL.name("dashboard_component"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DASHBOARD_COMPONENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DashboardComponentPath : DashboardComponent, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): DashboardComponentPath = DashboardComponentPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DashboardComponentPath = DashboardComponentPath(alias, this)
        override fun `as`(alias: Table<*>): DashboardComponentPath = DashboardComponentPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = DASHBOARD_COMPONENT_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(DASHBOARD_COMPONENT__DASHBOARD_COMPONENT_DASHBOARD_COMPONENT_DAHSBOARD_QUERY_ID_FKEY)

    private lateinit var _dashboardQuery: DashboardQueryPath

    /**
     * Get the implicit join path to the <code>remocra.dashboard_query</code>
     * table.
     */
    fun dashboardQuery(): DashboardQueryPath {
        if (!this::_dashboardQuery.isInitialized) {
            _dashboardQuery = DashboardQueryPath(this, DASHBOARD_COMPONENT__DASHBOARD_COMPONENT_DASHBOARD_COMPONENT_DAHSBOARD_QUERY_ID_FKEY, null)
        }

        return _dashboardQuery
    }

    val dashboardQuery: DashboardQueryPath
        get(): DashboardQueryPath = dashboardQuery()

    private lateinit var _dashboardConfig: DashboardConfigPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.dashboard_config</code> table
     */
    fun dashboardConfig(): DashboardConfigPath {
        if (!this::_dashboardConfig.isInitialized) {
            _dashboardConfig = DashboardConfigPath(this, null, DASHBOARD_CONFIG__DASHBOARD_CONFIG_DASHBOARD_CONFIG_DASHBOARD_COMPONENT_ID_FKEY.inverseKey)
        }

        return _dashboardConfig
    }

    val dashboardConfig: DashboardConfigPath
        get(): DashboardConfigPath = dashboardConfig()
    override fun `as`(alias: String): DashboardComponent = DashboardComponent(DSL.name(alias), this)
    override fun `as`(alias: Name): DashboardComponent = DashboardComponent(alias, this)
    override fun `as`(alias: Table<*>): DashboardComponent = DashboardComponent(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DashboardComponent = DashboardComponent(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DashboardComponent = DashboardComponent(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DashboardComponent = DashboardComponent(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DashboardComponent = DashboardComponent(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DashboardComponent = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DashboardComponent = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DashboardComponent = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DashboardComponent = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DashboardComponent = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DashboardComponent = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DashboardComponent = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DashboardComponent = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DashboardComponent = where(DSL.notExists(select))
}
