/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.DASHBOARD_CONFIG__DASHBOARD_CONFIG_DASHBOARD_CONFIG_DASHBOARD_ID_FKEY
import remocra.db.jooq.remocra.keys.DASHBOARD_PKEY
import remocra.db.jooq.remocra.keys.L_DASHBOARD_PROFIL__L_DASHBOARD_PROFIL_DASHBOARD_ID_FKEY
import remocra.db.jooq.remocra.tables.DashboardConfig.DashboardConfigPath
import remocra.db.jooq.remocra.tables.LDashboardProfil.LDashboardProfilPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Dashboard(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.dashboard</code>
         */
        val DASHBOARD: Dashboard = Dashboard()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.dashboard.dashboard_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("dashboard_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.dashboard.dashboard_title</code>.
     */
    val TITLE: TableField<Record, String?> = createField(DSL.name("dashboard_title"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.dashboard</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.dashboard</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.dashboard</code> table reference
     */
    constructor() : this(DSL.name("dashboard"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DASHBOARD, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DashboardPath : Dashboard, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): DashboardPath = DashboardPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DashboardPath = DashboardPath(alias, this)
        override fun `as`(alias: Table<*>): DashboardPath = DashboardPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = DASHBOARD_PKEY

    private lateinit var _dashboardConfig: DashboardConfigPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.dashboard_config</code> table
     */
    fun dashboardConfig(): DashboardConfigPath {
        if (!this::_dashboardConfig.isInitialized) {
            _dashboardConfig = DashboardConfigPath(this, null, DASHBOARD_CONFIG__DASHBOARD_CONFIG_DASHBOARD_CONFIG_DASHBOARD_ID_FKEY.inverseKey)
        }

        return _dashboardConfig
    }

    val dashboardConfig: DashboardConfigPath
        get(): DashboardConfigPath = dashboardConfig()

    private lateinit var _lDashboardProfil: LDashboardProfilPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_dashboard_profil</code> table
     */
    fun lDashboardProfil(): LDashboardProfilPath {
        if (!this::_lDashboardProfil.isInitialized) {
            _lDashboardProfil = LDashboardProfilPath(this, null, L_DASHBOARD_PROFIL__L_DASHBOARD_PROFIL_DASHBOARD_ID_FKEY.inverseKey)
        }

        return _lDashboardProfil
    }

    val lDashboardProfil: LDashboardProfilPath
        get(): LDashboardProfilPath = lDashboardProfil()
    override fun `as`(alias: String): Dashboard = Dashboard(DSL.name(alias), this)
    override fun `as`(alias: Name): Dashboard = Dashboard(alias, this)
    override fun `as`(alias: Table<*>): Dashboard = Dashboard(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Dashboard = Dashboard(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Dashboard = Dashboard(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Dashboard = Dashboard(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Dashboard = Dashboard(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Dashboard = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Dashboard = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Dashboard = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Dashboard = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Dashboard = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Dashboard = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Dashboard = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Dashboard = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Dashboard = where(DSL.notExists(select))
}
