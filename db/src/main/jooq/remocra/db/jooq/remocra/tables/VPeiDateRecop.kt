/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class VPeiDateRecop(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view(
        """
    create view "v_pei_date_recop" as  WITH last_visites AS (
            SELECT visite.visite_pei_id AS pei_id,
               max(
                   CASE
                       WHEN (visite.visite_type_visite = 'RECOP'::"TYPE_VISITE") THEN visite.visite_date
                       WHEN (visite.visite_type_visite = 'RECO_INIT'::"TYPE_VISITE") THEN visite.visite_date
                       ELSE NULL::timestamp with time zone
                   END) AS max_date
              FROM visite
             WHERE (visite.visite_type_visite = ANY (ARRAY['RECOP'::"TYPE_VISITE", 'RECO_INIT'::"TYPE_VISITE"]))
             GROUP BY visite.visite_pei_id
           ), param_values AS (
            SELECT 'PUBLIC'::text AS nature_deci_code,
               (parametre.parametre_valeur)::integer AS delta_days
              FROM parametre
             WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_RECO_PUBLIC'::text)
           UNION ALL
            SELECT 'PRIVE'::text AS nature_deci_code,
               (parametre.parametre_valeur)::integer AS delta_days
              FROM parametre
             WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_RECO_PRIVE'::text)
           UNION ALL
            SELECT 'PUBLIC_CONVENTIONNE'::text AS nature_deci_code,
               (parametre.parametre_valeur)::integer AS delta_days
              FROM parametre
             WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_RECO_PUBLIC_CONVENTIONNE'::text)
           UNION ALL
            SELECT 'PRIVE_CONVENTIONNE'::text AS nature_deci_code,
               (parametre.parametre_valeur)::integer AS delta_days
              FROM parametre
             WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_RECO_PRIVE_CONVENTIONNE'::text)
           )
    SELECT pei.pei_id,
       last_visites.max_date AS pei_last_recop,
       (last_visites.max_date + ((p.delta_days || ' day'::text))::interval) AS pei_next_recop
      FROM (((pei
        LEFT JOIN last_visites ON ((pei.pei_id = last_visites.pei_id)))
        JOIN nature_deci nd ON ((pei.pei_nature_deci_id = nd.nature_deci_id)))
        JOIN param_values p ON (((nd.nature_deci_code)::text = p.nature_deci_code)));
    """,
    ),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.v_pei_date_recop</code>
         */
        val V_PEI_DATE_RECOP: VPeiDateRecop = VPeiDateRecop()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.v_pei_date_recop.pei_id</code>.
     */
    val PEI_ID: TableField<Record, UUID?> = createField(DSL.name("pei_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.v_pei_date_recop.pei_last_recop</code>.
     */
    val PEI_LAST_RECOP: TableField<Record, ZonedDateTime?> = createField(DSL.name("pei_last_recop"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.v_pei_date_recop.pei_next_recop</code>.
     */
    val PEI_NEXT_RECOP: TableField<Record, ZonedDateTime?> = createField(DSL.name("pei_next_recop"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.v_pei_date_recop</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.v_pei_date_recop</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.v_pei_date_recop</code> table reference
     */
    constructor() : this(DSL.name("v_pei_date_recop"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun `as`(alias: String): VPeiDateRecop = VPeiDateRecop(DSL.name(alias), this)
    override fun `as`(alias: Name): VPeiDateRecop = VPeiDateRecop(alias, this)
    override fun `as`(alias: Table<*>): VPeiDateRecop = VPeiDateRecop(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VPeiDateRecop = VPeiDateRecop(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VPeiDateRecop = VPeiDateRecop(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VPeiDateRecop = VPeiDateRecop(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VPeiDateRecop = VPeiDateRecop(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VPeiDateRecop = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VPeiDateRecop = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VPeiDateRecop = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VPeiDateRecop = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VPeiDateRecop = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VPeiDateRecop = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VPeiDateRecop = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VPeiDateRecop = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VPeiDateRecop = where(DSL.notExists(select))
}
