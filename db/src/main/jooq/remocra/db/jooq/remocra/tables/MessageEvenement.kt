/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.MESSAGE_EVENEMENT_PKEY
import remocra.db.jooq.remocra.keys.MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_EVENEMENT_ID_FKEY
import remocra.db.jooq.remocra.keys.MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_UTILISATEUR_ID_FKEY
import remocra.db.jooq.remocra.tables.Evenement.EvenementPath
import remocra.db.jooq.remocra.tables.Utilisateur.UtilisateurPath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class MessageEvenement(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.message_evenement</code>
         */
        val MESSAGE_EVENEMENT: MessageEvenement = MessageEvenement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.message_evenement.message_id</code>.
     */
    val MESSAGE_ID: TableField<Record, UUID?> = createField(DSL.name("message_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.message_evenement.message_date_constat</code>.
     */
    val MESSAGE_DATE_CONSTAT: TableField<Record, ZonedDateTime?> = createField(DSL.name("message_date_constat"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.message_evenement.message_objet</code>.
     */
    val MESSAGE_OBJET: TableField<Record, String?> = createField(DSL.name("message_objet"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.message_evenement.message_description</code>.
     */
    val MESSAGE_DESCRIPTION: TableField<Record, String?> = createField(DSL.name("message_description"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.message_evenement.message_origine</code>.
     */
    val MESSAGE_ORIGINE: TableField<Record, String?> = createField(DSL.name("message_origine"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.message_evenement.message_tag</code>.
     */
    val MESSAGE_TAG: TableField<Record, String?> = createField(DSL.name("message_tag"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.message_evenement.message_importance</code>.
     */
    val MESSAGE_IMPORTANCE: TableField<Record, Int?> = createField(DSL.name("message_importance"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.message_evenement.utilisateur_id</code>.
     */
    val UTILISATEUR_ID: TableField<Record, UUID?> = createField(DSL.name("utilisateur_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.message_evenement.evenement_id</code>.
     */
    val EVENEMENT_ID: TableField<Record, UUID?> = createField(DSL.name("evenement_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.message_evenement</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.message_evenement</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.message_evenement</code> table reference
     */
    constructor() : this(DSL.name("message_evenement"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MESSAGE_EVENEMENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class MessageEvenementPath : MessageEvenement, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): MessageEvenementPath = MessageEvenementPath(DSL.name(alias), this)
        override fun `as`(alias: Name): MessageEvenementPath = MessageEvenementPath(alias, this)
        override fun `as`(alias: Table<*>): MessageEvenementPath = MessageEvenementPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = MESSAGE_EVENEMENT_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_EVENEMENT_ID_FKEY, MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_UTILISATEUR_ID_FKEY)

    private lateinit var _evenement: EvenementPath

    /**
     * Get the implicit join path to the <code>remocra.evenement</code> table.
     */
    fun evenement(): EvenementPath {
        if (!this::_evenement.isInitialized) {
            _evenement = EvenementPath(this, MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_EVENEMENT_ID_FKEY, null)
        }

        return _evenement
    }

    val evenement: EvenementPath
        get(): EvenementPath = evenement()

    private lateinit var _utilisateur: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table.
     */
    fun utilisateur(): UtilisateurPath {
        if (!this::_utilisateur.isInitialized) {
            _utilisateur = UtilisateurPath(this, MESSAGE_EVENEMENT__MESSAGE_EVENEMENT_UTILISATEUR_ID_FKEY, null)
        }

        return _utilisateur
    }

    val utilisateur: UtilisateurPath
        get(): UtilisateurPath = utilisateur()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("message_evenement_message_importance_check"), "(((message_importance >= 0) AND (message_importance <= 5)))", true),
    )
    override fun `as`(alias: String): MessageEvenement = MessageEvenement(DSL.name(alias), this)
    override fun `as`(alias: Name): MessageEvenement = MessageEvenement(alias, this)
    override fun `as`(alias: Table<*>): MessageEvenement = MessageEvenement(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): MessageEvenement = MessageEvenement(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): MessageEvenement = MessageEvenement(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): MessageEvenement = MessageEvenement(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): MessageEvenement = MessageEvenement(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): MessageEvenement = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): MessageEvenement = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): MessageEvenement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): MessageEvenement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): MessageEvenement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): MessageEvenement = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): MessageEvenement = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): MessageEvenement = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): MessageEvenement = where(DSL.notExists(select))
}
