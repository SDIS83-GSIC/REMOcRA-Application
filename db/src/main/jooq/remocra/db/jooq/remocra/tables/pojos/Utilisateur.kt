/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class Utilisateur(
    val utilisateurId: UUID,
    val utilisateurActif: Boolean,
    val utilisateurEmail: String,
    val utilisateurNom: String,
    val utilisateurPrenom: String,
    val utilisateurUsername: String,
    val utilisateurTelephone: String?,
    val utilisateurCanBeNotified: Boolean?,
    val utilisateurProfilUtilisateurId: UUID?,
    val utilisateurOrganismeId: UUID?,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: Utilisateur = other as Utilisateur
        if (this.utilisateurId != o.utilisateurId) {
            return false
        }
        if (this.utilisateurActif != o.utilisateurActif) {
            return false
        }
        if (this.utilisateurEmail != o.utilisateurEmail) {
            return false
        }
        if (this.utilisateurNom != o.utilisateurNom) {
            return false
        }
        if (this.utilisateurPrenom != o.utilisateurPrenom) {
            return false
        }
        if (this.utilisateurUsername != o.utilisateurUsername) {
            return false
        }
        if (this.utilisateurTelephone == null) {
            if (o.utilisateurTelephone != null) {
                return false
            }
        } else if (this.utilisateurTelephone != o.utilisateurTelephone) {
            return false
        }
        if (this.utilisateurCanBeNotified == null) {
            if (o.utilisateurCanBeNotified != null) {
                return false
            }
        } else if (this.utilisateurCanBeNotified != o.utilisateurCanBeNotified) {
            return false
        }
        if (this.utilisateurProfilUtilisateurId == null) {
            if (o.utilisateurProfilUtilisateurId != null) {
                return false
            }
        } else if (this.utilisateurProfilUtilisateurId != o.utilisateurProfilUtilisateurId) {
            return false
        }
        if (this.utilisateurOrganismeId == null) {
            if (o.utilisateurOrganismeId != null) {
                return false
            }
        } else if (this.utilisateurOrganismeId != o.utilisateurOrganismeId) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.utilisateurId.hashCode()
        result = prime * result + this.utilisateurActif.hashCode()
        result = prime * result + this.utilisateurEmail.hashCode()
        result = prime * result + this.utilisateurNom.hashCode()
        result = prime * result + this.utilisateurPrenom.hashCode()
        result = prime * result + this.utilisateurUsername.hashCode()
        result = prime * result + (if (this.utilisateurTelephone == null) 0 else this.utilisateurTelephone.hashCode())
        result = prime * result + (if (this.utilisateurCanBeNotified == null) 0 else this.utilisateurCanBeNotified.hashCode())
        result = prime * result + (if (this.utilisateurProfilUtilisateurId == null) 0 else this.utilisateurProfilUtilisateurId.hashCode())
        result = prime * result + (if (this.utilisateurOrganismeId == null) 0 else this.utilisateurOrganismeId.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Utilisateur (")

        sb.append(utilisateurId)
        sb.append(", ").append(utilisateurActif)
        sb.append(", ").append(utilisateurEmail)
        sb.append(", ").append(utilisateurNom)
        sb.append(", ").append(utilisateurPrenom)
        sb.append(", ").append(utilisateurUsername)
        sb.append(", ").append(utilisateurTelephone)
        sb.append(", ").append(utilisateurCanBeNotified)
        sb.append(", ").append(utilisateurProfilUtilisateurId)
        sb.append(", ").append(utilisateurOrganismeId)

        sb.append(")")
        return sb.toString()
    }
}
