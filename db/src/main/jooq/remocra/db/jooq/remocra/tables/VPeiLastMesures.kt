/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import java.math.BigDecimal
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class VPeiLastMesures(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view(
        """
    create view "v_pei_last_mesures" as  WITH last_ctrl_debit_pression AS (
            SELECT visite_1.visite_pei_id AS pei_id,
               max(visite_1.visite_date) AS date
              FROM (visite visite_1
                JOIN visite_ctrl_debit_pression vcdp ON ((vcdp.visite_ctrl_debit_pression_visite_id = visite_1.visite_id)))
             GROUP BY visite_1.visite_pei_id
           )
    SELECT last_ctrl_debit_pression.pei_id,
       visite_ctrl_debit_pression.visite_ctrl_debit_pression_debit AS debit,
       visite_ctrl_debit_pression.visite_ctrl_debit_pression_pression AS pression,
       visite_ctrl_debit_pression.visite_ctrl_debit_pression_pression_dyn AS pression_dyn
      FROM ((last_ctrl_debit_pression
        JOIN visite ON (((visite.visite_pei_id = last_ctrl_debit_pression.pei_id) AND (visite.visite_date = last_ctrl_debit_pression.date))))
        JOIN visite_ctrl_debit_pression ON ((visite_ctrl_debit_pression.visite_ctrl_debit_pression_visite_id = visite.visite_id)));
    """,
    ),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.v_pei_last_mesures</code>
         */
        val V_PEI_LAST_MESURES: VPeiLastMesures = VPeiLastMesures()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.v_pei_last_mesures.pei_id</code>.
     */
    val PEI_ID: TableField<Record, UUID?> = createField(DSL.name("pei_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.v_pei_last_mesures.debit</code>.
     */
    val DEBIT: TableField<Record, Int?> = createField(DSL.name("debit"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.v_pei_last_mesures.pression</code>.
     */
    val PRESSION: TableField<Record, BigDecimal?> = createField(DSL.name("pression"), SQLDataType.NUMERIC(5, 2), this, "")

    /**
     * The column <code>remocra.v_pei_last_mesures.pression_dyn</code>.
     */
    val PRESSION_DYN: TableField<Record, BigDecimal?> = createField(DSL.name("pression_dyn"), SQLDataType.NUMERIC(5, 2), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.v_pei_last_mesures</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.v_pei_last_mesures</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.v_pei_last_mesures</code> table reference
     */
    constructor() : this(DSL.name("v_pei_last_mesures"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun `as`(alias: String): VPeiLastMesures = VPeiLastMesures(DSL.name(alias), this)
    override fun `as`(alias: Name): VPeiLastMesures = VPeiLastMesures(alias, this)
    override fun `as`(alias: Table<*>): VPeiLastMesures = VPeiLastMesures(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VPeiLastMesures = VPeiLastMesures(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VPeiLastMesures = VPeiLastMesures(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VPeiLastMesures = VPeiLastMesures(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VPeiLastMesures = VPeiLastMesures(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VPeiLastMesures = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VPeiLastMesures = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VPeiLastMesures = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VPeiLastMesures = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VPeiLastMesures = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VPeiLastMesures = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VPeiLastMesures = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VPeiLastMesures = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VPeiLastMesures = where(DSL.notExists(select))
}
