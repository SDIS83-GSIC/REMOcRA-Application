/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class VPeiVisiteDate(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view(
        """
    create view "v_pei_visite_date" as  WITH last_visites AS (
            SELECT visite.visite_pei_id AS pei_id,
               max(
                   CASE
                       WHEN (visite.visite_type_visite = 'RECEPTION'::"TYPE_VISITE") THEN visite.visite_date
                       ELSE NULL::timestamp with time zone
                   END) AS last_reception,
               max(
                   CASE
                       WHEN (visite.visite_type_visite = 'RECO_INIT'::"TYPE_VISITE") THEN visite.visite_date
                       ELSE NULL::timestamp with time zone
                   END) AS last_reco_init,
               max(
                   CASE
                       WHEN (visite.visite_type_visite = 'CTP'::"TYPE_VISITE") THEN visite.visite_date
                       ELSE NULL::timestamp with time zone
                   END) AS last_ctp,
               max(
                   CASE
                       WHEN (visite.visite_type_visite = 'ROP'::"TYPE_VISITE") THEN visite.visite_date
                       ELSE NULL::timestamp with time zone
                   END) AS last_recop,
               max(
                   CASE
                       WHEN (visite.visite_type_visite = 'NP'::"TYPE_VISITE") THEN visite.visite_date
                       ELSE NULL::timestamp with time zone
                   END) AS last_np
              FROM visite
             GROUP BY visite.visite_pei_id
           ), param_values AS (
            SELECT nd_1.nature_deci_code,
                   CASE
                       WHEN ((nd_1.nature_deci_code)::text = 'PRIVE'::text) THEN ( SELECT (parametre.parametre_valeur)::integer AS parametre_valeur
                          FROM parametre
                         WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_RECO_PRIVE'::text))
                       WHEN (((nd_1.nature_deci_code)::text = 'PUBLIC'::text) OR ((nd_1.nature_deci_code)::text = 'CONVENTIONNE'::text)) THEN ( SELECT (parametre.parametre_valeur)::integer AS parametre_valeur
                          FROM parametre
                         WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_RECO_PUBLIC'::text))
                       ELSE NULL::integer
                   END AS delta_days_reco,
                   CASE
                       WHEN ((nd_1.nature_deci_code)::text = 'PRIVE'::text) THEN ( SELECT (parametre.parametre_valeur)::integer AS parametre_valeur
                          FROM parametre
                         WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_CTRL_PRIVE'::text))
                       WHEN (((nd_1.nature_deci_code)::text = 'PUBLIC'::text) OR ((nd_1.nature_deci_code)::text = 'CONVENTIONNE'::text)) THEN ( SELECT (parametre.parametre_valeur)::integer AS parametre_valeur
                          FROM parametre
                         WHERE (parametre.parametre_code = 'PEI_RENOUVELLEMENT_CTRL_PUBLIC'::text))
                       ELSE NULL::integer
                   END AS delta_days_ctp
              FROM nature_deci nd_1
           )
    SELECT pei.pei_id,
       last_visites.last_reception,
       last_visites.last_reco_init,
       last_visites.last_ctp,
       last_visites.last_recop AS last_rop,
       last_visites.last_np,
       (COALESCE(last_visites.last_recop, last_visites.last_reco_init) + ((p.delta_days_reco || ' day'::text))::interval) AS pei_next_rop,
       (last_visites.last_ctp + ((p.delta_days_ctp || ' day'::text))::interval) AS pei_next_ctp
      FROM (((pei
        LEFT JOIN last_visites ON ((pei.pei_id = last_visites.pei_id)))
        JOIN nature_deci nd ON ((pei.pei_nature_deci_id = nd.nature_deci_id)))
        JOIN param_values p ON (((nd.nature_deci_code)::text = (p.nature_deci_code)::text)));
    """,
    ),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.v_pei_visite_date</code>
         */
        val V_PEI_VISITE_DATE: VPeiVisiteDate = VPeiVisiteDate()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.v_pei_visite_date.pei_id</code>.
     */
    val PEI_ID: TableField<Record, UUID?> = createField(DSL.name("pei_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.v_pei_visite_date.last_reception</code>.
     */
    val LAST_RECEPTION: TableField<Record, ZonedDateTime?> = createField(DSL.name("last_reception"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.v_pei_visite_date.last_reco_init</code>.
     */
    val LAST_RECO_INIT: TableField<Record, ZonedDateTime?> = createField(DSL.name("last_reco_init"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.v_pei_visite_date.last_ctp</code>.
     */
    val LAST_CTP: TableField<Record, ZonedDateTime?> = createField(DSL.name("last_ctp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.v_pei_visite_date.last_rop</code>.
     */
    val LAST_ROP: TableField<Record, ZonedDateTime?> = createField(DSL.name("last_rop"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.v_pei_visite_date.last_np</code>.
     */
    val LAST_NP: TableField<Record, ZonedDateTime?> = createField(DSL.name("last_np"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.v_pei_visite_date.pei_next_rop</code>.
     */
    val PEI_NEXT_ROP: TableField<Record, ZonedDateTime?> = createField(DSL.name("pei_next_rop"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.v_pei_visite_date.pei_next_ctp</code>.
     */
    val PEI_NEXT_CTP: TableField<Record, ZonedDateTime?> = createField(DSL.name("pei_next_ctp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.v_pei_visite_date</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.v_pei_visite_date</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.v_pei_visite_date</code> table reference
     */
    constructor() : this(DSL.name("v_pei_visite_date"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun `as`(alias: String): VPeiVisiteDate = VPeiVisiteDate(DSL.name(alias), this)
    override fun `as`(alias: Name): VPeiVisiteDate = VPeiVisiteDate(alias, this)
    override fun `as`(alias: Table<*>): VPeiVisiteDate = VPeiVisiteDate(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VPeiVisiteDate = VPeiVisiteDate(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VPeiVisiteDate = VPeiVisiteDate(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VPeiVisiteDate = VPeiVisiteDate(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VPeiVisiteDate = VPeiVisiteDate(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VPeiVisiteDate = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VPeiVisiteDate = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VPeiVisiteDate = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VPeiVisiteDate = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VPeiVisiteDate = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VPeiVisiteDate = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VPeiVisiteDate = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VPeiVisiteDate = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VPeiVisiteDate = where(DSL.notExists(select))
}
