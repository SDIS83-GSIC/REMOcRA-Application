/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.EtatSignalement
import remocra.db.jooq.remocra.indexes.SIGNALEMENT_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.L_SIGNALEMENT_DOCUMENT__L_SIGNALEMENT_DOCUMENT_SIGNALEMENT_ID_FKEY
import remocra.db.jooq.remocra.keys.SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SIGNALEMENT_ID_FKEY
import remocra.db.jooq.remocra.keys.SIGNALEMENT_PKEY
import remocra.db.jooq.remocra.keys.SIGNALEMENT__SIGNALEMENT_SIGNALEMENT_UTILISATEUR_FKEY
import remocra.db.jooq.remocra.tables.Document.DocumentPath
import remocra.db.jooq.remocra.tables.LSignalementDocument.LSignalementDocumentPath
import remocra.db.jooq.remocra.tables.SignalementElement.SignalementElementPath
import remocra.db.jooq.remocra.tables.Utilisateur.UtilisateurPath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Signalement(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.signalement</code>
         */
        val SIGNALEMENT: Signalement = Signalement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.signalement.signalement_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("signalement_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.signalement.signalement_description</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("signalement_description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.signalement.signalement_utilisateur</code>.
     */
    val UTILISATEUR: TableField<Record, UUID?> = createField(DSL.name("signalement_utilisateur"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.signalement.signalement_date_constat</code>.
     */
    val DATE_CONSTAT: TableField<Record, ZonedDateTime?> = createField(DSL.name("signalement_date_constat"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column
     * <code>remocra.signalement.signalement_date_modification</code>.
     */
    val DATE_MODIFICATION: TableField<Record, ZonedDateTime?> = createField(DSL.name("signalement_date_modification"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.signalement.signalement_type</code>.
     */
    val TYPE: TableField<Record, EtatSignalement?> = createField(DSL.name("signalement_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(EtatSignalement::class.java), this, "")

    /**
     * The column <code>remocra.signalement.signalement_geometrie</code>.
     * Centroïde de toutes les géométries des signalements
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("signalement_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "Centroïde de toutes les géométries des signalements", GeometryBinding())

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.signalement</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.signalement</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.signalement</code> table reference
     */
    constructor() : this(DSL.name("signalement"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, SIGNALEMENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class SignalementPath : Signalement, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): SignalementPath = SignalementPath(DSL.name(alias), this)
        override fun `as`(alias: Name): SignalementPath = SignalementPath(alias, this)
        override fun `as`(alias: Table<*>): SignalementPath = SignalementPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(SIGNALEMENT_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = SIGNALEMENT_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(SIGNALEMENT__SIGNALEMENT_SIGNALEMENT_UTILISATEUR_FKEY)

    private lateinit var _utilisateur: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table.
     */
    fun utilisateur(): UtilisateurPath {
        if (!this::_utilisateur.isInitialized) {
            _utilisateur = UtilisateurPath(this, SIGNALEMENT__SIGNALEMENT_SIGNALEMENT_UTILISATEUR_FKEY, null)
        }

        return _utilisateur
    }

    val utilisateur: UtilisateurPath
        get(): UtilisateurPath = utilisateur()

    private lateinit var _lSignalementDocument: LSignalementDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_signalement_document</code> table
     */
    fun lSignalementDocument(): LSignalementDocumentPath {
        if (!this::_lSignalementDocument.isInitialized) {
            _lSignalementDocument = LSignalementDocumentPath(this, null, L_SIGNALEMENT_DOCUMENT__L_SIGNALEMENT_DOCUMENT_SIGNALEMENT_ID_FKEY.inverseKey)
        }

        return _lSignalementDocument
    }

    val lSignalementDocument: LSignalementDocumentPath
        get(): LSignalementDocumentPath = lSignalementDocument()

    private lateinit var _signalementElement: SignalementElementPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.signalement_element</code> table
     */
    fun signalementElement(): SignalementElementPath {
        if (!this::_signalementElement.isInitialized) {
            _signalementElement = SignalementElementPath(this, null, SIGNALEMENT_ELEMENT__SIGNALEMENT_ELEMENT_SIGNALEMENT_ELEMENT_SIGNALEMENT_ID_FKEY.inverseKey)
        }

        return _signalementElement
    }

    val signalementElement: SignalementElementPath
        get(): SignalementElementPath = signalementElement()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.document</code> table
     */
    val document: DocumentPath
        get(): DocumentPath = lSignalementDocument().document()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_signalement"), "((geometrytype(signalement_geometrie) = 'POINT'::text))", true),
    )
    override fun `as`(alias: String): Signalement = Signalement(DSL.name(alias), this)
    override fun `as`(alias: Name): Signalement = Signalement(alias, this)
    override fun `as`(alias: Table<*>): Signalement = Signalement(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Signalement = Signalement(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Signalement = Signalement(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Signalement = Signalement(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Signalement = Signalement(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Signalement = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Signalement = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Signalement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Signalement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Signalement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Signalement = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Signalement = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Signalement = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Signalement = where(DSL.notExists(select))
}
