/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.indexes.PERMIS_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.L_PERMIS_CADASTRE_PARCELLE__L_PERMIS_CADASTRE_PARCELLE_PERMIS_ID_FKEY
import remocra.db.jooq.remocra.keys.L_PERMIS_DOCUMENT__L_PERMIS_DOCUMENT_PERMIS_ID_FKEY
import remocra.db.jooq.remocra.keys.PERMIS_PKEY
import remocra.db.jooq.remocra.keys.PERMIS__PERMIS_PERMIS_COMMUNE_ID_FKEY
import remocra.db.jooq.remocra.keys.PERMIS__PERMIS_PERMIS_INSTRUCTEUR_ID_FKEY
import remocra.db.jooq.remocra.keys.PERMIS__PERMIS_PERMIS_SERVICE_INSTRUCTEUR_ID_FKEY
import remocra.db.jooq.remocra.keys.PERMIS__PERMIS_PERMIS_TYPE_PERMIS_AVIS_ID_FKEY
import remocra.db.jooq.remocra.keys.PERMIS__PERMIS_PERMIS_TYPE_PERMIS_INTERSERVICE_ID_FKEY
import remocra.db.jooq.remocra.keys.PERMIS__PERMIS_PERMIS_VOIE_ID_FKEY
import remocra.db.jooq.remocra.tables.CadastreParcelle.CadastreParcellePath
import remocra.db.jooq.remocra.tables.Commune.CommunePath
import remocra.db.jooq.remocra.tables.Document.DocumentPath
import remocra.db.jooq.remocra.tables.LPermisCadastreParcelle.LPermisCadastreParcellePath
import remocra.db.jooq.remocra.tables.LPermisDocument.LPermisDocumentPath
import remocra.db.jooq.remocra.tables.TypeOrganisme.TypeOrganismePath
import remocra.db.jooq.remocra.tables.TypePermisAvis.TypePermisAvisPath
import remocra.db.jooq.remocra.tables.TypePermisInterservice.TypePermisInterservicePath
import remocra.db.jooq.remocra.tables.Utilisateur.UtilisateurPath
import remocra.db.jooq.remocra.tables.Voie.VoiePath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Permis(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.permis</code>
         */
        val PERMIS: Permis = Permis()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.permis.permis_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("permis_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("permis_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_numero</code>.
     */
    val NUMERO: TableField<Record, String?> = createField(DSL.name("permis_numero"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_instructeur_id</code>. Utilisateur
     * dépositaire de la demande de permis
     */
    val INSTRUCTEUR_ID: TableField<Record, UUID?> = createField(DSL.name("permis_instructeur_id"), SQLDataType.UUID.nullable(false), this, "Utilisateur dépositaire de la demande de permis")

    /**
     * The column <code>remocra.permis.permis_service_instructeur_id</code>.
     */
    val SERVICE_INSTRUCTEUR_ID: TableField<Record, UUID?> = createField(DSL.name("permis_service_instructeur_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.permis.permis_type_permis_interservice_id</code>.
     */
    val TYPE_PERMIS_INTERSERVICE_ID: TableField<Record, UUID?> = createField(DSL.name("permis_type_permis_interservice_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_type_permis_avis_id</code>.
     */
    val TYPE_PERMIS_AVIS_ID: TableField<Record, UUID?> = createField(DSL.name("permis_type_permis_avis_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_ri_receptionnee</code>.
     */
    val RI_RECEPTIONNEE: TableField<Record, Boolean?> = createField(DSL.name("permis_ri_receptionnee"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_dossier_ri_valide</code>.
     */
    val DOSSIER_RI_VALIDE: TableField<Record, Boolean?> = createField(DSL.name("permis_dossier_ri_valide"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_observations</code>.
     */
    val OBSERVATIONS: TableField<Record, String?> = createField(DSL.name("permis_observations"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.permis.permis_voie_text</code>.
     */
    val VOIE_TEXT: TableField<Record, String?> = createField(DSL.name("permis_voie_text"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.permis.permis_voie_id</code>.
     */
    val VOIE_ID: TableField<Record, UUID?> = createField(DSL.name("permis_voie_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.permis.permis_complement</code>.
     */
    val COMPLEMENT: TableField<Record, String?> = createField(DSL.name("permis_complement"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.permis.permis_commune_id</code>.
     */
    val COMMUNE_ID: TableField<Record, UUID?> = createField(DSL.name("permis_commune_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_annee</code>.
     */
    val ANNEE: TableField<Record, Int?> = createField(DSL.name("permis_annee"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>remocra.permis.permis_date_permis</code>.
     */
    val DATE_PERMIS: TableField<Record, ZonedDateTime?> = createField(DSL.name("permis_date_permis"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.permis.permis_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("permis_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.permis</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.permis</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.permis</code> table reference
     */
    constructor() : this(DSL.name("permis"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PERMIS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PermisPath : Permis, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): PermisPath = PermisPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PermisPath = PermisPath(alias, this)
        override fun `as`(alias: Table<*>): PermisPath = PermisPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(PERMIS_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = PERMIS_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(PERMIS__PERMIS_PERMIS_COMMUNE_ID_FKEY, PERMIS__PERMIS_PERMIS_INSTRUCTEUR_ID_FKEY, PERMIS__PERMIS_PERMIS_SERVICE_INSTRUCTEUR_ID_FKEY, PERMIS__PERMIS_PERMIS_TYPE_PERMIS_AVIS_ID_FKEY, PERMIS__PERMIS_PERMIS_TYPE_PERMIS_INTERSERVICE_ID_FKEY, PERMIS__PERMIS_PERMIS_VOIE_ID_FKEY)

    private lateinit var _commune: CommunePath

    /**
     * Get the implicit join path to the <code>remocra.commune</code> table.
     */
    fun commune(): CommunePath {
        if (!this::_commune.isInitialized) {
            _commune = CommunePath(this, PERMIS__PERMIS_PERMIS_COMMUNE_ID_FKEY, null)
        }

        return _commune
    }

    val commune: CommunePath
        get(): CommunePath = commune()

    private lateinit var _utilisateur: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table.
     */
    fun utilisateur(): UtilisateurPath {
        if (!this::_utilisateur.isInitialized) {
            _utilisateur = UtilisateurPath(this, PERMIS__PERMIS_PERMIS_INSTRUCTEUR_ID_FKEY, null)
        }

        return _utilisateur
    }

    val utilisateur: UtilisateurPath
        get(): UtilisateurPath = utilisateur()

    private lateinit var _typeOrganisme: TypeOrganismePath

    /**
     * Get the implicit join path to the <code>remocra.type_organisme</code>
     * table.
     */
    fun typeOrganisme(): TypeOrganismePath {
        if (!this::_typeOrganisme.isInitialized) {
            _typeOrganisme = TypeOrganismePath(this, PERMIS__PERMIS_PERMIS_SERVICE_INSTRUCTEUR_ID_FKEY, null)
        }

        return _typeOrganisme
    }

    val typeOrganisme: TypeOrganismePath
        get(): TypeOrganismePath = typeOrganisme()

    private lateinit var _typePermisAvis: TypePermisAvisPath

    /**
     * Get the implicit join path to the <code>remocra.type_permis_avis</code>
     * table.
     */
    fun typePermisAvis(): TypePermisAvisPath {
        if (!this::_typePermisAvis.isInitialized) {
            _typePermisAvis = TypePermisAvisPath(this, PERMIS__PERMIS_PERMIS_TYPE_PERMIS_AVIS_ID_FKEY, null)
        }

        return _typePermisAvis
    }

    val typePermisAvis: TypePermisAvisPath
        get(): TypePermisAvisPath = typePermisAvis()

    private lateinit var _typePermisInterservice: TypePermisInterservicePath

    /**
     * Get the implicit join path to the
     * <code>remocra.type_permis_interservice</code> table.
     */
    fun typePermisInterservice(): TypePermisInterservicePath {
        if (!this::_typePermisInterservice.isInitialized) {
            _typePermisInterservice = TypePermisInterservicePath(this, PERMIS__PERMIS_PERMIS_TYPE_PERMIS_INTERSERVICE_ID_FKEY, null)
        }

        return _typePermisInterservice
    }

    val typePermisInterservice: TypePermisInterservicePath
        get(): TypePermisInterservicePath = typePermisInterservice()

    private lateinit var _voie: VoiePath

    /**
     * Get the implicit join path to the <code>remocra.voie</code> table.
     */
    fun voie(): VoiePath {
        if (!this::_voie.isInitialized) {
            _voie = VoiePath(this, PERMIS__PERMIS_PERMIS_VOIE_ID_FKEY, null)
        }

        return _voie
    }

    val voie: VoiePath
        get(): VoiePath = voie()

    private lateinit var _lPermisCadastreParcelle: LPermisCadastreParcellePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_permis_cadastre_parcelle</code> table
     */
    fun lPermisCadastreParcelle(): LPermisCadastreParcellePath {
        if (!this::_lPermisCadastreParcelle.isInitialized) {
            _lPermisCadastreParcelle = LPermisCadastreParcellePath(this, null, L_PERMIS_CADASTRE_PARCELLE__L_PERMIS_CADASTRE_PARCELLE_PERMIS_ID_FKEY.inverseKey)
        }

        return _lPermisCadastreParcelle
    }

    val lPermisCadastreParcelle: LPermisCadastreParcellePath
        get(): LPermisCadastreParcellePath = lPermisCadastreParcelle()

    private lateinit var _lPermisDocument: LPermisDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_permis_document</code> table
     */
    fun lPermisDocument(): LPermisDocumentPath {
        if (!this::_lPermisDocument.isInitialized) {
            _lPermisDocument = LPermisDocumentPath(this, null, L_PERMIS_DOCUMENT__L_PERMIS_DOCUMENT_PERMIS_ID_FKEY.inverseKey)
        }

        return _lPermisDocument
    }

    val lPermisDocument: LPermisDocumentPath
        get(): LPermisDocumentPath = lPermisDocument()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.cadastre_parcelle</code> table
     */
    val cadastreParcelle: CadastreParcellePath
        get(): CadastreParcellePath = lPermisCadastreParcelle().cadastreParcelle()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.document</code> table
     */
    val document: DocumentPath
        get(): DocumentPath = lPermisDocument().document()
    override fun `as`(alias: String): Permis = Permis(DSL.name(alias), this)
    override fun `as`(alias: Name): Permis = Permis(alias, this)
    override fun `as`(alias: Table<*>): Permis = Permis(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Permis = Permis(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Permis = Permis(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Permis = Permis(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Permis = Permis(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Permis = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Permis = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Permis = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Permis = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Permis = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Permis = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Permis = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Permis = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Permis = where(DSL.notExists(select))
}
