/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.indexes.ADRESSE_ELEMENT_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.ADRESSE_ELEMENT_PKEY
import remocra.db.jooq.remocra.keys.ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_ADRESSE_ID_FKEY
import remocra.db.jooq.remocra.keys.ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_SOUS_TYPE_FKEY
import remocra.db.jooq.remocra.keys.L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE__L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE_ELEMENT_ID_FKEY
import remocra.db.jooq.remocra.tables.Adresse.AdressePath
import remocra.db.jooq.remocra.tables.AdresseSousTypeElement.AdresseSousTypeElementPath
import remocra.db.jooq.remocra.tables.AdresseTypeAnomalie.AdresseTypeAnomaliePath
import remocra.db.jooq.remocra.tables.LAdresseElementAdresseTypeAnomalie.LAdresseElementAdresseTypeAnomaliePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class AdresseElement(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.adresse_element</code>
         */
        val ADRESSE_ELEMENT: AdresseElement = AdresseElement()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.adresse_element.adresse_element_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("adresse_element_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.adresse_element.adresse_element_description</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("adresse_element_description"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>remocra.adresse_element.adresse_element_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("adresse_element_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    /**
     * The column
     * <code>remocra.adresse_element.adresse_element_sous_type</code>.
     */
    val SOUS_TYPE: TableField<Record, UUID?> = createField(DSL.name("adresse_element_sous_type"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.adresse_element.adresse_element_adresse_id</code>.
     */
    val ADRESSE_ID: TableField<Record, UUID?> = createField(DSL.name("adresse_element_adresse_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.adresse_element</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.adresse_element</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.adresse_element</code> table reference
     */
    constructor() : this(DSL.name("adresse_element"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ADRESSE_ELEMENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class AdresseElementPath : AdresseElement, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): AdresseElementPath = AdresseElementPath(DSL.name(alias), this)
        override fun `as`(alias: Name): AdresseElementPath = AdresseElementPath(alias, this)
        override fun `as`(alias: Table<*>): AdresseElementPath = AdresseElementPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(ADRESSE_ELEMENT_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = ADRESSE_ELEMENT_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_ADRESSE_ID_FKEY, ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_SOUS_TYPE_FKEY)

    private lateinit var _adresse: AdressePath

    /**
     * Get the implicit join path to the <code>remocra.adresse</code> table.
     */
    fun adresse(): AdressePath {
        if (!this::_adresse.isInitialized) {
            _adresse = AdressePath(this, ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_ADRESSE_ID_FKEY, null)
        }

        return _adresse
    }

    val adresse: AdressePath
        get(): AdressePath = adresse()

    private lateinit var _adresseSousTypeElement: AdresseSousTypeElementPath

    /**
     * Get the implicit join path to the
     * <code>remocra.adresse_sous_type_element</code> table.
     */
    fun adresseSousTypeElement(): AdresseSousTypeElementPath {
        if (!this::_adresseSousTypeElement.isInitialized) {
            _adresseSousTypeElement = AdresseSousTypeElementPath(this, ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_SOUS_TYPE_FKEY, null)
        }

        return _adresseSousTypeElement
    }

    val adresseSousTypeElement: AdresseSousTypeElementPath
        get(): AdresseSousTypeElementPath = adresseSousTypeElement()

    private lateinit var _lAdresseElementAdresseTypeAnomalie: LAdresseElementAdresseTypeAnomaliePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_adresse_element_adresse_type_anomalie</code> table
     */
    fun lAdresseElementAdresseTypeAnomalie(): LAdresseElementAdresseTypeAnomaliePath {
        if (!this::_lAdresseElementAdresseTypeAnomalie.isInitialized) {
            _lAdresseElementAdresseTypeAnomalie = LAdresseElementAdresseTypeAnomaliePath(this, null, L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE__L_ADRESSE_ELEMENT_ADRESSE_TYPE_ANOMALIE_ELEMENT_ID_FKEY.inverseKey)
        }

        return _lAdresseElementAdresseTypeAnomalie
    }

    val lAdresseElementAdresseTypeAnomalie: LAdresseElementAdresseTypeAnomaliePath
        get(): LAdresseElementAdresseTypeAnomaliePath = lAdresseElementAdresseTypeAnomalie()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.adresse_type_anomalie</code> table
     */
    val adresseTypeAnomalie: AdresseTypeAnomaliePath
        get(): AdresseTypeAnomaliePath = lAdresseElementAdresseTypeAnomalie().adresseTypeAnomalie()
    override fun `as`(alias: String): AdresseElement = AdresseElement(DSL.name(alias), this)
    override fun `as`(alias: Name): AdresseElement = AdresseElement(alias, this)
    override fun `as`(alias: Table<*>): AdresseElement = AdresseElement(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AdresseElement = AdresseElement(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AdresseElement = AdresseElement(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): AdresseElement = AdresseElement(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): AdresseElement = AdresseElement(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): AdresseElement = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): AdresseElement = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): AdresseElement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): AdresseElement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): AdresseElement = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): AdresseElement = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): AdresseElement = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): AdresseElement = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): AdresseElement = where(DSL.notExists(select))
}
