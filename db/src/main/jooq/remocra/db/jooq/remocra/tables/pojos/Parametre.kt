/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import remocra.db.jooq.remocra.enums.TypeParametre
import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class Parametre(
    val parametreId: UUID,
    val parametreCode: String,
    val parametreValeur: String?,
    val parametreType: TypeParametre,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: Parametre = other as Parametre
        if (this.parametreId != o.parametreId) {
            return false
        }
        if (this.parametreCode != o.parametreCode) {
            return false
        }
        if (this.parametreValeur == null) {
            if (o.parametreValeur != null) {
                return false
            }
        } else if (this.parametreValeur != o.parametreValeur) {
            return false
        }
        if (this.parametreType != o.parametreType) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.parametreId.hashCode()
        result = prime * result + this.parametreCode.hashCode()
        result = prime * result + (if (this.parametreValeur == null) 0 else this.parametreValeur.hashCode())
        result = prime * result + this.parametreType.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Parametre (")

        sb.append(parametreId)
        sb.append(", ").append(parametreCode)
        sb.append(", ").append(parametreValeur)
        sb.append(", ").append(parametreType)

        sb.append(")")
        return sb.toString()
    }
}
