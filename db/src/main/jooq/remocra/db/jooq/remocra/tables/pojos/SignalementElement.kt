/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import org.locationtech.jts.geom.Geometry
import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class SignalementElement(
    val signalementElementId: UUID,
    val signalementElementDescription: String?,
    val signalementElementGeometrie: Geometry,
    val signalementElementSousType: UUID,
    val signalementElementSignalementId: UUID,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: SignalementElement = other as SignalementElement
        if (this.signalementElementId != o.signalementElementId) {
            return false
        }
        if (this.signalementElementDescription == null) {
            if (o.signalementElementDescription != null) {
                return false
            }
        } else if (this.signalementElementDescription != o.signalementElementDescription) {
            return false
        }
        if (this.signalementElementGeometrie != o.signalementElementGeometrie) {
            return false
        }
        if (this.signalementElementSousType != o.signalementElementSousType) {
            return false
        }
        if (this.signalementElementSignalementId != o.signalementElementSignalementId) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.signalementElementId.hashCode()
        result = prime * result + (if (this.signalementElementDescription == null) 0 else this.signalementElementDescription.hashCode())
        result = prime * result + this.signalementElementGeometrie.hashCode()
        result = prime * result + this.signalementElementSousType.hashCode()
        result = prime * result + this.signalementElementSignalementId.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("SignalementElement (")

        sb.append(signalementElementId)
        sb.append(", ").append(signalementElementDescription)
        sb.append(", ").append(signalementElementGeometrie)
        sb.append(", ").append(signalementElementSousType)
        sb.append(", ").append(signalementElementSignalementId)

        sb.append(")")
        return sb.toString()
    }
}
