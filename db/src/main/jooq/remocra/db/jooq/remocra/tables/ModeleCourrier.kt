/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.TypeModule
import remocra.db.jooq.remocra.keys.L_MODELE_COURRIER_DOCUMENT__L_MODELE_COURRIER_DOCUMENT_MODELE_COURRIER_ID_FKEY
import remocra.db.jooq.remocra.keys.L_MODELE_COURRIER_PROFIL_DROIT__L_MODELE_COURRIER_PROFIL_DROIT_MODELE_COURRIER_ID_FKEY
import remocra.db.jooq.remocra.keys.MODELE_COURRIER_MODELE_COURRIER_CODE_KEY
import remocra.db.jooq.remocra.keys.MODELE_COURRIER_PARAMETRE__MODELE_COURRIER_PARAMETRE_MODELE_COURRIER_PARAMETRE_MODELE_FKEY
import remocra.db.jooq.remocra.keys.MODELE_COURRIER_PKEY
import remocra.db.jooq.remocra.tables.Document.DocumentPath
import remocra.db.jooq.remocra.tables.LModeleCourrierDocument.LModeleCourrierDocumentPath
import remocra.db.jooq.remocra.tables.LModeleCourrierProfilDroit.LModeleCourrierProfilDroitPath
import remocra.db.jooq.remocra.tables.ModeleCourrierParametre.ModeleCourrierParametrePath
import remocra.db.jooq.remocra.tables.ProfilDroit.ProfilDroitPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class ModeleCourrier(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.modele_courrier</code>
         */
        val MODELE_COURRIER: ModeleCourrier = ModeleCourrier()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.modele_courrier.modele_courrier_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("modele_courrier_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.modele_courrier.modele_courrier_actif</code>.
     */
    val ACTIF: TableField<Record, Boolean?> = createField(DSL.name("modele_courrier_actif"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>remocra.modele_courrier.modele_courrier_code</code>.
     */
    val CODE: TableField<Record, String?> = createField(DSL.name("modele_courrier_code"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.modele_courrier.modele_courrier_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("modele_courrier_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.modele_courrier.modele_courrier_protected</code>.
     */
    val PROTECTED: TableField<Record, Boolean?> = createField(DSL.name("modele_courrier_protected"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.modele_courrier.modele_courrier_description</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("modele_courrier_description"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>remocra.modele_courrier.modele_courrier_source_sql</code>.
     */
    val SOURCE_SQL: TableField<Record, String?> = createField(DSL.name("modele_courrier_source_sql"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.modele_courrier.modele_courrier_module</code>.
     */
    val MODULE: TableField<Record, TypeModule?> = createField(DSL.name("modele_courrier_module"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(TypeModule::class.java), this, "")

    /**
     * The column
     * <code>remocra.modele_courrier.modele_courrier_corps_email</code>.
     */
    val CORPS_EMAIL: TableField<Record, String?> = createField(DSL.name("modele_courrier_corps_email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.modele_courrier.modele_courrier_objet_email</code>.
     */
    val OBJET_EMAIL: TableField<Record, String?> = createField(DSL.name("modele_courrier_objet_email"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.modele_courrier</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.modele_courrier</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.modele_courrier</code> table reference
     */
    constructor() : this(DSL.name("modele_courrier"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, MODELE_COURRIER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ModeleCourrierPath : ModeleCourrier, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): ModeleCourrierPath = ModeleCourrierPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ModeleCourrierPath = ModeleCourrierPath(alias, this)
        override fun `as`(alias: Table<*>): ModeleCourrierPath = ModeleCourrierPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = MODELE_COURRIER_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(MODELE_COURRIER_MODELE_COURRIER_CODE_KEY)

    private lateinit var _lModeleCourrierDocument: LModeleCourrierDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_modele_courrier_document</code> table
     */
    fun lModeleCourrierDocument(): LModeleCourrierDocumentPath {
        if (!this::_lModeleCourrierDocument.isInitialized) {
            _lModeleCourrierDocument = LModeleCourrierDocumentPath(this, null, L_MODELE_COURRIER_DOCUMENT__L_MODELE_COURRIER_DOCUMENT_MODELE_COURRIER_ID_FKEY.inverseKey)
        }

        return _lModeleCourrierDocument
    }

    val lModeleCourrierDocument: LModeleCourrierDocumentPath
        get(): LModeleCourrierDocumentPath = lModeleCourrierDocument()

    private lateinit var _lModeleCourrierProfilDroit: LModeleCourrierProfilDroitPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_modele_courrier_profil_droit</code> table
     */
    fun lModeleCourrierProfilDroit(): LModeleCourrierProfilDroitPath {
        if (!this::_lModeleCourrierProfilDroit.isInitialized) {
            _lModeleCourrierProfilDroit = LModeleCourrierProfilDroitPath(this, null, L_MODELE_COURRIER_PROFIL_DROIT__L_MODELE_COURRIER_PROFIL_DROIT_MODELE_COURRIER_ID_FKEY.inverseKey)
        }

        return _lModeleCourrierProfilDroit
    }

    val lModeleCourrierProfilDroit: LModeleCourrierProfilDroitPath
        get(): LModeleCourrierProfilDroitPath = lModeleCourrierProfilDroit()

    private lateinit var _modeleCourrierParametre: ModeleCourrierParametrePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.modele_courrier_parametre</code> table
     */
    fun modeleCourrierParametre(): ModeleCourrierParametrePath {
        if (!this::_modeleCourrierParametre.isInitialized) {
            _modeleCourrierParametre = ModeleCourrierParametrePath(this, null, MODELE_COURRIER_PARAMETRE__MODELE_COURRIER_PARAMETRE_MODELE_COURRIER_PARAMETRE_MODELE_FKEY.inverseKey)
        }

        return _modeleCourrierParametre
    }

    val modeleCourrierParametre: ModeleCourrierParametrePath
        get(): ModeleCourrierParametrePath = modeleCourrierParametre()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.document</code> table
     */
    val document: DocumentPath
        get(): DocumentPath = lModeleCourrierDocument().document()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.profil_droit</code> table
     */
    val profilDroit: ProfilDroitPath
        get(): ProfilDroitPath = lModeleCourrierProfilDroit().profilDroit()
    override fun `as`(alias: String): ModeleCourrier = ModeleCourrier(DSL.name(alias), this)
    override fun `as`(alias: Name): ModeleCourrier = ModeleCourrier(alias, this)
    override fun `as`(alias: Table<*>): ModeleCourrier = ModeleCourrier(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ModeleCourrier = ModeleCourrier(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ModeleCourrier = ModeleCourrier(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ModeleCourrier = ModeleCourrier(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): ModeleCourrier = ModeleCourrier(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): ModeleCourrier = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): ModeleCourrier = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): ModeleCourrier = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): ModeleCourrier = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): ModeleCourrier = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): ModeleCourrier = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): ModeleCourrier = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): ModeleCourrier = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): ModeleCourrier = where(DSL.notExists(select))
}
