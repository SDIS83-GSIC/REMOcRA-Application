/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.EtatAdresse
import remocra.db.jooq.remocra.indexes.ADRESSE_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_ADRESSE_ID_FKEY
import remocra.db.jooq.remocra.keys.ADRESSE_PKEY
import remocra.db.jooq.remocra.keys.ADRESSE__ADRESSE_ADRESSE_UTILISATEUR_FKEY
import remocra.db.jooq.remocra.keys.L_ADRESSE_DOCUMENT__L_ADRESSE_DOCUMENT_ADRESSE_ID_FKEY
import remocra.db.jooq.remocra.tables.AdresseElement.AdresseElementPath
import remocra.db.jooq.remocra.tables.Document.DocumentPath
import remocra.db.jooq.remocra.tables.LAdresseDocument.LAdresseDocumentPath
import remocra.db.jooq.remocra.tables.Utilisateur.UtilisateurPath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Adresse(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.adresse</code>
         */
        val ADRESSE: Adresse = Adresse()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.adresse.adresse_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("adresse_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.adresse.adresse_description</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("adresse_description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.adresse.adresse_utilisateur</code>.
     */
    val UTILISATEUR: TableField<Record, UUID?> = createField(DSL.name("adresse_utilisateur"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.adresse.adresse_date_constat</code>.
     */
    val DATE_CONSTAT: TableField<Record, ZonedDateTime?> = createField(DSL.name("adresse_date_constat"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.adresse.adresse_date_modification</code>.
     */
    val DATE_MODIFICATION: TableField<Record, ZonedDateTime?> = createField(DSL.name("adresse_date_modification"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>remocra.adresse.adresse_type</code>.
     */
    val TYPE: TableField<Record, EtatAdresse?> = createField(DSL.name("adresse_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(EtatAdresse::class.java), this, "")

    /**
     * The column <code>remocra.adresse.adresse_geometrie</code>. Centroïde de
     * toutes les géométries des éléments de l'adresse
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("adresse_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "Centroïde de toutes les géométries des éléments de l'adresse", GeometryBinding())

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.adresse</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.adresse</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.adresse</code> table reference
     */
    constructor() : this(DSL.name("adresse"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ADRESSE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class AdressePath : Adresse, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): AdressePath = AdressePath(DSL.name(alias), this)
        override fun `as`(alias: Name): AdressePath = AdressePath(alias, this)
        override fun `as`(alias: Table<*>): AdressePath = AdressePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(ADRESSE_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = ADRESSE_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(ADRESSE__ADRESSE_ADRESSE_UTILISATEUR_FKEY)

    private lateinit var _utilisateur: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table.
     */
    fun utilisateur(): UtilisateurPath {
        if (!this::_utilisateur.isInitialized) {
            _utilisateur = UtilisateurPath(this, ADRESSE__ADRESSE_ADRESSE_UTILISATEUR_FKEY, null)
        }

        return _utilisateur
    }

    val utilisateur: UtilisateurPath
        get(): UtilisateurPath = utilisateur()

    private lateinit var _adresseElement: AdresseElementPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.adresse_element</code> table
     */
    fun adresseElement(): AdresseElementPath {
        if (!this::_adresseElement.isInitialized) {
            _adresseElement = AdresseElementPath(this, null, ADRESSE_ELEMENT__ADRESSE_ELEMENT_ADRESSE_ELEMENT_ADRESSE_ID_FKEY.inverseKey)
        }

        return _adresseElement
    }

    val adresseElement: AdresseElementPath
        get(): AdresseElementPath = adresseElement()

    private lateinit var _lAdresseDocument: LAdresseDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_adresse_document</code> table
     */
    fun lAdresseDocument(): LAdresseDocumentPath {
        if (!this::_lAdresseDocument.isInitialized) {
            _lAdresseDocument = LAdresseDocumentPath(this, null, L_ADRESSE_DOCUMENT__L_ADRESSE_DOCUMENT_ADRESSE_ID_FKEY.inverseKey)
        }

        return _lAdresseDocument
    }

    val lAdresseDocument: LAdresseDocumentPath
        get(): LAdresseDocumentPath = lAdresseDocument()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.document</code> table
     */
    val document: DocumentPath
        get(): DocumentPath = lAdresseDocument().document()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_adresse"), "((geometrytype(adresse_geometrie) = 'POINT'::text))", true),
    )
    override fun `as`(alias: String): Adresse = Adresse(DSL.name(alias), this)
    override fun `as`(alias: Name): Adresse = Adresse(alias, this)
    override fun `as`(alias: Table<*>): Adresse = Adresse(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Adresse = Adresse(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Adresse = Adresse(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Adresse = Adresse(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Adresse = Adresse(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Adresse = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Adresse = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Adresse = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Adresse = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Adresse = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Adresse = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Adresse = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Adresse = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Adresse = where(DSL.notExists(select))
}
