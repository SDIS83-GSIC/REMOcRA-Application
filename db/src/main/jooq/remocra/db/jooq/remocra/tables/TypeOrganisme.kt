/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.DroitApi
import remocra.db.jooq.remocra.keys.ORGANISME__ORGANISME_ORGANISME_TYPE_ORGANISME_ID_FKEY
import remocra.db.jooq.remocra.keys.PERMIS__PERMIS_PERMIS_SERVICE_INSTRUCTEUR_ID_FKEY
import remocra.db.jooq.remocra.keys.PROFIL_ORGANISME__PROFIL_ORGANISME_PROFIL_ORGANISME_TYPE_ORGANISME_ID_FKEY
import remocra.db.jooq.remocra.keys.PROFIL_UTILISATEUR__PROFIL_UTILISATEUR_PROFIL_UTILISATEUR_TYPE_ORGANISME_ID_FKEY
import remocra.db.jooq.remocra.keys.TYPE_ORGANISME_PKEY
import remocra.db.jooq.remocra.keys.TYPE_ORGANISME_TYPE_ORGANISME_CODE_KEY
import remocra.db.jooq.remocra.keys.TYPE_ORGANISME__TYPE_ORGANISME_TYPE_ORGANISME_PARENT_ID_FKEY
import remocra.db.jooq.remocra.tables.Organisme.OrganismePath
import remocra.db.jooq.remocra.tables.Permis.PermisPath
import remocra.db.jooq.remocra.tables.ProfilOrganisme.ProfilOrganismePath
import remocra.db.jooq.remocra.tables.ProfilUtilisateur.ProfilUtilisateurPath
import remocra.db.jooq.remocra.tables.TypeOrganisme.TypeOrganismePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class TypeOrganisme(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.type_organisme</code>
         */
        val TYPE_ORGANISME: TypeOrganisme = TypeOrganisme()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.type_organisme.type_organisme_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("type_organisme_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.type_organisme.type_organisme_actif</code>.
     */
    val ACTIF: TableField<Record, Boolean?> = createField(DSL.name("type_organisme_actif"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>remocra.type_organisme.type_organisme_protected</code>.
     * Permet d'avoir des valeurs protégées comme "SERVICE_EAU" par exemple
     */
    val PROTECTED: TableField<Record, Boolean?> = createField(DSL.name("type_organisme_protected"), SQLDataType.BOOLEAN.nullable(false), this, "Permet d'avoir des valeurs protégées comme \"SERVICE_EAU\" par exemple")

    /**
     * The column <code>remocra.type_organisme.type_organisme_code</code>. Code
     * unique servant à identifier certains types utilisés dans l'application
     */
    val CODE: TableField<Record, String?> = createField(DSL.name("type_organisme_code"), SQLDataType.CLOB.nullable(false), this, "Code unique servant à identifier certains types utilisés dans l'application")

    /**
     * The column <code>remocra.type_organisme.type_organisme_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("type_organisme_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.type_organisme.type_organisme_parent_id</code>.
     */
    val PARENT_ID: TableField<Record, UUID?> = createField(DSL.name("type_organisme_parent_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.type_organisme.type_organisme_droit_api</code>.
     */
    val DROIT_API: TableField<Record, Array<DroitApi?>?> = createField(DSL.name("type_organisme_droit_api"), SQLDataType.VARCHAR.asEnumDataType(DroitApi::class.java).array(), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.type_organisme</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.type_organisme</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.type_organisme</code> table reference
     */
    constructor() : this(DSL.name("type_organisme"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TYPE_ORGANISME, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TypeOrganismePath : TypeOrganisme, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): TypeOrganismePath = TypeOrganismePath(DSL.name(alias), this)
        override fun `as`(alias: Name): TypeOrganismePath = TypeOrganismePath(alias, this)
        override fun `as`(alias: Table<*>): TypeOrganismePath = TypeOrganismePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = TYPE_ORGANISME_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(TYPE_ORGANISME_TYPE_ORGANISME_CODE_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(TYPE_ORGANISME__TYPE_ORGANISME_TYPE_ORGANISME_PARENT_ID_FKEY)

    private lateinit var _typeOrganisme: TypeOrganismePath

    /**
     * Get the implicit join path to the <code>remocra.type_organisme</code>
     * table.
     */
    fun typeOrganisme(): TypeOrganismePath {
        if (!this::_typeOrganisme.isInitialized) {
            _typeOrganisme = TypeOrganismePath(this, TYPE_ORGANISME__TYPE_ORGANISME_TYPE_ORGANISME_PARENT_ID_FKEY, null)
        }

        return _typeOrganisme
    }

    val typeOrganisme: TypeOrganismePath
        get(): TypeOrganismePath = typeOrganisme()

    private lateinit var _organisme: OrganismePath

    /**
     * Get the implicit to-many join path to the <code>remocra.organisme</code>
     * table
     */
    fun organisme(): OrganismePath {
        if (!this::_organisme.isInitialized) {
            _organisme = OrganismePath(this, null, ORGANISME__ORGANISME_ORGANISME_TYPE_ORGANISME_ID_FKEY.inverseKey)
        }

        return _organisme
    }

    val organisme: OrganismePath
        get(): OrganismePath = organisme()

    private lateinit var _permis: PermisPath

    /**
     * Get the implicit to-many join path to the <code>remocra.permis</code>
     * table
     */
    fun permis(): PermisPath {
        if (!this::_permis.isInitialized) {
            _permis = PermisPath(this, null, PERMIS__PERMIS_PERMIS_SERVICE_INSTRUCTEUR_ID_FKEY.inverseKey)
        }

        return _permis
    }

    val permis: PermisPath
        get(): PermisPath = permis()

    private lateinit var _profilOrganisme: ProfilOrganismePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.profil_organisme</code> table
     */
    fun profilOrganisme(): ProfilOrganismePath {
        if (!this::_profilOrganisme.isInitialized) {
            _profilOrganisme = ProfilOrganismePath(this, null, PROFIL_ORGANISME__PROFIL_ORGANISME_PROFIL_ORGANISME_TYPE_ORGANISME_ID_FKEY.inverseKey)
        }

        return _profilOrganisme
    }

    val profilOrganisme: ProfilOrganismePath
        get(): ProfilOrganismePath = profilOrganisme()

    private lateinit var _profilUtilisateur: ProfilUtilisateurPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.profil_utilisateur</code> table
     */
    fun profilUtilisateur(): ProfilUtilisateurPath {
        if (!this::_profilUtilisateur.isInitialized) {
            _profilUtilisateur = ProfilUtilisateurPath(this, null, PROFIL_UTILISATEUR__PROFIL_UTILISATEUR_PROFIL_UTILISATEUR_TYPE_ORGANISME_ID_FKEY.inverseKey)
        }

        return _profilUtilisateur
    }

    val profilUtilisateur: ProfilUtilisateurPath
        get(): ProfilUtilisateurPath = profilUtilisateur()
    override fun `as`(alias: String): TypeOrganisme = TypeOrganisme(DSL.name(alias), this)
    override fun `as`(alias: Name): TypeOrganisme = TypeOrganisme(alias, this)
    override fun `as`(alias: Table<*>): TypeOrganisme = TypeOrganisme(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TypeOrganisme = TypeOrganisme(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TypeOrganisme = TypeOrganisme(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TypeOrganisme = TypeOrganisme(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TypeOrganisme = TypeOrganisme(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TypeOrganisme = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TypeOrganisme = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TypeOrganisme = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TypeOrganisme = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TypeOrganisme = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TypeOrganisme = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TypeOrganisme = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TypeOrganisme = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TypeOrganisme = where(DSL.notExists(select))
}
