/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.OLDEB_CARACTERISTIQUE__OLDEB_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_TYPE_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_CODE_KEY
import remocra.db.jooq.remocra.keys.OLDEB_TYPE_CARACTERISTIQUE_PKEY
import remocra.db.jooq.remocra.keys.OLDEB_TYPE_CARACTERISTIQUE__OLDEB_TYPE_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_OLDE_FKEY
import remocra.db.jooq.remocra.tables.Oldeb.OldebPath
import remocra.db.jooq.remocra.tables.OldebCaracteristique.OldebCaracteristiquePath
import remocra.db.jooq.remocra.tables.OldebTypeCategorieCaracteristique.OldebTypeCategorieCaracteristiquePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class OldebTypeCaracteristique(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>remocra.oldeb_type_caracteristique</code>
         */
        val OLDEB_TYPE_CARACTERISTIQUE: OldebTypeCaracteristique = OldebTypeCaracteristique()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>remocra.oldeb_type_caracteristique.oldeb_type_caracteristique_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_type_caracteristique_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_type_caracteristique.oldeb_type_caracteristique_actif</code>.
     */
    val ACTIF: TableField<Record, Boolean?> = createField(DSL.name("oldeb_type_caracteristique_actif"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_type_caracteristique.oldeb_type_caracteristique_code</code>.
     */
    val CODE: TableField<Record, String?> = createField(DSL.name("oldeb_type_caracteristique_code"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_type_caracteristique.oldeb_type_caracteristique_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("oldeb_type_caracteristique_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.oldeb_type_caracteristique.oldeb_type_caracteristique_oldeb_type_categorie_id</code>.
     */
    val OLDEB_TYPE_CATEGORIE_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_type_caracteristique_oldeb_type_categorie_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.oldeb_type_caracteristique</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.oldeb_type_caracteristique</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.oldeb_type_caracteristique</code> table reference
     */
    constructor() : this(DSL.name("oldeb_type_caracteristique"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, OLDEB_TYPE_CARACTERISTIQUE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OldebTypeCaracteristiquePath : OldebTypeCaracteristique, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): OldebTypeCaracteristiquePath = OldebTypeCaracteristiquePath(DSL.name(alias), this)
        override fun `as`(alias: Name): OldebTypeCaracteristiquePath = OldebTypeCaracteristiquePath(alias, this)
        override fun `as`(alias: Table<*>): OldebTypeCaracteristiquePath = OldebTypeCaracteristiquePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = OLDEB_TYPE_CARACTERISTIQUE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(OLDEB_TYPE_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_CODE_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(OLDEB_TYPE_CARACTERISTIQUE__OLDEB_TYPE_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_OLDE_FKEY)

    private lateinit var _oldebTypeCategorieCaracteristique: OldebTypeCategorieCaracteristiquePath

    /**
     * Get the implicit join path to the
     * <code>remocra.oldeb_type_categorie_caracteristique</code> table.
     */
    fun oldebTypeCategorieCaracteristique(): OldebTypeCategorieCaracteristiquePath {
        if (!this::_oldebTypeCategorieCaracteristique.isInitialized) {
            _oldebTypeCategorieCaracteristique = OldebTypeCategorieCaracteristiquePath(this, OLDEB_TYPE_CARACTERISTIQUE__OLDEB_TYPE_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_OLDE_FKEY, null)
        }

        return _oldebTypeCategorieCaracteristique
    }

    val oldebTypeCategorieCaracteristique: OldebTypeCategorieCaracteristiquePath
        get(): OldebTypeCategorieCaracteristiquePath = oldebTypeCategorieCaracteristique()

    private lateinit var _oldebCaracteristique: OldebCaracteristiquePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_caracteristique</code> table
     */
    fun oldebCaracteristique(): OldebCaracteristiquePath {
        if (!this::_oldebCaracteristique.isInitialized) {
            _oldebCaracteristique = OldebCaracteristiquePath(this, null, OLDEB_CARACTERISTIQUE__OLDEB_CARACTERISTIQUE_OLDEB_TYPE_CARACTERISTIQUE_ID_FKEY.inverseKey)
        }

        return _oldebCaracteristique
    }

    val oldebCaracteristique: OldebCaracteristiquePath
        get(): OldebCaracteristiquePath = oldebCaracteristique()

    /**
     * Get the implicit many-to-many join path to the <code>remocra.oldeb</code>
     * table
     */
    val oldeb: OldebPath
        get(): OldebPath = oldebCaracteristique().oldeb()
    override fun `as`(alias: String): OldebTypeCaracteristique = OldebTypeCaracteristique(DSL.name(alias), this)
    override fun `as`(alias: Name): OldebTypeCaracteristique = OldebTypeCaracteristique(alias, this)
    override fun `as`(alias: Table<*>): OldebTypeCaracteristique = OldebTypeCaracteristique(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OldebTypeCaracteristique = OldebTypeCaracteristique(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OldebTypeCaracteristique = OldebTypeCaracteristique(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OldebTypeCaracteristique = OldebTypeCaracteristique(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): OldebTypeCaracteristique = OldebTypeCaracteristique(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): OldebTypeCaracteristique = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): OldebTypeCaracteristique = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): OldebTypeCaracteristique = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): OldebTypeCaracteristique = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): OldebTypeCaracteristique = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): OldebTypeCaracteristique = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): OldebTypeCaracteristique = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): OldebTypeCaracteristique = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): OldebTypeCaracteristique = where(DSL.notExists(select))
}
