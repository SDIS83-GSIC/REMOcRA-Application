/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.remocra.enums.EtatSignalement
import java.io.Serializable
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class Signalement(
    val signalementId: UUID,
    val signalementDescription: String?,
    val signalementUtilisateur: UUID,
    val signalementDateConstat: ZonedDateTime?,
    val signalementDateModification: ZonedDateTime?,
    val signalementType: EtatSignalement,
    val signalementGeometrie: Geometry,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: Signalement = other as Signalement
        if (this.signalementId != o.signalementId) {
            return false
        }
        if (this.signalementDescription == null) {
            if (o.signalementDescription != null) {
                return false
            }
        } else if (this.signalementDescription != o.signalementDescription) {
            return false
        }
        if (this.signalementUtilisateur != o.signalementUtilisateur) {
            return false
        }
        if (this.signalementDateConstat == null) {
            if (o.signalementDateConstat != null) {
                return false
            }
        } else if (this.signalementDateConstat != o.signalementDateConstat) {
            return false
        }
        if (this.signalementDateModification == null) {
            if (o.signalementDateModification != null) {
                return false
            }
        } else if (this.signalementDateModification != o.signalementDateModification) {
            return false
        }
        if (this.signalementType != o.signalementType) {
            return false
        }
        if (this.signalementGeometrie != o.signalementGeometrie) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.signalementId.hashCode()
        result = prime * result + (if (this.signalementDescription == null) 0 else this.signalementDescription.hashCode())
        result = prime * result + this.signalementUtilisateur.hashCode()
        result = prime * result + (if (this.signalementDateConstat == null) 0 else this.signalementDateConstat.hashCode())
        result = prime * result + (if (this.signalementDateModification == null) 0 else this.signalementDateModification.hashCode())
        result = prime * result + this.signalementType.hashCode()
        result = prime * result + this.signalementGeometrie.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Signalement (")

        sb.append(signalementId)
        sb.append(", ").append(signalementDescription)
        sb.append(", ").append(signalementUtilisateur)
        sb.append(", ").append(signalementDateConstat)
        sb.append(", ").append(signalementDateModification)
        sb.append(", ").append(signalementType)
        sb.append(", ").append(signalementGeometrie)

        sb.append(")")
        return sb.toString()
    }
}
