/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.indexes.DEBIT_SIMULTANE_GEOMETRIE_IDX
import remocra.db.jooq.remocra.keys.DEBIT_SIMULTANE_MESURE__DEBIT_SIMULTANE_MESURE_DEBIT_SIMULTANE_ID_FKEY
import remocra.db.jooq.remocra.keys.DEBIT_SIMULTANE_PKEY
import remocra.db.jooq.remocra.keys.DEBIT_SIMULTANE__DEBIT_SIMULTANE_DEBIT_SIMULTANE_SITE_ID_FKEY
import remocra.db.jooq.remocra.tables.DebitSimultaneMesure.DebitSimultaneMesurePath
import remocra.db.jooq.remocra.tables.Site.SitePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class DebitSimultane(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.debit_simultane</code>
         */
        val DEBIT_SIMULTANE: DebitSimultane = DebitSimultane()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.debit_simultane.debit_simultane_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("debit_simultane_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.debit_simultane.debit_simultane_site_id</code>.
     */
    val SITE_ID: TableField<Record, UUID?> = createField(DSL.name("debit_simultane_site_id"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>remocra.debit_simultane.debit_simultane_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("debit_simultane_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    /**
     * The column
     * <code>remocra.debit_simultane.debit_simultane_numero_dossier</code>.
     */
    val NUMERO_DOSSIER: TableField<Record, String?> = createField(DSL.name("debit_simultane_numero_dossier"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.debit_simultane</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.debit_simultane</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.debit_simultane</code> table reference
     */
    constructor() : this(DSL.name("debit_simultane"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DEBIT_SIMULTANE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DebitSimultanePath : DebitSimultane, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): DebitSimultanePath = DebitSimultanePath(DSL.name(alias), this)
        override fun `as`(alias: Name): DebitSimultanePath = DebitSimultanePath(alias, this)
        override fun `as`(alias: Table<*>): DebitSimultanePath = DebitSimultanePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getIndexes(): List<Index> = listOf(DEBIT_SIMULTANE_GEOMETRIE_IDX)
    override fun getPrimaryKey(): UniqueKey<Record> = DEBIT_SIMULTANE_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(DEBIT_SIMULTANE__DEBIT_SIMULTANE_DEBIT_SIMULTANE_SITE_ID_FKEY)

    private lateinit var _site: SitePath

    /**
     * Get the implicit join path to the <code>remocra.site</code> table.
     */
    fun site(): SitePath {
        if (!this::_site.isInitialized) {
            _site = SitePath(this, DEBIT_SIMULTANE__DEBIT_SIMULTANE_DEBIT_SIMULTANE_SITE_ID_FKEY, null)
        }

        return _site
    }

    val site: SitePath
        get(): SitePath = site()

    private lateinit var _debitSimultaneMesure: DebitSimultaneMesurePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.debit_simultane_mesure</code> table
     */
    fun debitSimultaneMesure(): DebitSimultaneMesurePath {
        if (!this::_debitSimultaneMesure.isInitialized) {
            _debitSimultaneMesure = DebitSimultaneMesurePath(this, null, DEBIT_SIMULTANE_MESURE__DEBIT_SIMULTANE_MESURE_DEBIT_SIMULTANE_ID_FKEY.inverseKey)
        }

        return _debitSimultaneMesure
    }

    val debitSimultaneMesure: DebitSimultaneMesurePath
        get(): DebitSimultaneMesurePath = debitSimultaneMesure()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_debit_simultane"), "((geometrytype(debit_simultane_geometrie) = 'POINT'::text))", true),
    )
    override fun `as`(alias: String): DebitSimultane = DebitSimultane(DSL.name(alias), this)
    override fun `as`(alias: Name): DebitSimultane = DebitSimultane(alias, this)
    override fun `as`(alias: Table<*>): DebitSimultane = DebitSimultane(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DebitSimultane = DebitSimultane(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DebitSimultane = DebitSimultane(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DebitSimultane = DebitSimultane(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DebitSimultane = DebitSimultane(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DebitSimultane = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DebitSimultane = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DebitSimultane = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DebitSimultane = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DebitSimultane = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DebitSimultane = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DebitSimultane = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DebitSimultane = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DebitSimultane = where(DSL.notExists(select))
}
