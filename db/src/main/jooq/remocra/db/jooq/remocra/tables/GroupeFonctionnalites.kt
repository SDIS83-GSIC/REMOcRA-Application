/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.enums.Droit
import remocra.db.jooq.remocra.keys.GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNALITES_CODE_KEY
import remocra.db.jooq.remocra.keys.GROUPE_FONCTIONNALITES_PKEY
import remocra.db.jooq.remocra.keys.L_COUCHE_GROUPE_FONCTIONNALITES__L_COUCHE_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNALITES_ID_FKEY
import remocra.db.jooq.remocra.keys.L_GROUPE_FONCTIONNALITES_COUCHE_STYLE__L_GROUPE_FONCTIONNALITES_COUCHE__GROUPE_FONCTIONNALITES_ID_FKEY
import remocra.db.jooq.remocra.keys.L_GROUPE_FONCTIONNALITES_DOCUMENT_HABILITABLE__L_GROUPE_FONCTIONNALITES_DOCUMENT_HABILITABLE_GROUPE_FONCTIONNA
import remocra.db.jooq.remocra.keys.L_MODELE_COURRIER_GROUPE_FONCTIONNALITES__L_MODELE_COURRIER_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNALITES
import remocra.db.jooq.remocra.keys.L_PROFIL_UTILISATEUR_ORGANISME_GROUPE_FONCTIONNALITES__L_PROFIL_UTILISATEUR_ORGANISME_GROUPE_FONCTIONNALITES_GROUPE_FO
import remocra.db.jooq.remocra.keys.L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNA
import remocra.db.jooq.remocra.tables.Couche.CouchePath
import remocra.db.jooq.remocra.tables.CoucheStyle.CoucheStylePath
import remocra.db.jooq.remocra.tables.DocumentHabilitable.DocumentHabilitablePath
import remocra.db.jooq.remocra.tables.LCoucheGroupeFonctionnalites.LCoucheGroupeFonctionnalitesPath
import remocra.db.jooq.remocra.tables.LGroupeFonctionnalitesCoucheStyle.LGroupeFonctionnalitesCoucheStylePath
import remocra.db.jooq.remocra.tables.LGroupeFonctionnalitesDocumentHabilitable.LGroupeFonctionnalitesDocumentHabilitablePath
import remocra.db.jooq.remocra.tables.LModeleCourrierGroupeFonctionnalites.LModeleCourrierGroupeFonctionnalitesPath
import remocra.db.jooq.remocra.tables.LProfilUtilisateurOrganismeGroupeFonctionnalites.LProfilUtilisateurOrganismeGroupeFonctionnalitesPath
import remocra.db.jooq.remocra.tables.LRapportPersonnaliseGroupeFonctionnalites.LRapportPersonnaliseGroupeFonctionnalitesPath
import remocra.db.jooq.remocra.tables.ModeleCourrier.ModeleCourrierPath
import remocra.db.jooq.remocra.tables.RapportPersonnalise.RapportPersonnalisePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class GroupeFonctionnalites(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.groupe_fonctionnalites</code>
         */
        val GROUPE_FONCTIONNALITES: GroupeFonctionnalites = GroupeFonctionnalites()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>remocra.groupe_fonctionnalites.groupe_fonctionnalites_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("groupe_fonctionnalites_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.groupe_fonctionnalites.groupe_fonctionnalites_code</code>.
     */
    val CODE: TableField<Record, String?> = createField(DSL.name("groupe_fonctionnalites_code"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.groupe_fonctionnalites.groupe_fonctionnalites_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("groupe_fonctionnalites_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column
     * <code>remocra.groupe_fonctionnalites.groupe_fonctionnalites_droits</code>.
     */
    val DROITS: TableField<Record, Array<Droit?>?> = createField(DSL.name("groupe_fonctionnalites_droits"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Droit::class.java).array(), this, "")

    /**
     * The column
     * <code>remocra.groupe_fonctionnalites.groupe_fonctionnalites_actif</code>.
     */
    val ACTIF: TableField<Record, Boolean?> = createField(DSL.name("groupe_fonctionnalites_actif"), SQLDataType.BOOLEAN.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.groupe_fonctionnalites</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.groupe_fonctionnalites</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.groupe_fonctionnalites</code> table reference
     */
    constructor() : this(DSL.name("groupe_fonctionnalites"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, GROUPE_FONCTIONNALITES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class GroupeFonctionnalitesPath : GroupeFonctionnalites, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): GroupeFonctionnalitesPath = GroupeFonctionnalitesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): GroupeFonctionnalitesPath = GroupeFonctionnalitesPath(alias, this)
        override fun `as`(alias: Table<*>): GroupeFonctionnalitesPath = GroupeFonctionnalitesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = GROUPE_FONCTIONNALITES_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNALITES_CODE_KEY)

    private lateinit var _lCoucheGroupeFonctionnalites: LCoucheGroupeFonctionnalitesPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_couche_groupe_fonctionnalites</code> table
     */
    fun lCoucheGroupeFonctionnalites(): LCoucheGroupeFonctionnalitesPath {
        if (!this::_lCoucheGroupeFonctionnalites.isInitialized) {
            _lCoucheGroupeFonctionnalites = LCoucheGroupeFonctionnalitesPath(this, null, L_COUCHE_GROUPE_FONCTIONNALITES__L_COUCHE_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNALITES_ID_FKEY.inverseKey)
        }

        return _lCoucheGroupeFonctionnalites
    }

    val lCoucheGroupeFonctionnalites: LCoucheGroupeFonctionnalitesPath
        get(): LCoucheGroupeFonctionnalitesPath = lCoucheGroupeFonctionnalites()

    private lateinit var _lGroupeFonctionnalitesCoucheStyle: LGroupeFonctionnalitesCoucheStylePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_groupe_fonctionnalites_couche_style</code> table
     */
    fun lGroupeFonctionnalitesCoucheStyle(): LGroupeFonctionnalitesCoucheStylePath {
        if (!this::_lGroupeFonctionnalitesCoucheStyle.isInitialized) {
            _lGroupeFonctionnalitesCoucheStyle = LGroupeFonctionnalitesCoucheStylePath(this, null, L_GROUPE_FONCTIONNALITES_COUCHE_STYLE__L_GROUPE_FONCTIONNALITES_COUCHE__GROUPE_FONCTIONNALITES_ID_FKEY.inverseKey)
        }

        return _lGroupeFonctionnalitesCoucheStyle
    }

    val lGroupeFonctionnalitesCoucheStyle: LGroupeFonctionnalitesCoucheStylePath
        get(): LGroupeFonctionnalitesCoucheStylePath = lGroupeFonctionnalitesCoucheStyle()

    private lateinit var _lGroupeFonctionnalitesDocumentHabilitable: LGroupeFonctionnalitesDocumentHabilitablePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_groupe_fonctionnalites_document_habilitable</code> table
     */
    fun lGroupeFonctionnalitesDocumentHabilitable(): LGroupeFonctionnalitesDocumentHabilitablePath {
        if (!this::_lGroupeFonctionnalitesDocumentHabilitable.isInitialized) {
            _lGroupeFonctionnalitesDocumentHabilitable = LGroupeFonctionnalitesDocumentHabilitablePath(this, null, L_GROUPE_FONCTIONNALITES_DOCUMENT_HABILITABLE__L_GROUPE_FONCTIONNALITES_DOCUMENT_HABILITABLE_GROUPE_FONCTIONNA.inverseKey)
        }

        return _lGroupeFonctionnalitesDocumentHabilitable
    }

    val lGroupeFonctionnalitesDocumentHabilitable: LGroupeFonctionnalitesDocumentHabilitablePath
        get(): LGroupeFonctionnalitesDocumentHabilitablePath = lGroupeFonctionnalitesDocumentHabilitable()

    private lateinit var _lModeleCourrierGroupeFonctionnalites: LModeleCourrierGroupeFonctionnalitesPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_modele_courrier_groupe_fonctionnalites</code> table
     */
    fun lModeleCourrierGroupeFonctionnalites(): LModeleCourrierGroupeFonctionnalitesPath {
        if (!this::_lModeleCourrierGroupeFonctionnalites.isInitialized) {
            _lModeleCourrierGroupeFonctionnalites = LModeleCourrierGroupeFonctionnalitesPath(this, null, L_MODELE_COURRIER_GROUPE_FONCTIONNALITES__L_MODELE_COURRIER_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNALITES.inverseKey)
        }

        return _lModeleCourrierGroupeFonctionnalites
    }

    val lModeleCourrierGroupeFonctionnalites: LModeleCourrierGroupeFonctionnalitesPath
        get(): LModeleCourrierGroupeFonctionnalitesPath = lModeleCourrierGroupeFonctionnalites()

    private lateinit var _lProfilUtilisateurOrganismeGroupeFonctionnalites: LProfilUtilisateurOrganismeGroupeFonctionnalitesPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_profil_utilisateur_organisme_groupe_fonctionnalites</code>
     * table
     */
    fun lProfilUtilisateurOrganismeGroupeFonctionnalites(): LProfilUtilisateurOrganismeGroupeFonctionnalitesPath {
        if (!this::_lProfilUtilisateurOrganismeGroupeFonctionnalites.isInitialized) {
            _lProfilUtilisateurOrganismeGroupeFonctionnalites = LProfilUtilisateurOrganismeGroupeFonctionnalitesPath(this, null, L_PROFIL_UTILISATEUR_ORGANISME_GROUPE_FONCTIONNALITES__L_PROFIL_UTILISATEUR_ORGANISME_GROUPE_FONCTIONNALITES_GROUPE_FO.inverseKey)
        }

        return _lProfilUtilisateurOrganismeGroupeFonctionnalites
    }

    val lProfilUtilisateurOrganismeGroupeFonctionnalites: LProfilUtilisateurOrganismeGroupeFonctionnalitesPath
        get(): LProfilUtilisateurOrganismeGroupeFonctionnalitesPath = lProfilUtilisateurOrganismeGroupeFonctionnalites()

    private lateinit var _lRapportPersonnaliseGroupeFonctionnalites: LRapportPersonnaliseGroupeFonctionnalitesPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_rapport_personnalise_groupe_fonctionnalites</code> table
     */
    fun lRapportPersonnaliseGroupeFonctionnalites(): LRapportPersonnaliseGroupeFonctionnalitesPath {
        if (!this::_lRapportPersonnaliseGroupeFonctionnalites.isInitialized) {
            _lRapportPersonnaliseGroupeFonctionnalites = LRapportPersonnaliseGroupeFonctionnalitesPath(this, null, L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES__L_RAPPORT_PERSONNALISE_GROUPE_FONCTIONNALITES_GROUPE_FONCTIONNA.inverseKey)
        }

        return _lRapportPersonnaliseGroupeFonctionnalites
    }

    val lRapportPersonnaliseGroupeFonctionnalites: LRapportPersonnaliseGroupeFonctionnalitesPath
        get(): LRapportPersonnaliseGroupeFonctionnalitesPath = lRapportPersonnaliseGroupeFonctionnalites()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.couche</code> table
     */
    val couche: CouchePath
        get(): CouchePath = lCoucheGroupeFonctionnalites().couche()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.couche_style</code> table
     */
    val coucheStyle: CoucheStylePath
        get(): CoucheStylePath = lGroupeFonctionnalitesCoucheStyle().coucheStyle()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.document_habilitable</code> table
     */
    val documentHabilitable: DocumentHabilitablePath
        get(): DocumentHabilitablePath = lGroupeFonctionnalitesDocumentHabilitable().documentHabilitable()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.modele_courrier</code> table
     */
    val modeleCourrier: ModeleCourrierPath
        get(): ModeleCourrierPath = lModeleCourrierGroupeFonctionnalites().modeleCourrier()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.rapport_personnalise</code> table
     */
    val rapportPersonnalise: RapportPersonnalisePath
        get(): RapportPersonnalisePath = lRapportPersonnaliseGroupeFonctionnalites().rapportPersonnalise()
    override fun `as`(alias: String): GroupeFonctionnalites = GroupeFonctionnalites(DSL.name(alias), this)
    override fun `as`(alias: Name): GroupeFonctionnalites = GroupeFonctionnalites(alias, this)
    override fun `as`(alias: Table<*>): GroupeFonctionnalites = GroupeFonctionnalites(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GroupeFonctionnalites = GroupeFonctionnalites(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GroupeFonctionnalites = GroupeFonctionnalites(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GroupeFonctionnalites = GroupeFonctionnalites(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): GroupeFonctionnalites = GroupeFonctionnalites(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): GroupeFonctionnalites = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): GroupeFonctionnalites = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): GroupeFonctionnalites = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): GroupeFonctionnalites = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): GroupeFonctionnalites = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): GroupeFonctionnalites = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): GroupeFonctionnalites = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): GroupeFonctionnalites = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): GroupeFonctionnalites = where(DSL.notExists(select))
}
