/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import remocra.db.jooq.remocra.enums.Disponibilite
import remocra.db.jooq.remocra.enums.VolumeConstate
import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class Pena(
    val penaId: UUID,
    val penaDisponibiliteHbe: Disponibilite,
    val penaCapacite: Int?,
    val penaCoordonneDfci: String?,
    val penaMateriauId: UUID?,
    val penaVolumeConstate: VolumeConstate,
    val penaCapaciteIllimitee: Boolean?,
    val penaCapaciteIncertaine: Boolean?,
    val penaQuantiteAppoint: Double?,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: Pena = other as Pena
        if (this.penaId != o.penaId) {
            return false
        }
        if (this.penaDisponibiliteHbe != o.penaDisponibiliteHbe) {
            return false
        }
        if (this.penaCapacite == null) {
            if (o.penaCapacite != null) {
                return false
            }
        } else if (this.penaCapacite != o.penaCapacite) {
            return false
        }
        if (this.penaCoordonneDfci == null) {
            if (o.penaCoordonneDfci != null) {
                return false
            }
        } else if (this.penaCoordonneDfci != o.penaCoordonneDfci) {
            return false
        }
        if (this.penaMateriauId == null) {
            if (o.penaMateriauId != null) {
                return false
            }
        } else if (this.penaMateriauId != o.penaMateriauId) {
            return false
        }
        if (this.penaVolumeConstate != o.penaVolumeConstate) {
            return false
        }
        if (this.penaCapaciteIllimitee == null) {
            if (o.penaCapaciteIllimitee != null) {
                return false
            }
        } else if (this.penaCapaciteIllimitee != o.penaCapaciteIllimitee) {
            return false
        }
        if (this.penaCapaciteIncertaine == null) {
            if (o.penaCapaciteIncertaine != null) {
                return false
            }
        } else if (this.penaCapaciteIncertaine != o.penaCapaciteIncertaine) {
            return false
        }
        if (this.penaQuantiteAppoint == null) {
            if (o.penaQuantiteAppoint != null) {
                return false
            }
        } else if (this.penaQuantiteAppoint != o.penaQuantiteAppoint) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.penaId.hashCode()
        result = prime * result + this.penaDisponibiliteHbe.hashCode()
        result = prime * result + (if (this.penaCapacite == null) 0 else this.penaCapacite.hashCode())
        result = prime * result + (if (this.penaCoordonneDfci == null) 0 else this.penaCoordonneDfci.hashCode())
        result = prime * result + (if (this.penaMateriauId == null) 0 else this.penaMateriauId.hashCode())
        result = prime * result + this.penaVolumeConstate.hashCode()
        result = prime * result + (if (this.penaCapaciteIllimitee == null) 0 else this.penaCapaciteIllimitee.hashCode())
        result = prime * result + (if (this.penaCapaciteIncertaine == null) 0 else this.penaCapaciteIncertaine.hashCode())
        result = prime * result + (if (this.penaQuantiteAppoint == null) 0 else this.penaQuantiteAppoint.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Pena (")

        sb.append(penaId)
        sb.append(", ").append(penaDisponibiliteHbe)
        sb.append(", ").append(penaCapacite)
        sb.append(", ").append(penaCoordonneDfci)
        sb.append(", ").append(penaMateriauId)
        sb.append(", ").append(penaVolumeConstate)
        sb.append(", ").append(penaCapaciteIllimitee)
        sb.append(", ").append(penaCapaciteIncertaine)
        sb.append(", ").append(penaQuantiteAppoint)

        sb.append(")")
        return sb.toString()
    }
}
