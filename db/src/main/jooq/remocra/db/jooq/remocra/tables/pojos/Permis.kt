/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import org.locationtech.jts.geom.Geometry
import java.io.Serializable
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class Permis(
    val permisId: UUID,
    val permisLibelle: String,
    val permisNumero: String,
    val permisInstructeurId: UUID,
    val permisServiceInstructeurId: UUID,
    val permisTypePermisInterserviceId: UUID,
    val permisTypePermisAvisId: UUID,
    val permisRiReceptionnee: Boolean,
    val permisDossierRiValide: Boolean,
    val permisObservations: String?,
    val permisVoieText: String?,
    val permisVoieId: UUID?,
    val permisComplement: String?,
    val permisCommuneId: UUID,
    val permisAnnee: Int,
    val permisDatePermis: ZonedDateTime,
    val permisGeometrie: Geometry,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: Permis = other as Permis
        if (this.permisId != o.permisId) {
            return false
        }
        if (this.permisLibelle != o.permisLibelle) {
            return false
        }
        if (this.permisNumero != o.permisNumero) {
            return false
        }
        if (this.permisInstructeurId != o.permisInstructeurId) {
            return false
        }
        if (this.permisServiceInstructeurId != o.permisServiceInstructeurId) {
            return false
        }
        if (this.permisTypePermisInterserviceId != o.permisTypePermisInterserviceId) {
            return false
        }
        if (this.permisTypePermisAvisId != o.permisTypePermisAvisId) {
            return false
        }
        if (this.permisRiReceptionnee != o.permisRiReceptionnee) {
            return false
        }
        if (this.permisDossierRiValide != o.permisDossierRiValide) {
            return false
        }
        if (this.permisObservations == null) {
            if (o.permisObservations != null) {
                return false
            }
        } else if (this.permisObservations != o.permisObservations) {
            return false
        }
        if (this.permisVoieText == null) {
            if (o.permisVoieText != null) {
                return false
            }
        } else if (this.permisVoieText != o.permisVoieText) {
            return false
        }
        if (this.permisVoieId == null) {
            if (o.permisVoieId != null) {
                return false
            }
        } else if (this.permisVoieId != o.permisVoieId) {
            return false
        }
        if (this.permisComplement == null) {
            if (o.permisComplement != null) {
                return false
            }
        } else if (this.permisComplement != o.permisComplement) {
            return false
        }
        if (this.permisCommuneId != o.permisCommuneId) {
            return false
        }
        if (this.permisAnnee != o.permisAnnee) {
            return false
        }
        if (this.permisDatePermis != o.permisDatePermis) {
            return false
        }
        if (this.permisGeometrie != o.permisGeometrie) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.permisId.hashCode()
        result = prime * result + this.permisLibelle.hashCode()
        result = prime * result + this.permisNumero.hashCode()
        result = prime * result + this.permisInstructeurId.hashCode()
        result = prime * result + this.permisServiceInstructeurId.hashCode()
        result = prime * result + this.permisTypePermisInterserviceId.hashCode()
        result = prime * result + this.permisTypePermisAvisId.hashCode()
        result = prime * result + this.permisRiReceptionnee.hashCode()
        result = prime * result + this.permisDossierRiValide.hashCode()
        result = prime * result + (if (this.permisObservations == null) 0 else this.permisObservations.hashCode())
        result = prime * result + (if (this.permisVoieText == null) 0 else this.permisVoieText.hashCode())
        result = prime * result + (if (this.permisVoieId == null) 0 else this.permisVoieId.hashCode())
        result = prime * result + (if (this.permisComplement == null) 0 else this.permisComplement.hashCode())
        result = prime * result + this.permisCommuneId.hashCode()
        result = prime * result + this.permisAnnee.hashCode()
        result = prime * result + this.permisDatePermis.hashCode()
        result = prime * result + this.permisGeometrie.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Permis (")

        sb.append(permisId)
        sb.append(", ").append(permisLibelle)
        sb.append(", ").append(permisNumero)
        sb.append(", ").append(permisInstructeurId)
        sb.append(", ").append(permisServiceInstructeurId)
        sb.append(", ").append(permisTypePermisInterserviceId)
        sb.append(", ").append(permisTypePermisAvisId)
        sb.append(", ").append(permisRiReceptionnee)
        sb.append(", ").append(permisDossierRiValide)
        sb.append(", ").append(permisObservations)
        sb.append(", ").append(permisVoieText)
        sb.append(", ").append(permisVoieId)
        sb.append(", ").append(permisComplement)
        sb.append(", ").append(permisCommuneId)
        sb.append(", ").append(permisAnnee)
        sb.append(", ").append(permisDatePermis)
        sb.append(", ").append(permisGeometrie)

        sb.append(")")
        return sb.toString()
    }
}
