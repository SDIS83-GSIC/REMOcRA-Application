/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.L_THEMATIQUE_COURRIER_PKEY
import remocra.db.jooq.remocra.keys.L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_COURRIER_ID_FKEY
import remocra.db.jooq.remocra.keys.L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_THEMATIQUE_ID_FKEY
import remocra.db.jooq.remocra.tables.Courrier.CourrierPath
import remocra.db.jooq.remocra.tables.Thematique.ThematiquePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class LThematiqueCourrier(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.l_thematique_courrier</code>
         */
        val L_THEMATIQUE_COURRIER: LThematiqueCourrier = LThematiqueCourrier()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.l_thematique_courrier.courrier_id</code>.
     */
    val COURRIER_ID: TableField<Record, UUID?> = createField(DSL.name("courrier_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.l_thematique_courrier.thematique_id</code>.
     */
    val THEMATIQUE_ID: TableField<Record, UUID?> = createField(DSL.name("thematique_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.l_thematique_courrier</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.l_thematique_courrier</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.l_thematique_courrier</code> table reference
     */
    constructor() : this(DSL.name("l_thematique_courrier"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, L_THEMATIQUE_COURRIER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class LThematiqueCourrierPath : LThematiqueCourrier, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): LThematiqueCourrierPath = LThematiqueCourrierPath(DSL.name(alias), this)
        override fun `as`(alias: Name): LThematiqueCourrierPath = LThematiqueCourrierPath(alias, this)
        override fun `as`(alias: Table<*>): LThematiqueCourrierPath = LThematiqueCourrierPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = L_THEMATIQUE_COURRIER_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_COURRIER_ID_FKEY, L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_THEMATIQUE_ID_FKEY)

    private lateinit var _courrier: CourrierPath

    /**
     * Get the implicit join path to the <code>remocra.courrier</code> table.
     */
    fun courrier(): CourrierPath {
        if (!this::_courrier.isInitialized) {
            _courrier = CourrierPath(this, L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_COURRIER_ID_FKEY, null)
        }

        return _courrier
    }

    val courrier: CourrierPath
        get(): CourrierPath = courrier()

    private lateinit var _thematique: ThematiquePath

    /**
     * Get the implicit join path to the <code>remocra.thematique</code> table.
     */
    fun thematique(): ThematiquePath {
        if (!this::_thematique.isInitialized) {
            _thematique = ThematiquePath(this, L_THEMATIQUE_COURRIER__L_THEMATIQUE_COURRIER_THEMATIQUE_ID_FKEY, null)
        }

        return _thematique
    }

    val thematique: ThematiquePath
        get(): ThematiquePath = thematique()
    override fun `as`(alias: String): LThematiqueCourrier = LThematiqueCourrier(DSL.name(alias), this)
    override fun `as`(alias: Name): LThematiqueCourrier = LThematiqueCourrier(alias, this)
    override fun `as`(alias: Table<*>): LThematiqueCourrier = LThematiqueCourrier(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): LThematiqueCourrier = LThematiqueCourrier(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): LThematiqueCourrier = LThematiqueCourrier(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): LThematiqueCourrier = LThematiqueCourrier(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): LThematiqueCourrier = LThematiqueCourrier(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): LThematiqueCourrier = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): LThematiqueCourrier = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): LThematiqueCourrier = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): LThematiqueCourrier = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): LThematiqueCourrier = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): LThematiqueCourrier = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): LThematiqueCourrier = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): LThematiqueCourrier = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): LThematiqueCourrier = where(DSL.notExists(select))
}
