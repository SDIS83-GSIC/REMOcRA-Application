/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import java.io.Serializable
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class Tournee(
    val tourneeId: UUID,
    val tourneeActif: Boolean,
    val tourneeLibelle: String,
    val tourneeOrganismeId: UUID,
    val tourneePourcentageAvancement: Int?,
    val tourneeReservationUtilisateurId: UUID?,
    val tourneeDateSynchronisation: ZonedDateTime?,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: Tournee = other as Tournee
        if (this.tourneeId != o.tourneeId) {
            return false
        }
        if (this.tourneeActif != o.tourneeActif) {
            return false
        }
        if (this.tourneeLibelle != o.tourneeLibelle) {
            return false
        }
        if (this.tourneeOrganismeId != o.tourneeOrganismeId) {
            return false
        }
        if (this.tourneePourcentageAvancement == null) {
            if (o.tourneePourcentageAvancement != null) {
                return false
            }
        } else if (this.tourneePourcentageAvancement != o.tourneePourcentageAvancement) {
            return false
        }
        if (this.tourneeReservationUtilisateurId == null) {
            if (o.tourneeReservationUtilisateurId != null) {
                return false
            }
        } else if (this.tourneeReservationUtilisateurId != o.tourneeReservationUtilisateurId) {
            return false
        }
        if (this.tourneeDateSynchronisation == null) {
            if (o.tourneeDateSynchronisation != null) {
                return false
            }
        } else if (this.tourneeDateSynchronisation != o.tourneeDateSynchronisation) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.tourneeId.hashCode()
        result = prime * result + this.tourneeActif.hashCode()
        result = prime * result + this.tourneeLibelle.hashCode()
        result = prime * result + this.tourneeOrganismeId.hashCode()
        result = prime * result + (if (this.tourneePourcentageAvancement == null) 0 else this.tourneePourcentageAvancement.hashCode())
        result = prime * result + (if (this.tourneeReservationUtilisateurId == null) 0 else this.tourneeReservationUtilisateurId.hashCode())
        result = prime * result + (if (this.tourneeDateSynchronisation == null) 0 else this.tourneeDateSynchronisation.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Tournee (")

        sb.append(tourneeId)
        sb.append(", ").append(tourneeActif)
        sb.append(", ").append(tourneeLibelle)
        sb.append(", ").append(tourneeOrganismeId)
        sb.append(", ").append(tourneePourcentageAvancement)
        sb.append(", ").append(tourneeReservationUtilisateurId)
        sb.append(", ").append(tourneeDateSynchronisation)

        sb.append(")")
        return sb.toString()
    }
}
