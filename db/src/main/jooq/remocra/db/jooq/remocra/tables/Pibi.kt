/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.PIBI_PKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_DIAMETRE_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_JUMELE_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_MARQUE_PIBI_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_MODELE_PIBI_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_PENA_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_RESERVOIR_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_SERVICE_EAU_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_TYPE_CANALISATION_ID_FKEY
import remocra.db.jooq.remocra.keys.PIBI__PIBI_PIBI_TYPE_RESEAU_ID_FKEY
import remocra.db.jooq.remocra.tables.Diametre.DiametrePath
import remocra.db.jooq.remocra.tables.MarquePibi.MarquePibiPath
import remocra.db.jooq.remocra.tables.ModelePibi.ModelePibiPath
import remocra.db.jooq.remocra.tables.Organisme.OrganismePath
import remocra.db.jooq.remocra.tables.Pei.PeiPath
import remocra.db.jooq.remocra.tables.Pena.PenaPath
import remocra.db.jooq.remocra.tables.Pibi.PibiPath
import remocra.db.jooq.remocra.tables.Reservoir.ReservoirPath
import remocra.db.jooq.remocra.tables.TypeCanalisation.TypeCanalisationPath
import remocra.db.jooq.remocra.tables.TypeReseau.TypeReseauPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Pibi(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.pibi</code>
         */
        val PIBI: Pibi = Pibi()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.pibi.pibi_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("pibi_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.pibi.pibi_diametre_id</code>.
     */
    val DIAMETRE_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_diametre_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pibi.pibi_service_eau_id</code>. Des organismes
     * qui ont le type "SERVICE_EAU" uniquement
     */
    val SERVICE_EAU_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_service_eau_id"), SQLDataType.UUID, this, "Des organismes qui ont le type \"SERVICE_EAU\" uniquement")

    /**
     * The column <code>remocra.pibi.pibi_identifiant_gestionnaire</code>.
     * Numéro utilisé par le gestionnaire pour identifier un PIBI dans son
     * système d'information.
     */
    val IDENTIFIANT_GESTIONNAIRE: TableField<Record, String?> = createField(DSL.name("pibi_identifiant_gestionnaire"), SQLDataType.CLOB, this, "Numéro utilisé par le gestionnaire pour identifier un PIBI dans son système d'information.")

    /**
     * The column <code>remocra.pibi.pibi_renversable</code>.
     */
    val RENVERSABLE: TableField<Record, Boolean?> = createField(DSL.name("pibi_renversable"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>remocra.pibi.pibi_dispositif_inviolabilite</code>.
     */
    val DISPOSITIF_INVIOLABILITE: TableField<Record, Boolean?> = createField(DSL.name("pibi_dispositif_inviolabilite"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>remocra.pibi.pibi_modele_pibi_id</code>.
     */
    val MODELE_PIBI_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_modele_pibi_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pibi.pibi_marque_pibi_id</code>.
     */
    val MARQUE_PIBI_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_marque_pibi_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pibi.pibi_pena_id</code>. PENA auquel le PIBI
     * est rattaché (cas d'une citerne ou d'un point d'aspiration par exemple)
     */
    val PENA_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_pena_id"), SQLDataType.UUID, this, "PENA auquel le PIBI est rattaché (cas d'une citerne ou d'un point d'aspiration par exemple)")

    /**
     * The column <code>remocra.pibi.pibi_jumele_id</code>.
     */
    val JUMELE_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_jumele_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pibi.pibi_reservoir_id</code>.
     */
    val RESERVOIR_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_reservoir_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pibi.pibi_debit_renforce</code>.
     */
    val DEBIT_RENFORCE: TableField<Record, Boolean?> = createField(DSL.name("pibi_debit_renforce"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>remocra.pibi.pibi_type_canalisation_id</code>.
     */
    val TYPE_CANALISATION_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_type_canalisation_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pibi.pibi_type_reseau_id</code>.
     */
    val TYPE_RESEAU_ID: TableField<Record, UUID?> = createField(DSL.name("pibi_type_reseau_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pibi.pibi_diametre_canalisation</code>.
     */
    val DIAMETRE_CANALISATION: TableField<Record, Int?> = createField(DSL.name("pibi_diametre_canalisation"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.pibi.pibi_surpresse</code>.
     */
    val SURPRESSE: TableField<Record, Boolean?> = createField(DSL.name("pibi_surpresse"), SQLDataType.BOOLEAN, this, "")

    /**
     * The column <code>remocra.pibi.pibi_additive</code>.
     */
    val ADDITIVE: TableField<Record, Boolean?> = createField(DSL.name("pibi_additive"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.pibi</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.pibi</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.pibi</code> table reference
     */
    constructor() : this(DSL.name("pibi"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PIBI, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PibiPath : Pibi, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): PibiPath = PibiPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PibiPath = PibiPath(alias, this)
        override fun `as`(alias: Table<*>): PibiPath = PibiPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = PIBI_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(PIBI__PIBI_PIBI_DIAMETRE_ID_FKEY, PIBI__PIBI_PIBI_ID_FKEY, PIBI__PIBI_PIBI_JUMELE_ID_FKEY, PIBI__PIBI_PIBI_MARQUE_PIBI_ID_FKEY, PIBI__PIBI_PIBI_MODELE_PIBI_ID_FKEY, PIBI__PIBI_PIBI_PENA_ID_FKEY, PIBI__PIBI_PIBI_RESERVOIR_ID_FKEY, PIBI__PIBI_PIBI_SERVICE_EAU_ID_FKEY, PIBI__PIBI_PIBI_TYPE_CANALISATION_ID_FKEY, PIBI__PIBI_PIBI_TYPE_RESEAU_ID_FKEY)

    private lateinit var _diametre: DiametrePath

    /**
     * Get the implicit join path to the <code>remocra.diametre</code> table.
     */
    fun diametre(): DiametrePath {
        if (!this::_diametre.isInitialized) {
            _diametre = DiametrePath(this, PIBI__PIBI_PIBI_DIAMETRE_ID_FKEY, null)
        }

        return _diametre
    }

    val diametre: DiametrePath
        get(): DiametrePath = diametre()

    private lateinit var _pei: PeiPath

    /**
     * Get the implicit join path to the <code>remocra.pei</code> table.
     */
    fun pei(): PeiPath {
        if (!this::_pei.isInitialized) {
            _pei = PeiPath(this, PIBI__PIBI_PIBI_ID_FKEY, null)
        }

        return _pei
    }

    val pei: PeiPath
        get(): PeiPath = pei()

    private lateinit var _pibi: PibiPath

    /**
     * Get the implicit join path to the <code>remocra.pibi</code> table.
     */
    fun pibi(): PibiPath {
        if (!this::_pibi.isInitialized) {
            _pibi = PibiPath(this, PIBI__PIBI_PIBI_JUMELE_ID_FKEY, null)
        }

        return _pibi
    }

    val pibi: PibiPath
        get(): PibiPath = pibi()

    private lateinit var _marquePibi: MarquePibiPath

    /**
     * Get the implicit join path to the <code>remocra.marque_pibi</code> table.
     */
    fun marquePibi(): MarquePibiPath {
        if (!this::_marquePibi.isInitialized) {
            _marquePibi = MarquePibiPath(this, PIBI__PIBI_PIBI_MARQUE_PIBI_ID_FKEY, null)
        }

        return _marquePibi
    }

    val marquePibi: MarquePibiPath
        get(): MarquePibiPath = marquePibi()

    private lateinit var _modelePibi: ModelePibiPath

    /**
     * Get the implicit join path to the <code>remocra.modele_pibi</code> table.
     */
    fun modelePibi(): ModelePibiPath {
        if (!this::_modelePibi.isInitialized) {
            _modelePibi = ModelePibiPath(this, PIBI__PIBI_PIBI_MODELE_PIBI_ID_FKEY, null)
        }

        return _modelePibi
    }

    val modelePibi: ModelePibiPath
        get(): ModelePibiPath = modelePibi()

    private lateinit var _pena: PenaPath

    /**
     * Get the implicit join path to the <code>remocra.pena</code> table.
     */
    fun pena(): PenaPath {
        if (!this::_pena.isInitialized) {
            _pena = PenaPath(this, PIBI__PIBI_PIBI_PENA_ID_FKEY, null)
        }

        return _pena
    }

    val pena: PenaPath
        get(): PenaPath = pena()

    private lateinit var _reservoir: ReservoirPath

    /**
     * Get the implicit join path to the <code>remocra.reservoir</code> table.
     */
    fun reservoir(): ReservoirPath {
        if (!this::_reservoir.isInitialized) {
            _reservoir = ReservoirPath(this, PIBI__PIBI_PIBI_RESERVOIR_ID_FKEY, null)
        }

        return _reservoir
    }

    val reservoir: ReservoirPath
        get(): ReservoirPath = reservoir()

    private lateinit var _organisme: OrganismePath

    /**
     * Get the implicit join path to the <code>remocra.organisme</code> table.
     */
    fun organisme(): OrganismePath {
        if (!this::_organisme.isInitialized) {
            _organisme = OrganismePath(this, PIBI__PIBI_PIBI_SERVICE_EAU_ID_FKEY, null)
        }

        return _organisme
    }

    val organisme: OrganismePath
        get(): OrganismePath = organisme()

    private lateinit var _typeCanalisation: TypeCanalisationPath

    /**
     * Get the implicit join path to the <code>remocra.type_canalisation</code>
     * table.
     */
    fun typeCanalisation(): TypeCanalisationPath {
        if (!this::_typeCanalisation.isInitialized) {
            _typeCanalisation = TypeCanalisationPath(this, PIBI__PIBI_PIBI_TYPE_CANALISATION_ID_FKEY, null)
        }

        return _typeCanalisation
    }

    val typeCanalisation: TypeCanalisationPath
        get(): TypeCanalisationPath = typeCanalisation()

    private lateinit var _typeReseau: TypeReseauPath

    /**
     * Get the implicit join path to the <code>remocra.type_reseau</code> table.
     */
    fun typeReseau(): TypeReseauPath {
        if (!this::_typeReseau.isInitialized) {
            _typeReseau = TypeReseauPath(this, PIBI__PIBI_PIBI_TYPE_RESEAU_ID_FKEY, null)
        }

        return _typeReseau
    }

    val typeReseau: TypeReseauPath
        get(): TypeReseauPath = typeReseau()
    override fun `as`(alias: String): Pibi = Pibi(DSL.name(alias), this)
    override fun `as`(alias: Name): Pibi = Pibi(alias, this)
    override fun `as`(alias: Table<*>): Pibi = Pibi(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Pibi = Pibi(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Pibi = Pibi(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Pibi = Pibi(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Pibi = Pibi(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Pibi = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Pibi = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Pibi = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Pibi = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Pibi = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Pibi = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Pibi = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Pibi = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Pibi = where(DSL.notExists(select))
}
