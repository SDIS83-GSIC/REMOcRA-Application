/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.OLDEB_CARACTERISTIQUE__OLDEB_CARACTERISTIQUE_OLDEB_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_LOCATAIRE__OLDEB_LOCATAIRE_OLDEB_LOCATAIRE_OLDEB_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_PKEY
import remocra.db.jooq.remocra.keys.OLDEB_PROPRIETE__OLDEB_PROPRIETE_OLDEB_PROPRIETE_OLDEB_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB__OLDEB_OLDEB_CADASTRA_SECTION_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB__OLDEB_OLDEB_CADASTRE_PARCELLE_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB__OLDEB_OLDEB_COMMUNE_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB__OLDEB_OLDEB_LIEU_DIT_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ACCES_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ZONE_URBANISME_ID_FKEY
import remocra.db.jooq.remocra.keys.OLDEB__OLDEB_OLDEB_VOIE_ID_FKEY
import remocra.db.jooq.remocra.tables.CadastreParcelle.CadastreParcellePath
import remocra.db.jooq.remocra.tables.CadastreSection.CadastreSectionPath
import remocra.db.jooq.remocra.tables.Commune.CommunePath
import remocra.db.jooq.remocra.tables.LieuDit.LieuDitPath
import remocra.db.jooq.remocra.tables.OldebCaracteristique.OldebCaracteristiquePath
import remocra.db.jooq.remocra.tables.OldebLocataire.OldebLocatairePath
import remocra.db.jooq.remocra.tables.OldebPropriete.OldebProprietePath
import remocra.db.jooq.remocra.tables.OldebTypeAcces.OldebTypeAccesPath
import remocra.db.jooq.remocra.tables.OldebTypeCaracteristique.OldebTypeCaracteristiquePath
import remocra.db.jooq.remocra.tables.OldebTypeZoneUrbanisme.OldebTypeZoneUrbanismePath
import remocra.db.jooq.remocra.tables.OldebVisite.OldebVisitePath
import remocra.db.jooq.remocra.tables.Voie.VoiePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Oldeb(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.oldeb</code>
         */
        val OLDEB: Oldeb = Oldeb()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.oldeb.oldeb_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("oldeb_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    /**
     * The column <code>remocra.oldeb.oldeb_commune_id</code>.
     */
    val COMMUNE_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_commune_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_cadastra_section_id</code>.
     */
    val CADASTRA_SECTION_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_cadastra_section_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_cadastre_parcelle_id</code>.
     */
    val CADASTRE_PARCELLE_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_cadastre_parcelle_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_oldeb_type_acces_id</code>.
     */
    val OLDEB_TYPE_ACCES_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_oldeb_type_acces_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_oldeb_type_zone_urbanisme_id</code>.
     */
    val OLDEB_TYPE_ZONE_URBANISME_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_oldeb_type_zone_urbanisme_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_num_voie</code>.
     */
    val NUM_VOIE: TableField<Record, String?> = createField(DSL.name("oldeb_num_voie"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_voie_id</code>.
     */
    val VOIE_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_voie_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_lieu_dit_id</code>.
     */
    val LIEU_DIT_ID: TableField<Record, UUID?> = createField(DSL.name("oldeb_lieu_dit_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_volume</code>.
     */
    val VOLUME: TableField<Record, Int?> = createField(DSL.name("oldeb_volume"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_largeur_acces</code>.
     */
    val LARGEUR_ACCES: TableField<Record, Int?> = createField(DSL.name("oldeb_largeur_acces"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_portail_electrique</code>.
     */
    val PORTAIL_ELECTRIQUE: TableField<Record, Boolean?> = createField(DSL.name("oldeb_portail_electrique"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_code_portail</code>.
     */
    val CODE_PORTAIL: TableField<Record, String?> = createField(DSL.name("oldeb_code_portail"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.oldeb.oldeb_actif</code>.
     */
    val ACTIF: TableField<Record, Boolean?> = createField(DSL.name("oldeb_actif"), SQLDataType.BOOLEAN, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.oldeb</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.oldeb</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.oldeb</code> table reference
     */
    constructor() : this(DSL.name("oldeb"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, OLDEB, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OldebPath : Oldeb, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): OldebPath = OldebPath(DSL.name(alias), this)
        override fun `as`(alias: Name): OldebPath = OldebPath(alias, this)
        override fun `as`(alias: Table<*>): OldebPath = OldebPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = OLDEB_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(OLDEB__OLDEB_OLDEB_CADASTRA_SECTION_ID_FKEY, OLDEB__OLDEB_OLDEB_CADASTRE_PARCELLE_ID_FKEY, OLDEB__OLDEB_OLDEB_COMMUNE_ID_FKEY, OLDEB__OLDEB_OLDEB_LIEU_DIT_ID_FKEY, OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ACCES_ID_FKEY, OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ZONE_URBANISME_ID_FKEY, OLDEB__OLDEB_OLDEB_VOIE_ID_FKEY)

    private lateinit var _cadastreSection: CadastreSectionPath

    /**
     * Get the implicit join path to the <code>remocra.cadastre_section</code>
     * table.
     */
    fun cadastreSection(): CadastreSectionPath {
        if (!this::_cadastreSection.isInitialized) {
            _cadastreSection = CadastreSectionPath(this, OLDEB__OLDEB_OLDEB_CADASTRA_SECTION_ID_FKEY, null)
        }

        return _cadastreSection
    }

    val cadastreSection: CadastreSectionPath
        get(): CadastreSectionPath = cadastreSection()

    private lateinit var _cadastreParcelle: CadastreParcellePath

    /**
     * Get the implicit join path to the <code>remocra.cadastre_parcelle</code>
     * table.
     */
    fun cadastreParcelle(): CadastreParcellePath {
        if (!this::_cadastreParcelle.isInitialized) {
            _cadastreParcelle = CadastreParcellePath(this, OLDEB__OLDEB_OLDEB_CADASTRE_PARCELLE_ID_FKEY, null)
        }

        return _cadastreParcelle
    }

    val cadastreParcelle: CadastreParcellePath
        get(): CadastreParcellePath = cadastreParcelle()

    private lateinit var _commune: CommunePath

    /**
     * Get the implicit join path to the <code>remocra.commune</code> table.
     */
    fun commune(): CommunePath {
        if (!this::_commune.isInitialized) {
            _commune = CommunePath(this, OLDEB__OLDEB_OLDEB_COMMUNE_ID_FKEY, null)
        }

        return _commune
    }

    val commune: CommunePath
        get(): CommunePath = commune()

    private lateinit var _lieuDit: LieuDitPath

    /**
     * Get the implicit join path to the <code>remocra.lieu_dit</code> table.
     */
    fun lieuDit(): LieuDitPath {
        if (!this::_lieuDit.isInitialized) {
            _lieuDit = LieuDitPath(this, OLDEB__OLDEB_OLDEB_LIEU_DIT_ID_FKEY, null)
        }

        return _lieuDit
    }

    val lieuDit: LieuDitPath
        get(): LieuDitPath = lieuDit()

    private lateinit var _oldebTypeAcces: OldebTypeAccesPath

    /**
     * Get the implicit join path to the <code>remocra.oldeb_type_acces</code>
     * table.
     */
    fun oldebTypeAcces(): OldebTypeAccesPath {
        if (!this::_oldebTypeAcces.isInitialized) {
            _oldebTypeAcces = OldebTypeAccesPath(this, OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ACCES_ID_FKEY, null)
        }

        return _oldebTypeAcces
    }

    val oldebTypeAcces: OldebTypeAccesPath
        get(): OldebTypeAccesPath = oldebTypeAcces()

    private lateinit var _oldebTypeZoneUrbanisme: OldebTypeZoneUrbanismePath

    /**
     * Get the implicit join path to the
     * <code>remocra.oldeb_type_zone_urbanisme</code> table.
     */
    fun oldebTypeZoneUrbanisme(): OldebTypeZoneUrbanismePath {
        if (!this::_oldebTypeZoneUrbanisme.isInitialized) {
            _oldebTypeZoneUrbanisme = OldebTypeZoneUrbanismePath(this, OLDEB__OLDEB_OLDEB_OLDEB_TYPE_ZONE_URBANISME_ID_FKEY, null)
        }

        return _oldebTypeZoneUrbanisme
    }

    val oldebTypeZoneUrbanisme: OldebTypeZoneUrbanismePath
        get(): OldebTypeZoneUrbanismePath = oldebTypeZoneUrbanisme()

    private lateinit var _voie: VoiePath

    /**
     * Get the implicit join path to the <code>remocra.voie</code> table.
     */
    fun voie(): VoiePath {
        if (!this::_voie.isInitialized) {
            _voie = VoiePath(this, OLDEB__OLDEB_OLDEB_VOIE_ID_FKEY, null)
        }

        return _voie
    }

    val voie: VoiePath
        get(): VoiePath = voie()

    private lateinit var _oldebCaracteristique: OldebCaracteristiquePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_caracteristique</code> table
     */
    fun oldebCaracteristique(): OldebCaracteristiquePath {
        if (!this::_oldebCaracteristique.isInitialized) {
            _oldebCaracteristique = OldebCaracteristiquePath(this, null, OLDEB_CARACTERISTIQUE__OLDEB_CARACTERISTIQUE_OLDEB_ID_FKEY.inverseKey)
        }

        return _oldebCaracteristique
    }

    val oldebCaracteristique: OldebCaracteristiquePath
        get(): OldebCaracteristiquePath = oldebCaracteristique()

    private lateinit var _oldebLocataire: OldebLocatairePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_locataire</code> table
     */
    fun oldebLocataire(): OldebLocatairePath {
        if (!this::_oldebLocataire.isInitialized) {
            _oldebLocataire = OldebLocatairePath(this, null, OLDEB_LOCATAIRE__OLDEB_LOCATAIRE_OLDEB_LOCATAIRE_OLDEB_ID_FKEY.inverseKey)
        }

        return _oldebLocataire
    }

    val oldebLocataire: OldebLocatairePath
        get(): OldebLocatairePath = oldebLocataire()

    private lateinit var _oldebPropriete: OldebProprietePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_propriete</code> table
     */
    fun oldebPropriete(): OldebProprietePath {
        if (!this::_oldebPropriete.isInitialized) {
            _oldebPropriete = OldebProprietePath(this, null, OLDEB_PROPRIETE__OLDEB_PROPRIETE_OLDEB_PROPRIETE_OLDEB_ID_FKEY.inverseKey)
        }

        return _oldebPropriete
    }

    val oldebPropriete: OldebProprietePath
        get(): OldebProprietePath = oldebPropriete()

    private lateinit var _oldebVisite: OldebVisitePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.oldeb_visite</code> table
     */
    fun oldebVisite(): OldebVisitePath {
        if (!this::_oldebVisite.isInitialized) {
            _oldebVisite = OldebVisitePath(this, null, OLDEB_VISITE__OLDEB_VISITE_OLDEB_VISITE_OLDEB_ID_FKEY.inverseKey)
        }

        return _oldebVisite
    }

    val oldebVisite: OldebVisitePath
        get(): OldebVisitePath = oldebVisite()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.oldeb_type_caracteristique</code> table
     */
    val oldebTypeCaracteristique: OldebTypeCaracteristiquePath
        get(): OldebTypeCaracteristiquePath = oldebCaracteristique().oldebTypeCaracteristique()
    override fun `as`(alias: String): Oldeb = Oldeb(DSL.name(alias), this)
    override fun `as`(alias: Name): Oldeb = Oldeb(alias, this)
    override fun `as`(alias: Table<*>): Oldeb = Oldeb(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Oldeb = Oldeb(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Oldeb = Oldeb(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Oldeb = Oldeb(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Oldeb = Oldeb(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Oldeb = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Oldeb = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Oldeb = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Oldeb = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Oldeb = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Oldeb = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Oldeb = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Oldeb = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Oldeb = where(DSL.notExists(select))
}
