/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.remocra.Remocra
import remocra.db.jooq.remocra.keys.L_TOURNEE_PEI__L_TOURNEE_PEI_TOURNEE_ID_FKEY
import remocra.db.jooq.remocra.keys.TOURNEE_PKEY
import remocra.db.jooq.remocra.keys.TOURNEE_TOURNEE_ORGANISME_ID_TOURNEE_LIBELLE_KEY
import remocra.db.jooq.remocra.keys.TOURNEE__TOURNEE_TOURNEE_ORGANISME_ID_FKEY
import remocra.db.jooq.remocra.keys.TOURNEE__TOURNEE_TOURNEE_RESERVATION_UTILISATEUR_ID_FKEY
import remocra.db.jooq.remocra.tables.LTourneePei.LTourneePeiPath
import remocra.db.jooq.remocra.tables.Organisme.OrganismePath
import remocra.db.jooq.remocra.tables.Pei.PeiPath
import remocra.db.jooq.remocra.tables.Utilisateur.UtilisateurPath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Tournee(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.tournee</code>
         */
        val TOURNEE: Tournee = Tournee()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.tournee.tournee_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("tournee_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.tournee.tournee_actif</code>.
     */
    val ACTIF: TableField<Record, Boolean?> = createField(DSL.name("tournee_actif"), SQLDataType.BOOLEAN.nullable(false), this, "")

    /**
     * The column <code>remocra.tournee.tournee_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("tournee_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.tournee.tournee_organisme_id</code>. Identifiant
     * de l'organisme à qui est affecté cette tournée
     */
    val ORGANISME_ID: TableField<Record, UUID?> = createField(DSL.name("tournee_organisme_id"), SQLDataType.UUID.nullable(false), this, "Identifiant de l'organisme à qui est affecté cette tournée")

    /**
     * The column <code>remocra.tournee.tournee_etat</code>.
     */
    val ETAT: TableField<Record, Int?> = createField(DSL.name("tournee_etat"), SQLDataType.INTEGER, this, "")

    /**
     * The column
     * <code>remocra.tournee.tournee_reservation_utilisateur_id</code>.
     * Identifiant de l'utilisateur ayant réservé la tournée depuis
     * l'application mobile
     */
    val RESERVATION_UTILISATEUR_ID: TableField<Record, UUID?> = createField(DSL.name("tournee_reservation_utilisateur_id"), SQLDataType.UUID, this, "Identifiant de l'utilisateur ayant réservé la tournée depuis l'application mobile")

    /**
     * The column <code>remocra.tournee.tournee_date_synchronisation</code>.
     * Date de synchronisation depuis l'application mobile
     */
    val DATE_SYNCHRONISATION: TableField<Record, ZonedDateTime?> = createField(DSL.name("tournee_date_synchronisation"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "Date de synchronisation depuis l'application mobile", ZonedDateTimeBinding())

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.tournee</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.tournee</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.tournee</code> table reference
     */
    constructor() : this(DSL.name("tournee"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TOURNEE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TourneePath : Tournee, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): TourneePath = TourneePath(DSL.name(alias), this)
        override fun `as`(alias: Name): TourneePath = TourneePath(alias, this)
        override fun `as`(alias: Table<*>): TourneePath = TourneePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = TOURNEE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(TOURNEE_TOURNEE_ORGANISME_ID_TOURNEE_LIBELLE_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(TOURNEE__TOURNEE_TOURNEE_ORGANISME_ID_FKEY, TOURNEE__TOURNEE_TOURNEE_RESERVATION_UTILISATEUR_ID_FKEY)

    private lateinit var _organisme: OrganismePath

    /**
     * Get the implicit join path to the <code>remocra.organisme</code> table.
     */
    fun organisme(): OrganismePath {
        if (!this::_organisme.isInitialized) {
            _organisme = OrganismePath(this, TOURNEE__TOURNEE_TOURNEE_ORGANISME_ID_FKEY, null)
        }

        return _organisme
    }

    val organisme: OrganismePath
        get(): OrganismePath = organisme()

    private lateinit var _utilisateur: UtilisateurPath

    /**
     * Get the implicit join path to the <code>remocra.utilisateur</code> table.
     */
    fun utilisateur(): UtilisateurPath {
        if (!this::_utilisateur.isInitialized) {
            _utilisateur = UtilisateurPath(this, TOURNEE__TOURNEE_TOURNEE_RESERVATION_UTILISATEUR_ID_FKEY, null)
        }

        return _utilisateur
    }

    val utilisateur: UtilisateurPath
        get(): UtilisateurPath = utilisateur()

    private lateinit var _lTourneePei: LTourneePeiPath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_tournee_pei</code> table
     */
    fun lTourneePei(): LTourneePeiPath {
        if (!this::_lTourneePei.isInitialized) {
            _lTourneePei = LTourneePeiPath(this, null, L_TOURNEE_PEI__L_TOURNEE_PEI_TOURNEE_ID_FKEY.inverseKey)
        }

        return _lTourneePei
    }

    val lTourneePei: LTourneePeiPath
        get(): LTourneePeiPath = lTourneePei()

    /**
     * Get the implicit many-to-many join path to the <code>remocra.pei</code>
     * table
     */
    val pei: PeiPath
        get(): PeiPath = lTourneePei().pei()
    override fun `as`(alias: String): Tournee = Tournee(DSL.name(alias), this)
    override fun `as`(alias: Name): Tournee = Tournee(alias, this)
    override fun `as`(alias: Table<*>): Tournee = Tournee(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tournee = Tournee(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tournee = Tournee(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Tournee = Tournee(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Tournee = Tournee(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Tournee = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Tournee = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Tournee = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Tournee = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Tournee = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Tournee = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Tournee = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Tournee = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Tournee = where(DSL.notExists(select))
}
