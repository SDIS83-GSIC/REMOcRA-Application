/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.remocra.tables.pojos

import org.locationtech.jts.geom.Geometry
import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class PenaAspiration(
    val penaAspirationId: UUID,
    val penaAspirationPenaId: UUID?,
    val penaAspirationGeometrie: Geometry?,
    val penaAspirationNumero: String,
    val penaAspirationEstNormalise: Boolean,
    val penaAspirationHauteurSuperieure_3Metres: Boolean,
    val penaAspirationTypePenaAspirationId: UUID?,
    val penaAspirationEstDeporte: Boolean,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: PenaAspiration = other as PenaAspiration
        if (this.penaAspirationId != o.penaAspirationId) {
            return false
        }
        if (this.penaAspirationPenaId == null) {
            if (o.penaAspirationPenaId != null) {
                return false
            }
        } else if (this.penaAspirationPenaId != o.penaAspirationPenaId) {
            return false
        }
        if (this.penaAspirationGeometrie == null) {
            if (o.penaAspirationGeometrie != null) {
                return false
            }
        } else if (this.penaAspirationGeometrie != o.penaAspirationGeometrie) {
            return false
        }
        if (this.penaAspirationNumero != o.penaAspirationNumero) {
            return false
        }
        if (this.penaAspirationEstNormalise != o.penaAspirationEstNormalise) {
            return false
        }
        if (this.penaAspirationHauteurSuperieure_3Metres != o.penaAspirationHauteurSuperieure_3Metres) {
            return false
        }
        if (this.penaAspirationTypePenaAspirationId == null) {
            if (o.penaAspirationTypePenaAspirationId != null) {
                return false
            }
        } else if (this.penaAspirationTypePenaAspirationId != o.penaAspirationTypePenaAspirationId) {
            return false
        }
        if (this.penaAspirationEstDeporte != o.penaAspirationEstDeporte) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.penaAspirationId.hashCode()
        result = prime * result + (if (this.penaAspirationPenaId == null) 0 else this.penaAspirationPenaId.hashCode())
        result = prime * result + (if (this.penaAspirationGeometrie == null) 0 else this.penaAspirationGeometrie.hashCode())
        result = prime * result + this.penaAspirationNumero.hashCode()
        result = prime * result + this.penaAspirationEstNormalise.hashCode()
        result = prime * result + this.penaAspirationHauteurSuperieure_3Metres.hashCode()
        result = prime * result + (if (this.penaAspirationTypePenaAspirationId == null) 0 else this.penaAspirationTypePenaAspirationId.hashCode())
        result = prime * result + this.penaAspirationEstDeporte.hashCode()
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("PenaAspiration (")

        sb.append(penaAspirationId)
        sb.append(", ").append(penaAspirationPenaId)
        sb.append(", ").append(penaAspirationGeometrie)
        sb.append(", ").append(penaAspirationNumero)
        sb.append(", ").append(penaAspirationEstNormalise)
        sb.append(", ").append(penaAspirationHauteurSuperieure_3Metres)
        sb.append(", ").append(penaAspirationTypePenaAspirationId)
        sb.append(", ").append(penaAspirationEstDeporte)

        sb.append(")")
        return sb.toString()
    }
}
