/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.tables.pojos

import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class VoieLaterale(
    val voieLateraleId: UUID,
    val voieLateraleVoieVoisine: UUID,
    val voieLateraleAngle: Double?,
    val voieLateraleGauche: Boolean?,
    val voieLateraleDroite: Boolean?,
    val voieLateraleTraversable: Boolean?,
    val voieLateraleAccessible: Boolean?,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: VoieLaterale = other as VoieLaterale
        if (this.voieLateraleId != o.voieLateraleId) {
            return false
        }
        if (this.voieLateraleVoieVoisine != o.voieLateraleVoieVoisine) {
            return false
        }
        if (this.voieLateraleAngle == null) {
            if (o.voieLateraleAngle != null) {
                return false
            }
        } else if (this.voieLateraleAngle != o.voieLateraleAngle) {
            return false
        }
        if (this.voieLateraleGauche == null) {
            if (o.voieLateraleGauche != null) {
                return false
            }
        } else if (this.voieLateraleGauche != o.voieLateraleGauche) {
            return false
        }
        if (this.voieLateraleDroite == null) {
            if (o.voieLateraleDroite != null) {
                return false
            }
        } else if (this.voieLateraleDroite != o.voieLateraleDroite) {
            return false
        }
        if (this.voieLateraleTraversable == null) {
            if (o.voieLateraleTraversable != null) {
                return false
            }
        } else if (this.voieLateraleTraversable != o.voieLateraleTraversable) {
            return false
        }
        if (this.voieLateraleAccessible == null) {
            if (o.voieLateraleAccessible != null) {
                return false
            }
        } else if (this.voieLateraleAccessible != o.voieLateraleAccessible) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.voieLateraleId.hashCode()
        result = prime * result + this.voieLateraleVoieVoisine.hashCode()
        result = prime * result + (if (this.voieLateraleAngle == null) 0 else this.voieLateraleAngle.hashCode())
        result = prime * result + (if (this.voieLateraleGauche == null) 0 else this.voieLateraleGauche.hashCode())
        result = prime * result + (if (this.voieLateraleDroite == null) 0 else this.voieLateraleDroite.hashCode())
        result = prime * result + (if (this.voieLateraleTraversable == null) 0 else this.voieLateraleTraversable.hashCode())
        result = prime * result + (if (this.voieLateraleAccessible == null) 0 else this.voieLateraleAccessible.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("VoieLaterale (")

        sb.append(voieLateraleId)
        sb.append(", ").append(voieLateraleVoieVoisine)
        sb.append(", ").append(voieLateraleAngle)
        sb.append(", ").append(voieLateraleGauche)
        sb.append(", ").append(voieLateraleDroite)
        sb.append(", ").append(voieLateraleTraversable)
        sb.append(", ").append(voieLateraleAccessible)

        sb.append(")")
        return sb.toString()
    }
}
