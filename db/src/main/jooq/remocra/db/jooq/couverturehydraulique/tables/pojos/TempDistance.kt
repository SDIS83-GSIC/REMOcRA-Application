/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.tables.pojos

import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.couverturehydraulique.enums.TypeSide
import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * Table permettant de stocker les informations nécessaire au parcours de graph;
 * basé sur l'algorithme de Dijkstra
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class TempDistance(
    val tempDistanceId: UUID,
    val tempDistanceSommet: UUID,
    val tempDistanceVoieCourante: UUID,
    val tempDistanceVoiePrecedente: UUID,
    val tempDistanceDistance: Double?,
    val tempDistanceSide: TypeSide?,
    val tempDistanceTraversable: Boolean?,
    val tempDistancePeiStart: UUID?,
    val tempDistanceGeometrie: Geometry?,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: TempDistance = other as TempDistance
        if (this.tempDistanceId != o.tempDistanceId) {
            return false
        }
        if (this.tempDistanceSommet != o.tempDistanceSommet) {
            return false
        }
        if (this.tempDistanceVoieCourante != o.tempDistanceVoieCourante) {
            return false
        }
        if (this.tempDistanceVoiePrecedente != o.tempDistanceVoiePrecedente) {
            return false
        }
        if (this.tempDistanceDistance == null) {
            if (o.tempDistanceDistance != null) {
                return false
            }
        } else if (this.tempDistanceDistance != o.tempDistanceDistance) {
            return false
        }
        if (this.tempDistanceSide == null) {
            if (o.tempDistanceSide != null) {
                return false
            }
        } else if (this.tempDistanceSide != o.tempDistanceSide) {
            return false
        }
        if (this.tempDistanceTraversable == null) {
            if (o.tempDistanceTraversable != null) {
                return false
            }
        } else if (this.tempDistanceTraversable != o.tempDistanceTraversable) {
            return false
        }
        if (this.tempDistancePeiStart == null) {
            if (o.tempDistancePeiStart != null) {
                return false
            }
        } else if (this.tempDistancePeiStart != o.tempDistancePeiStart) {
            return false
        }
        if (this.tempDistanceGeometrie == null) {
            if (o.tempDistanceGeometrie != null) {
                return false
            }
        } else if (this.tempDistanceGeometrie != o.tempDistanceGeometrie) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.tempDistanceId.hashCode()
        result = prime * result + this.tempDistanceSommet.hashCode()
        result = prime * result + this.tempDistanceVoieCourante.hashCode()
        result = prime * result + this.tempDistanceVoiePrecedente.hashCode()
        result = prime * result + (if (this.tempDistanceDistance == null) 0 else this.tempDistanceDistance.hashCode())
        result = prime * result + (if (this.tempDistanceSide == null) 0 else this.tempDistanceSide.hashCode())
        result = prime * result + (if (this.tempDistanceTraversable == null) 0 else this.tempDistanceTraversable.hashCode())
        result = prime * result + (if (this.tempDistancePeiStart == null) 0 else this.tempDistancePeiStart.hashCode())
        result = prime * result + (if (this.tempDistanceGeometrie == null) 0 else this.tempDistanceGeometrie.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("TempDistance (")

        sb.append(tempDistanceId)
        sb.append(", ").append(tempDistanceSommet)
        sb.append(", ").append(tempDistanceVoieCourante)
        sb.append(", ").append(tempDistanceVoiePrecedente)
        sb.append(", ").append(tempDistanceDistance)
        sb.append(", ").append(tempDistanceSide)
        sb.append(", ").append(tempDistanceTraversable)
        sb.append(", ").append(tempDistancePeiStart)
        sb.append(", ").append(tempDistanceGeometrie)

        sb.append(")")
        return sb.toString()
    }
}
