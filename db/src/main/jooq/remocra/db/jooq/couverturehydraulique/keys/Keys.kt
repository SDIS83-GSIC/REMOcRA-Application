/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.keys

import org.jooq.ForeignKey
import org.jooq.Record
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import remocra.db.jooq.couverturehydraulique.tables.Batiment
import remocra.db.jooq.couverturehydraulique.tables.CouvertureTracee
import remocra.db.jooq.couverturehydraulique.tables.CouvertureTraceePei
import remocra.db.jooq.couverturehydraulique.tables.Etude
import remocra.db.jooq.couverturehydraulique.tables.LEtudeCommune
import remocra.db.jooq.couverturehydraulique.tables.LEtudeDocument
import remocra.db.jooq.couverturehydraulique.tables.PeiProjet
import remocra.db.jooq.couverturehydraulique.tables.Reseau
import remocra.db.jooq.couverturehydraulique.tables.Sommet
import remocra.db.jooq.couverturehydraulique.tables.TempDistance
import remocra.db.jooq.couverturehydraulique.tables.TypeEtude
import remocra.db.jooq.couverturehydraulique.tables.VoieLaterale
import remocra.db.jooq.remocra.keys.COMMUNE_PKEY
import remocra.db.jooq.remocra.keys.DIAMETRE_PKEY
import remocra.db.jooq.remocra.keys.DOCUMENT_PKEY
import remocra.db.jooq.remocra.keys.NATURE_DECI_PKEY
import remocra.db.jooq.remocra.keys.ORGANISME_PKEY
import remocra.db.jooq.remocra.tables.Commune
import remocra.db.jooq.remocra.tables.Diametre
import remocra.db.jooq.remocra.tables.Document
import remocra.db.jooq.remocra.tables.NatureDeci
import remocra.db.jooq.remocra.tables.Organisme

// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val BATIMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Batiment.BATIMENT, DSL.name("batiment_pkey"), arrayOf(Batiment.BATIMENT.ID), true)
val COUVERTURE_TRACEE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(CouvertureTracee.COUVERTURE_TRACEE, DSL.name("couverture_tracee_pkey"), arrayOf(CouvertureTracee.COUVERTURE_TRACEE.LABEL, CouvertureTracee.COUVERTURE_TRACEE.ETUDE_ID), true)
val COUVERTURE_TRACEE_PEI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(CouvertureTraceePei.COUVERTURE_TRACEE_PEI, DSL.name("couverture_tracee_pei_pkey"), arrayOf(CouvertureTraceePei.COUVERTURE_TRACEE_PEI.ID, CouvertureTraceePei.COUVERTURE_TRACEE_PEI.ETUDE_ID, CouvertureTraceePei.COUVERTURE_TRACEE_PEI.DISTANCE), true)
val ETUDE_ETUDE_NUMERO_KEY: UniqueKey<Record> = Internal.createUniqueKey(Etude.ETUDE, DSL.name("etude_etude_numero_key"), arrayOf(Etude.ETUDE.NUMERO), true)
val ETUDE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Etude.ETUDE, DSL.name("etude_pkey"), arrayOf(Etude.ETUDE.ID), true)
val L_ETUDE_COMMUNE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LEtudeCommune.L_ETUDE_COMMUNE, DSL.name("l_etude_commune_pkey"), arrayOf(LEtudeCommune.L_ETUDE_COMMUNE.ETUDE_ID, LEtudeCommune.L_ETUDE_COMMUNE.COMMUNE_ID), true)
val L_ETUDE_DOCUMENT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LEtudeDocument.L_ETUDE_DOCUMENT, DSL.name("l_etude_document_pkey"), arrayOf(LEtudeDocument.L_ETUDE_DOCUMENT.ETUDE_ID, LEtudeDocument.L_ETUDE_DOCUMENT.DOCUMENT_ID), true)
val PEI_PROJET_PKEY: UniqueKey<Record> = Internal.createUniqueKey(PeiProjet.PEI_PROJET, DSL.name("pei_projet_pkey"), arrayOf(PeiProjet.PEI_PROJET.ID), true)
val RESEAU_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Reseau.RESEAU, DSL.name("reseau_pkey"), arrayOf(Reseau.RESEAU.ID), true)
val SOMMET_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Sommet.SOMMET, DSL.name("sommet_pkey"), arrayOf(Sommet.SOMMET.ID), true)
val TEMP_DISTANCE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TempDistance.TEMP_DISTANCE, DSL.name("temp_distance_pkey"), arrayOf(TempDistance.TEMP_DISTANCE.ID), true)
val TYPE_ETUDE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(TypeEtude.TYPE_ETUDE, DSL.name("type_etude_pkey"), arrayOf(TypeEtude.TYPE_ETUDE.ID), true)
val TYPE_ETUDE_TYPE_ETUDE_CODE_KEY: UniqueKey<Record> = Internal.createUniqueKey(TypeEtude.TYPE_ETUDE, DSL.name("type_etude_type_etude_code_key"), arrayOf(TypeEtude.TYPE_ETUDE.CODE), true)
val VOIE_LATERALE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(VoieLaterale.VOIE_LATERALE, DSL.name("voie_laterale_pkey"), arrayOf(VoieLaterale.VOIE_LATERALE.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val BATIMENT__BATIMENT_BATIMENT_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Batiment.BATIMENT, DSL.name("batiment_batiment_etude_id_fkey"), arrayOf(Batiment.BATIMENT.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val COUVERTURE_TRACEE__COUVERTURE_TRACEE_COUVERTURE_TRACEE_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(CouvertureTracee.COUVERTURE_TRACEE, DSL.name("couverture_tracee_couverture_tracee_etude_id_fkey"), arrayOf(CouvertureTracee.COUVERTURE_TRACEE.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val COUVERTURE_TRACEE_PEI__COUVERTURE_TRACEE_PEI_COUVERTURE_TRACEE_PEI_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(CouvertureTraceePei.COUVERTURE_TRACEE_PEI, DSL.name("couverture_tracee_pei_couverture_tracee_pei_etude_id_fkey"), arrayOf(CouvertureTraceePei.COUVERTURE_TRACEE_PEI.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val ETUDE__ETUDE_ETUDE_ORGANISME_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Etude.ETUDE, DSL.name("etude_etude_organisme_id_fkey"), arrayOf(Etude.ETUDE.ORGANISME_ID), ORGANISME_PKEY, arrayOf(Organisme.ORGANISME.ID), true)
val ETUDE__ETUDE_ETUDE_TYPE_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Etude.ETUDE, DSL.name("etude_etude_type_etude_id_fkey"), arrayOf(Etude.ETUDE.TYPE_ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.TYPE_ETUDE_PKEY, arrayOf(TypeEtude.TYPE_ETUDE.ID), true)
val L_ETUDE_COMMUNE__L_ETUDE_COMMUNE_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LEtudeCommune.L_ETUDE_COMMUNE, DSL.name("l_etude_commune_commune_id_fkey"), arrayOf(LEtudeCommune.L_ETUDE_COMMUNE.COMMUNE_ID), COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val L_ETUDE_COMMUNE__L_ETUDE_COMMUNE_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LEtudeCommune.L_ETUDE_COMMUNE, DSL.name("l_etude_commune_etude_id_fkey"), arrayOf(LEtudeCommune.L_ETUDE_COMMUNE.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val L_ETUDE_DOCUMENT__L_ETUDE_DOCUMENT_DOCUMENT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LEtudeDocument.L_ETUDE_DOCUMENT, DSL.name("l_etude_document_document_id_fkey"), arrayOf(LEtudeDocument.L_ETUDE_DOCUMENT.DOCUMENT_ID), DOCUMENT_PKEY, arrayOf(Document.DOCUMENT.ID), true)
val L_ETUDE_DOCUMENT__L_ETUDE_DOCUMENT_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LEtudeDocument.L_ETUDE_DOCUMENT, DSL.name("l_etude_document_etude_id_fkey"), arrayOf(LEtudeDocument.L_ETUDE_DOCUMENT.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val PEI_PROJET__PEI_PROJET_PEI_PROJET_DIAMETRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PeiProjet.PEI_PROJET, DSL.name("pei_projet_pei_projet_diametre_id_fkey"), arrayOf(PeiProjet.PEI_PROJET.DIAMETRE_ID), DIAMETRE_PKEY, arrayOf(Diametre.DIAMETRE.ID), true)
val PEI_PROJET__PEI_PROJET_PEI_PROJET_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PeiProjet.PEI_PROJET, DSL.name("pei_projet_pei_projet_etude_id_fkey"), arrayOf(PeiProjet.PEI_PROJET.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val PEI_PROJET__PEI_PROJET_PEI_PROJET_NATURE_DECI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PeiProjet.PEI_PROJET, DSL.name("pei_projet_pei_projet_nature_deci_id_fkey"), arrayOf(PeiProjet.PEI_PROJET.NATURE_DECI_ID), NATURE_DECI_PKEY, arrayOf(NatureDeci.NATURE_DECI.ID), true)
val RESEAU__RESEAU_RESEAU_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Reseau.RESEAU, DSL.name("reseau_reseau_etude_id_fkey"), arrayOf(Reseau.RESEAU.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val SOMMET__SOMMET_SOMMET_ETUDE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Sommet.SOMMET, DSL.name("sommet_sommet_etude_id_fkey"), arrayOf(Sommet.SOMMET.ETUDE_ID), remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY, arrayOf(Etude.ETUDE.ID), true)
val TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_SOMMET_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(TempDistance.TEMP_DISTANCE, DSL.name("temp_distance_temp_distance_sommet_fkey"), arrayOf(TempDistance.TEMP_DISTANCE.SOMMET), remocra.db.jooq.couverturehydraulique.keys.SOMMET_PKEY, arrayOf(Sommet.SOMMET.ID), true)
val TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_COURANTE_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(TempDistance.TEMP_DISTANCE, DSL.name("temp_distance_temp_distance_voie_courante_fkey"), arrayOf(TempDistance.TEMP_DISTANCE.VOIE_COURANTE), remocra.db.jooq.couverturehydraulique.keys.RESEAU_PKEY, arrayOf(Reseau.RESEAU.ID), true)
val TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_PRECEDENTE_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(TempDistance.TEMP_DISTANCE, DSL.name("temp_distance_temp_distance_voie_precedente_fkey"), arrayOf(TempDistance.TEMP_DISTANCE.VOIE_PRECEDENTE), remocra.db.jooq.couverturehydraulique.keys.RESEAU_PKEY, arrayOf(Reseau.RESEAU.ID), true)
val VOIE_LATERALE__VOIE_LATERALE_VOIE_LATERALE_VOIE_VOISINE_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(VoieLaterale.VOIE_LATERALE, DSL.name("voie_laterale_voie_laterale_voie_voisine_fkey"), arrayOf(VoieLaterale.VOIE_LATERALE.VOIE_VOISINE), remocra.db.jooq.couverturehydraulique.keys.RESEAU_PKEY, arrayOf(Reseau.RESEAU.ID), true)
