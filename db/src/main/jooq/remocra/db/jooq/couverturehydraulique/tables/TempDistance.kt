/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.couverturehydraulique.Couverturehydraulique
import remocra.db.jooq.couverturehydraulique.enums.TypeSide
import remocra.db.jooq.couverturehydraulique.keys.TEMP_DISTANCE_PKEY
import remocra.db.jooq.couverturehydraulique.keys.TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_SOMMET_FKEY
import remocra.db.jooq.couverturehydraulique.keys.TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_COURANTE_FKEY
import remocra.db.jooq.couverturehydraulique.keys.TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_PRECEDENTE_FKEY
import remocra.db.jooq.couverturehydraulique.tables.Reseau.ReseauPath
import remocra.db.jooq.couverturehydraulique.tables.Sommet.SommetPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * Table permettant de stocker les informations nécessaire au parcours de graph;
 * basé sur l'algorithme de Dijkstra
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class TempDistance(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Couverturehydraulique.COUVERTUREHYDRAULIQUE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment("Table permettant de stocker les informations nécessaire au parcours de graph; basé sur l'algorithme de Dijkstra"),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>couverturehydraulique.temp_distance</code>
         */
        val TEMP_DISTANCE: TempDistance = TempDistance()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("temp_distance_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_sommet</code>.
     * Identifiant du sommet que l'on atteint
     */
    val SOMMET: TableField<Record, UUID?> = createField(DSL.name("temp_distance_sommet"), SQLDataType.UUID.nullable(false), this, "Identifiant du sommet que l'on atteint")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_voie_courante</code>.
     * Identifiant de la voie que l'on emprunte
     */
    val VOIE_COURANTE: TableField<Record, UUID?> = createField(DSL.name("temp_distance_voie_courante"), SQLDataType.UUID.nullable(false), this, "Identifiant de la voie que l'on emprunte")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_voie_precedente</code>.
     * Identifiant de la voie empruntée pour arriver à la voie courante. En
     * remontant les prédéceseurs, on peut reconsituer le chemin le plus court
     */
    val VOIE_PRECEDENTE: TableField<Record, UUID?> = createField(DSL.name("temp_distance_voie_precedente"), SQLDataType.UUID.nullable(false), this, "Identifiant de la voie empruntée pour arriver à la voie courante. En remontant les prédéceseurs, on peut reconsituer le chemin le plus court")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_distance</code>.
     * Distance parcourue depuis le départ en empruntant cette voie
     */
    val DISTANCE: TableField<Record, Double?> = createField(DSL.name("temp_distance_distance"), SQLDataType.DOUBLE, this, "Distance parcourue depuis le départ en empruntant cette voie")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_side</code>.
     * Indique sur quel côté de la voie tracer le buffer si la voie n'est pas
     * traversable (renseigné par l'algo de calcul de la couverture hydraulique
     */
    val SIDE: TableField<Record, TypeSide?> = createField(DSL.name("temp_distance_side"), SQLDataType.VARCHAR.asEnumDataType(TypeSide::class.java), this, "Indique sur quel côté de la voie tracer le buffer si la voie n'est pas traversable (renseigné par l'algo de calcul de la couverture hydraulique")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_traversable</code>.
     * Indique si la voie est traversable
     */
    val TRAVERSABLE: TableField<Record, Boolean?> = createField(DSL.name("temp_distance_traversable"), SQLDataType.BOOLEAN, this, "Indique si la voie est traversable")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_pei_start</code>.
     * Identifiant du PEI depuis lequel on effectue notre parcours
     */
    val PEI_START: TableField<Record, UUID?> = createField(DSL.name("temp_distance_pei_start"), SQLDataType.UUID, this, "Identifiant du PEI depuis lequel on effectue notre parcours")

    /**
     * The column
     * <code>couverturehydraulique.temp_distance.temp_distance_geometrie</code>.
     * Buffer de la couverture hydraulique de la voie empruntée
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("temp_distance_geometrie"), SQLDataType.GEOMETRY, this, "Buffer de la couverture hydraulique de la voie empruntée", GeometryBinding())

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>couverturehydraulique.temp_distance</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>couverturehydraulique.temp_distance</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>couverturehydraulique.temp_distance</code> table reference
     */
    constructor() : this(DSL.name("temp_distance"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, TEMP_DISTANCE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TempDistancePath : TempDistance, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): TempDistancePath = TempDistancePath(DSL.name(alias), this)
        override fun `as`(alias: Name): TempDistancePath = TempDistancePath(alias, this)
        override fun `as`(alias: Table<*>): TempDistancePath = TempDistancePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Couverturehydraulique.COUVERTUREHYDRAULIQUE
    override fun getPrimaryKey(): UniqueKey<Record> = TEMP_DISTANCE_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_SOMMET_FKEY, TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_COURANTE_FKEY, TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_PRECEDENTE_FKEY)

    private lateinit var _sommet: SommetPath

    /**
     * Get the implicit join path to the
     * <code>couverturehydraulique.sommet</code> table.
     */
    fun sommet(): SommetPath {
        if (!this::_sommet.isInitialized) {
            _sommet = SommetPath(this, TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_SOMMET_FKEY, null)
        }

        return _sommet
    }

    val sommet: SommetPath
        get(): SommetPath = sommet()

    private lateinit var _tempDistanceTempDistanceVoieCouranteFkey: ReseauPath

    /**
     * Get the implicit join path to the
     * <code>couverturehydraulique.reseau</code> table, via the
     * <code>temp_distance_temp_distance_voie_courante_fkey</code> key.
     */
    fun tempDistanceTempDistanceVoieCouranteFkey(): ReseauPath {
        if (!this::_tempDistanceTempDistanceVoieCouranteFkey.isInitialized) {
            _tempDistanceTempDistanceVoieCouranteFkey = ReseauPath(this, TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_COURANTE_FKEY, null)
        }

        return _tempDistanceTempDistanceVoieCouranteFkey
    }

    val tempDistanceTempDistanceVoieCouranteFkey: ReseauPath
        get(): ReseauPath = tempDistanceTempDistanceVoieCouranteFkey()

    private lateinit var _tempDistanceTempDistanceVoiePrecedenteFkey: ReseauPath

    /**
     * Get the implicit join path to the
     * <code>couverturehydraulique.reseau</code> table, via the
     * <code>temp_distance_temp_distance_voie_precedente_fkey</code> key.
     */
    fun tempDistanceTempDistanceVoiePrecedenteFkey(): ReseauPath {
        if (!this::_tempDistanceTempDistanceVoiePrecedenteFkey.isInitialized) {
            _tempDistanceTempDistanceVoiePrecedenteFkey = ReseauPath(this, TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_PRECEDENTE_FKEY, null)
        }

        return _tempDistanceTempDistanceVoiePrecedenteFkey
    }

    val tempDistanceTempDistanceVoiePrecedenteFkey: ReseauPath
        get(): ReseauPath = tempDistanceTempDistanceVoiePrecedenteFkey()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_polygone_temp_distance"), "((geometrytype(temp_distance_geometrie) = 'POLYGON'::text))", true),
    )
    override fun `as`(alias: String): TempDistance = TempDistance(DSL.name(alias), this)
    override fun `as`(alias: Name): TempDistance = TempDistance(alias, this)
    override fun `as`(alias: Table<*>): TempDistance = TempDistance(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): TempDistance = TempDistance(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): TempDistance = TempDistance(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): TempDistance = TempDistance(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): TempDistance = TempDistance(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): TempDistance = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): TempDistance = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): TempDistance = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): TempDistance = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): TempDistance = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): TempDistance = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): TempDistance = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): TempDistance = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): TempDistance = where(DSL.notExists(select))
}
