/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.couverturehydraulique.Couverturehydraulique
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class PlusProchePei(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Couverturehydraulique.COUVERTUREHYDRAULIQUE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function(),
    where,
) {
    companion object {

        /**
         * The reference instance of
         * <code>couverturehydraulique.plus_proche_pei</code>
         */
        val PLUS_PROCHE_PEI: PlusProchePei = PlusProchePei()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>couverturehydraulique.plus_proche_pei.pei</code>.
     */
    val PEI: TableField<Record, UUID?> = createField(DSL.name("pei"), SQLDataType.UUID, this, "")

    /**
     * The column <code>couverturehydraulique.plus_proche_pei.chemin</code>.
     */
    val CHEMIN: TableField<Record, String?> = createField(DSL.name("chemin"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>couverturehydraulique.plus_proche_pei.dist</code>.
     */
    val DIST: TableField<Record, Double?> = createField(DSL.name("dist"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        arrayOf(
            DSL.value(null, SQLDataType.GEOMETRY.asConvertedDataType(GeometryBinding())),
            DSL.value(null, SQLDataType.INTEGER),
            DSL.value(null, SQLDataType.UUID),
        ),
        null,
    )
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)

    /**
     * Create an aliased <code>couverturehydraulique.plus_proche_pei</code>
     * table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>couverturehydraulique.plus_proche_pei</code>
     * table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>couverturehydraulique.plus_proche_pei</code> table
     * reference
     */
    constructor() : this(DSL.name("plus_proche_pei"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Couverturehydraulique.COUVERTUREHYDRAULIQUE
    override fun `as`(alias: String): PlusProchePei = PlusProchePei(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): PlusProchePei = PlusProchePei(alias, this, parameters)
    override fun `as`(alias: Table<*>): PlusProchePei = PlusProchePei(alias.qualifiedName, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlusProchePei = PlusProchePei(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlusProchePei = PlusProchePei(name, null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlusProchePei = PlusProchePei(name.qualifiedName, null, parameters)

    /**
     * Call this table-valued function
     */
    fun call(
        geomclic: Geometry?,
        distanceMaxParcours: Int?,
        idreseauimporte: UUID?,
    ): PlusProchePei = PlusProchePei(
        DSL.name("plus_proche_pei"),
        null,
        arrayOf(
            DSL.value(geomclic, SQLDataType.GEOMETRY.asConvertedDataType(GeometryBinding())),
            DSL.value(distanceMaxParcours, SQLDataType.INTEGER),
            DSL.value(idreseauimporte, SQLDataType.UUID),
        ),
    ).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
        geomclic: Field<Geometry?>,
        distanceMaxParcours: Field<Int?>,
        idreseauimporte: Field<UUID?>,
    ): PlusProchePei = PlusProchePei(
        DSL.name("plus_proche_pei"),
        null,
        arrayOf(
            geomclic,
            distanceMaxParcours,
            idreseauimporte,
        ),
    ).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
