/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.couverturehydraulique.Couverturehydraulique
import remocra.db.jooq.couverturehydraulique.keys.RESEAU_PKEY
import remocra.db.jooq.couverturehydraulique.keys.RESEAU__RESEAU_RESEAU_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_COURANTE_FKEY
import remocra.db.jooq.couverturehydraulique.keys.TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_PRECEDENTE_FKEY
import remocra.db.jooq.couverturehydraulique.keys.VOIE_LATERALE__VOIE_LATERALE_VOIE_LATERALE_VOIE_VOISINE_FKEY
import remocra.db.jooq.couverturehydraulique.tables.Etude.EtudePath
import remocra.db.jooq.couverturehydraulique.tables.TempDistance.TempDistancePath
import remocra.db.jooq.couverturehydraulique.tables.VoieLaterale.VoieLateralePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Reseau(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Couverturehydraulique.COUVERTUREHYDRAULIQUE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>couverturehydraulique.reseau</code>
         */
        val RESEAU: Reseau = Reseau()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>couverturehydraulique.reseau.reseau_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("reseau_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>couverturehydraulique.reseau.reseau_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("reseau_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    /**
     * The column
     * <code>couverturehydraulique.reseau.reseau_sommet_source</code>. Sommet
     * source de la voie (déterminé par la création de la topologie (fonction
     * sql))
     */
    val SOMMET_SOURCE: TableField<Record, UUID?> = createField(DSL.name("reseau_sommet_source"), SQLDataType.UUID, this, "Sommet source de la voie (déterminé par la création de la topologie (fonction sql))")

    /**
     * The column
     * <code>couverturehydraulique.reseau.reseau_sommet_destination</code>.
     * Sommet de destination de la voie (déterminé par la création de la
     * topologie (fonction sql))
     */
    val SOMMET_DESTINATION: TableField<Record, UUID?> = createField(DSL.name("reseau_sommet_destination"), SQLDataType.UUID, this, "Sommet de destination de la voie (déterminé par la création de la topologie (fonction sql))")

    /**
     * The column <code>couverturehydraulique.reseau.reseau_pei_troncon</code>.
     * Identifiant du pei si la voie relie un pei au réseau routier, NULL sinon
     */
    val PEI_TRONCON: TableField<Record, UUID?> = createField(DSL.name("reseau_pei_troncon"), SQLDataType.UUID, this, "Identifiant du pei si la voie relie un pei au réseau routier, NULL sinon")

    /**
     * The column <code>couverturehydraulique.reseau.reseau_traversable</code>.
     * Indique si l'on peut ou non traverser cette voie
     */
    val TRAVERSABLE: TableField<Record, Boolean?> = createField(DSL.name("reseau_traversable"), SQLDataType.BOOLEAN, this, "Indique si l'on peut ou non traverser cette voie")

    /**
     * The column <code>couverturehydraulique.reseau.reseau_sens_unique</code>.
     * Indique si la voie est à sens unique. Le sens est celui de la
     * digitalisation de la géométrie
     */
    val SENS_UNIQUE: TableField<Record, Boolean?> = createField(DSL.name("reseau_sens_unique"), SQLDataType.BOOLEAN, this, "Indique si la voie est à sens unique. Le sens est celui de la digitalisation de la géométrie")

    /**
     * The column <code>couverturehydraulique.reseau.reseau_niveau</code>.
     * Niveau de la voie (ex: -1 pour un tunnel, 1 pour un pont, etc) si
     * celle-ci est au-dessus ou en dessous du réseau routier
     */
    val NIVEAU: TableField<Record, Int?> = createField(DSL.name("reseau_niveau"), SQLDataType.INTEGER, this, "Niveau de la voie (ex: -1 pour un tunnel, 1 pour un pont, etc) si celle-ci est au-dessus ou en dessous du réseau routier")

    /**
     * The column <code>couverturehydraulique.reseau.reseau_etude_id</code>.
     */
    val ETUDE_ID: TableField<Record, UUID?> = createField(DSL.name("reseau_etude_id"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>couverturehydraulique.reseau</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>couverturehydraulique.reseau</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>couverturehydraulique.reseau</code> table reference
     */
    constructor() : this(DSL.name("reseau"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RESEAU, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ReseauPath : Reseau, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): ReseauPath = ReseauPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ReseauPath = ReseauPath(alias, this)
        override fun `as`(alias: Table<*>): ReseauPath = ReseauPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Couverturehydraulique.COUVERTUREHYDRAULIQUE
    override fun getPrimaryKey(): UniqueKey<Record> = RESEAU_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(RESEAU__RESEAU_RESEAU_ETUDE_ID_FKEY)

    private lateinit var _etude: EtudePath

    /**
     * Get the implicit join path to the
     * <code>couverturehydraulique.etude</code> table.
     */
    fun etude(): EtudePath {
        if (!this::_etude.isInitialized) {
            _etude = EtudePath(this, RESEAU__RESEAU_RESEAU_ETUDE_ID_FKEY, null)
        }

        return _etude
    }

    val etude: EtudePath
        get(): EtudePath = etude()

    private lateinit var _tempDistanceTempDistanceVoieCouranteFkey: TempDistancePath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.temp_distance</code> table, via the
     * <code>temp_distance_temp_distance_voie_courante_fkey</code> key
     */
    fun tempDistanceTempDistanceVoieCouranteFkey(): TempDistancePath {
        if (!this::_tempDistanceTempDistanceVoieCouranteFkey.isInitialized) {
            _tempDistanceTempDistanceVoieCouranteFkey = TempDistancePath(this, null, TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_COURANTE_FKEY.inverseKey)
        }

        return _tempDistanceTempDistanceVoieCouranteFkey
    }

    val tempDistanceTempDistanceVoieCouranteFkey: TempDistancePath
        get(): TempDistancePath = tempDistanceTempDistanceVoieCouranteFkey()

    private lateinit var _tempDistanceTempDistanceVoiePrecedenteFkey: TempDistancePath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.temp_distance</code> table, via the
     * <code>temp_distance_temp_distance_voie_precedente_fkey</code> key
     */
    fun tempDistanceTempDistanceVoiePrecedenteFkey(): TempDistancePath {
        if (!this::_tempDistanceTempDistanceVoiePrecedenteFkey.isInitialized) {
            _tempDistanceTempDistanceVoiePrecedenteFkey = TempDistancePath(this, null, TEMP_DISTANCE__TEMP_DISTANCE_TEMP_DISTANCE_VOIE_PRECEDENTE_FKEY.inverseKey)
        }

        return _tempDistanceTempDistanceVoiePrecedenteFkey
    }

    val tempDistanceTempDistanceVoiePrecedenteFkey: TempDistancePath
        get(): TempDistancePath = tempDistanceTempDistanceVoiePrecedenteFkey()

    private lateinit var _voieLaterale: VoieLateralePath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.voie_laterale</code> table
     */
    fun voieLaterale(): VoieLateralePath {
        if (!this::_voieLaterale.isInitialized) {
            _voieLaterale = VoieLateralePath(this, null, VOIE_LATERALE__VOIE_LATERALE_VOIE_LATERALE_VOIE_VOISINE_FKEY.inverseKey)
        }

        return _voieLaterale
    }

    val voieLaterale: VoieLateralePath
        get(): VoieLateralePath = voieLaterale()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_line_reseau"), "((geometrytype(reseau_geometrie) = 'LINESTRING'::text))", true),
    )
    override fun `as`(alias: String): Reseau = Reseau(DSL.name(alias), this)
    override fun `as`(alias: Name): Reseau = Reseau(alias, this)
    override fun `as`(alias: Table<*>): Reseau = Reseau(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Reseau = Reseau(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Reseau = Reseau(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Reseau = Reseau(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Reseau = Reseau(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Reseau = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Reseau = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Reseau = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Reseau = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Reseau = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Reseau = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Reseau = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Reseau = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Reseau = where(DSL.notExists(select))
}
