/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.tables.pojos

import org.locationtech.jts.geom.Geometry
import java.io.Serializable
import java.util.UUID
import javax.annotation.processing.Generated

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
data class Reseau(
    val reseauId: UUID,
    val reseauGeometrie: Geometry,
    val reseauSommetSource: UUID?,
    val reseauSommetDestination: UUID?,
    val reseauPeiTroncon: UUID?,
    val reseauTraversable: Boolean?,
    val reseauSensUnique: Boolean?,
    val reseauNiveau: Int?,
    val reseauEtudeId: UUID?,
) : Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other == null) {
            return false
        }
        if (this::class != other::class) {
            return false
        }
        val o: Reseau = other as Reseau
        if (this.reseauId != o.reseauId) {
            return false
        }
        if (this.reseauGeometrie != o.reseauGeometrie) {
            return false
        }
        if (this.reseauSommetSource == null) {
            if (o.reseauSommetSource != null) {
                return false
            }
        } else if (this.reseauSommetSource != o.reseauSommetSource) {
            return false
        }
        if (this.reseauSommetDestination == null) {
            if (o.reseauSommetDestination != null) {
                return false
            }
        } else if (this.reseauSommetDestination != o.reseauSommetDestination) {
            return false
        }
        if (this.reseauPeiTroncon == null) {
            if (o.reseauPeiTroncon != null) {
                return false
            }
        } else if (this.reseauPeiTroncon != o.reseauPeiTroncon) {
            return false
        }
        if (this.reseauTraversable == null) {
            if (o.reseauTraversable != null) {
                return false
            }
        } else if (this.reseauTraversable != o.reseauTraversable) {
            return false
        }
        if (this.reseauSensUnique == null) {
            if (o.reseauSensUnique != null) {
                return false
            }
        } else if (this.reseauSensUnique != o.reseauSensUnique) {
            return false
        }
        if (this.reseauNiveau == null) {
            if (o.reseauNiveau != null) {
                return false
            }
        } else if (this.reseauNiveau != o.reseauNiveau) {
            return false
        }
        if (this.reseauEtudeId == null) {
            if (o.reseauEtudeId != null) {
                return false
            }
        } else if (this.reseauEtudeId != o.reseauEtudeId) {
            return false
        }
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + this.reseauId.hashCode()
        result = prime * result + this.reseauGeometrie.hashCode()
        result = prime * result + (if (this.reseauSommetSource == null) 0 else this.reseauSommetSource.hashCode())
        result = prime * result + (if (this.reseauSommetDestination == null) 0 else this.reseauSommetDestination.hashCode())
        result = prime * result + (if (this.reseauPeiTroncon == null) 0 else this.reseauPeiTroncon.hashCode())
        result = prime * result + (if (this.reseauTraversable == null) 0 else this.reseauTraversable.hashCode())
        result = prime * result + (if (this.reseauSensUnique == null) 0 else this.reseauSensUnique.hashCode())
        result = prime * result + (if (this.reseauNiveau == null) 0 else this.reseauNiveau.hashCode())
        result = prime * result + (if (this.reseauEtudeId == null) 0 else this.reseauEtudeId.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("Reseau (")

        sb.append(reseauId)
        sb.append(", ").append(reseauGeometrie)
        sb.append(", ").append(reseauSommetSource)
        sb.append(", ").append(reseauSommetDestination)
        sb.append(", ").append(reseauPeiTroncon)
        sb.append(", ").append(reseauTraversable)
        sb.append(", ").append(reseauSensUnique)
        sb.append(", ").append(reseauNiveau)
        sb.append(", ").append(reseauEtudeId)

        sb.append(")")
        return sb.toString()
    }
}
