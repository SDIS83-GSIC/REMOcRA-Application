/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.couverturehydraulique.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.bindings.ZonedDateTimeBinding
import remocra.db.jooq.couverturehydraulique.Couverturehydraulique
import remocra.db.jooq.couverturehydraulique.enums.EtudeStatut
import remocra.db.jooq.couverturehydraulique.keys.BATIMENT__BATIMENT_BATIMENT_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.COUVERTURE_TRACEE_PEI__COUVERTURE_TRACEE_PEI_COUVERTURE_TRACEE_PEI_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.COUVERTURE_TRACEE__COUVERTURE_TRACEE_COUVERTURE_TRACEE_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.ETUDE_ETUDE_NUMERO_KEY
import remocra.db.jooq.couverturehydraulique.keys.ETUDE_PKEY
import remocra.db.jooq.couverturehydraulique.keys.ETUDE__ETUDE_ETUDE_ORGANISME_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.ETUDE__ETUDE_ETUDE_TYPE_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.L_ETUDE_COMMUNE__L_ETUDE_COMMUNE_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.L_ETUDE_DOCUMENT__L_ETUDE_DOCUMENT_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.PEI_PROJET__PEI_PROJET_PEI_PROJET_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.RESEAU__RESEAU_RESEAU_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.keys.SOMMET__SOMMET_SOMMET_ETUDE_ID_FKEY
import remocra.db.jooq.couverturehydraulique.tables.Batiment.BatimentPath
import remocra.db.jooq.couverturehydraulique.tables.CouvertureTracee.CouvertureTraceePath
import remocra.db.jooq.couverturehydraulique.tables.CouvertureTraceePei.CouvertureTraceePeiPath
import remocra.db.jooq.couverturehydraulique.tables.LEtudeCommune.LEtudeCommunePath
import remocra.db.jooq.couverturehydraulique.tables.LEtudeDocument.LEtudeDocumentPath
import remocra.db.jooq.couverturehydraulique.tables.PeiProjet.PeiProjetPath
import remocra.db.jooq.couverturehydraulique.tables.Reseau.ReseauPath
import remocra.db.jooq.couverturehydraulique.tables.Sommet.SommetPath
import remocra.db.jooq.couverturehydraulique.tables.TypeEtude.TypeEtudePath
import remocra.db.jooq.remocra.tables.Commune.CommunePath
import remocra.db.jooq.remocra.tables.Document.DocumentPath
import remocra.db.jooq.remocra.tables.Organisme.OrganismePath
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Etude(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Couverturehydraulique.COUVERTUREHYDRAULIQUE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>couverturehydraulique.etude</code>
         */
        val ETUDE: Etude = Etude()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>couverturehydraulique.etude.etude_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("etude_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>couverturehydraulique.etude.etude_type_etude_id</code>.
     */
    val TYPE_ETUDE_ID: TableField<Record, UUID?> = createField(DSL.name("etude_type_etude_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>couverturehydraulique.etude.etude_numero</code>.
     */
    val NUMERO: TableField<Record, String?> = createField(DSL.name("etude_numero"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>couverturehydraulique.etude.etude_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("etude_libelle"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>couverturehydraulique.etude.etude_description</code>.
     */
    val DESCRIPTION: TableField<Record, String?> = createField(DSL.name("etude_description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>couverturehydraulique.etude.etude_organisme_id</code>.
     */
    val ORGANISME_ID: TableField<Record, UUID?> = createField(DSL.name("etude_organisme_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>couverturehydraulique.etude.etude_date_maj</code>.
     */
    val DATE_MAJ: TableField<Record, ZonedDateTime?> = createField(DSL.name("etude_date_maj"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", ZonedDateTimeBinding())

    /**
     * The column <code>couverturehydraulique.etude.etude_statut</code>.
     */
    val STATUT: TableField<Record, EtudeStatut?> = createField(DSL.name("etude_statut"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(EtudeStatut::class.java), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>couverturehydraulique.etude</code> table
     * reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>couverturehydraulique.etude</code> table
     * reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>couverturehydraulique.etude</code> table reference
     */
    constructor() : this(DSL.name("etude"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, ETUDE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class EtudePath : Etude, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): EtudePath = EtudePath(DSL.name(alias), this)
        override fun `as`(alias: Name): EtudePath = EtudePath(alias, this)
        override fun `as`(alias: Table<*>): EtudePath = EtudePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Couverturehydraulique.COUVERTUREHYDRAULIQUE
    override fun getPrimaryKey(): UniqueKey<Record> = ETUDE_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(ETUDE_ETUDE_NUMERO_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(ETUDE__ETUDE_ETUDE_ORGANISME_ID_FKEY, ETUDE__ETUDE_ETUDE_TYPE_ETUDE_ID_FKEY)

    private lateinit var _organisme: OrganismePath

    /**
     * Get the implicit join path to the <code>remocra.organisme</code> table.
     */
    fun organisme(): OrganismePath {
        if (!this::_organisme.isInitialized) {
            _organisme = OrganismePath(this, ETUDE__ETUDE_ETUDE_ORGANISME_ID_FKEY, null)
        }

        return _organisme
    }

    val organisme: OrganismePath
        get(): OrganismePath = organisme()

    private lateinit var _typeEtude: TypeEtudePath

    /**
     * Get the implicit join path to the
     * <code>couverturehydraulique.type_etude</code> table.
     */
    fun typeEtude(): TypeEtudePath {
        if (!this::_typeEtude.isInitialized) {
            _typeEtude = TypeEtudePath(this, ETUDE__ETUDE_ETUDE_TYPE_ETUDE_ID_FKEY, null)
        }

        return _typeEtude
    }

    val typeEtude: TypeEtudePath
        get(): TypeEtudePath = typeEtude()

    private lateinit var _batiment: BatimentPath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.batiment</code> table
     */
    fun batiment(): BatimentPath {
        if (!this::_batiment.isInitialized) {
            _batiment = BatimentPath(this, null, BATIMENT__BATIMENT_BATIMENT_ETUDE_ID_FKEY.inverseKey)
        }

        return _batiment
    }

    val batiment: BatimentPath
        get(): BatimentPath = batiment()

    private lateinit var _couvertureTracee: CouvertureTraceePath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.couverture_tracee</code> table
     */
    fun couvertureTracee(): CouvertureTraceePath {
        if (!this::_couvertureTracee.isInitialized) {
            _couvertureTracee = CouvertureTraceePath(this, null, COUVERTURE_TRACEE__COUVERTURE_TRACEE_COUVERTURE_TRACEE_ETUDE_ID_FKEY.inverseKey)
        }

        return _couvertureTracee
    }

    val couvertureTracee: CouvertureTraceePath
        get(): CouvertureTraceePath = couvertureTracee()

    private lateinit var _couvertureTraceePei: CouvertureTraceePeiPath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.couverture_tracee_pei</code> table
     */
    fun couvertureTraceePei(): CouvertureTraceePeiPath {
        if (!this::_couvertureTraceePei.isInitialized) {
            _couvertureTraceePei = CouvertureTraceePeiPath(this, null, COUVERTURE_TRACEE_PEI__COUVERTURE_TRACEE_PEI_COUVERTURE_TRACEE_PEI_ETUDE_ID_FKEY.inverseKey)
        }

        return _couvertureTraceePei
    }

    val couvertureTraceePei: CouvertureTraceePeiPath
        get(): CouvertureTraceePeiPath = couvertureTraceePei()

    private lateinit var _lEtudeCommune: LEtudeCommunePath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.l_etude_commune</code> table
     */
    fun lEtudeCommune(): LEtudeCommunePath {
        if (!this::_lEtudeCommune.isInitialized) {
            _lEtudeCommune = LEtudeCommunePath(this, null, L_ETUDE_COMMUNE__L_ETUDE_COMMUNE_ETUDE_ID_FKEY.inverseKey)
        }

        return _lEtudeCommune
    }

    val lEtudeCommune: LEtudeCommunePath
        get(): LEtudeCommunePath = lEtudeCommune()

    private lateinit var _lEtudeDocument: LEtudeDocumentPath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.l_etude_document</code> table
     */
    fun lEtudeDocument(): LEtudeDocumentPath {
        if (!this::_lEtudeDocument.isInitialized) {
            _lEtudeDocument = LEtudeDocumentPath(this, null, L_ETUDE_DOCUMENT__L_ETUDE_DOCUMENT_ETUDE_ID_FKEY.inverseKey)
        }

        return _lEtudeDocument
    }

    val lEtudeDocument: LEtudeDocumentPath
        get(): LEtudeDocumentPath = lEtudeDocument()

    private lateinit var _peiProjet: PeiProjetPath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.pei_projet</code> table
     */
    fun peiProjet(): PeiProjetPath {
        if (!this::_peiProjet.isInitialized) {
            _peiProjet = PeiProjetPath(this, null, PEI_PROJET__PEI_PROJET_PEI_PROJET_ETUDE_ID_FKEY.inverseKey)
        }

        return _peiProjet
    }

    val peiProjet: PeiProjetPath
        get(): PeiProjetPath = peiProjet()

    private lateinit var _reseau: ReseauPath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.reseau</code> table
     */
    fun reseau(): ReseauPath {
        if (!this::_reseau.isInitialized) {
            _reseau = ReseauPath(this, null, RESEAU__RESEAU_RESEAU_ETUDE_ID_FKEY.inverseKey)
        }

        return _reseau
    }

    val reseau: ReseauPath
        get(): ReseauPath = reseau()

    private lateinit var _sommet: SommetPath

    /**
     * Get the implicit to-many join path to the
     * <code>couverturehydraulique.sommet</code> table
     */
    fun sommet(): SommetPath {
        if (!this::_sommet.isInitialized) {
            _sommet = SommetPath(this, null, SOMMET__SOMMET_SOMMET_ETUDE_ID_FKEY.inverseKey)
        }

        return _sommet
    }

    val sommet: SommetPath
        get(): SommetPath = sommet()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.commune</code> table
     */
    val commune: CommunePath
        get(): CommunePath = lEtudeCommune().commune()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.document</code> table
     */
    val document: DocumentPath
        get(): DocumentPath = lEtudeDocument().document()
    override fun `as`(alias: String): Etude = Etude(DSL.name(alias), this)
    override fun `as`(alias: Name): Etude = Etude(alias, this)
    override fun `as`(alias: Table<*>): Etude = Etude(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Etude = Etude(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Etude = Etude(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Etude = Etude(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Etude = Etude(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Etude = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Etude = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Etude = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Etude = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Etude = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Etude = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Etude = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Etude = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Etude = where(DSL.notExists(select))
}
