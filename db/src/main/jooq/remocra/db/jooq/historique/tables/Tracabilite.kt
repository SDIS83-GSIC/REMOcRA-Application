/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.historique.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.JSONB
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.AutoConverter
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.historique.Historique
import remocra.db.jooq.historique.enums.TypeObjet
import remocra.db.jooq.historique.enums.TypeOperation
import remocra.db.jooq.historique.keys.TRACABILITE_PKEY
import java.time.OffsetDateTime
import java.time.ZonedDateTime
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Tracabilite(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Historique.HISTORIQUE,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>historique.tracabilite</code>
         */
        val TRACABILITE: Tracabilite = Tracabilite()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>historique.tracabilite.tracabilite_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("tracabilite_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column
     * <code>historique.tracabilite.tracabilite_type_operation</code>.
     */
    val TYPE_OPERATION: TableField<Record, TypeOperation?> = createField(DSL.name("tracabilite_type_operation"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(TypeOperation::class.java), this, "")

    /**
     * The column <code>historique.tracabilite.tracabilite_date</code>.
     */
    val DATE: TableField<Record, ZonedDateTime?> = createField(DSL.name("tracabilite_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", AutoConverter<OffsetDateTime, ZonedDateTime>(OffsetDateTime::class.java, ZonedDateTime::class.java))

    /**
     * The column <code>historique.tracabilite.tracabilite_objet_id</code>.
     */
    val OBJET_ID: TableField<Record, UUID?> = createField(DSL.name("tracabilite_objet_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>historique.tracabilite.tracabilite_type_objet</code>.
     */
    val TYPE_OBJET: TableField<Record, TypeObjet?> = createField(DSL.name("tracabilite_type_objet"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(TypeObjet::class.java), this, "")

    /**
     * The column <code>historique.tracabilite.tracabilite_objet_data</code>.
     */
    val OBJET_DATA: TableField<Record, JSONB?> = createField(DSL.name("tracabilite_objet_data"), SQLDataType.JSONB.nullable(false), this, "")

    /**
     * The column <code>historique.tracabilite.tracabilite_auteur_id</code>.
     */
    val AUTEUR_ID: TableField<Record, UUID?> = createField(DSL.name("tracabilite_auteur_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>historique.tracabilite.tracabilite_auteur_data</code>.
     */
    val AUTEUR_DATA: TableField<Record, JSONB?> = createField(DSL.name("tracabilite_auteur_data"), SQLDataType.JSONB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>historique.tracabilite</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>historique.tracabilite</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>historique.tracabilite</code> table reference
     */
    constructor() : this(DSL.name("tracabilite"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Historique.HISTORIQUE
    override fun getPrimaryKey(): UniqueKey<Record> = TRACABILITE_PKEY
    override fun `as`(alias: String): Tracabilite = Tracabilite(DSL.name(alias), this)
    override fun `as`(alias: Name): Tracabilite = Tracabilite(alias, this)
    override fun `as`(alias: Table<*>): Tracabilite = Tracabilite(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Tracabilite = Tracabilite(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Tracabilite = Tracabilite(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Tracabilite = Tracabilite(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Tracabilite = Tracabilite(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Tracabilite = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Tracabilite = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Tracabilite = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Tracabilite = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Tracabilite = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Tracabilite = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Tracabilite = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Tracabilite = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Tracabilite = where(DSL.notExists(select))
}
