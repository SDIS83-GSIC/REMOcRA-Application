/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.Remocra
import remocra.db.jooq.keys.UTILISATEUR_PKEY
import remocra.db.jooq.keys.UTILISATEUR_UTILISATEUR_EMAIL_KEY
import remocra.db.jooq.keys.UTILISATEUR_UTILISATEUR_USERNAME_KEY
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Utilisateur(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.utilisateur</code>
         */
        val UTILISATEUR: Utilisateur = Utilisateur()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.utilisateur.utilisateur_id</code>.
     */
    val UTILISATEUR_ID: TableField<Record, UUID?> = createField(DSL.name("utilisateur_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.utilisateur.utilisateur_email</code>.
     */
    val UTILISATEUR_EMAIL: TableField<Record, String?> = createField(DSL.name("utilisateur_email"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.utilisateur.utilisateur_nom</code>.
     */
    val UTILISATEUR_NOM: TableField<Record, String?> = createField(DSL.name("utilisateur_nom"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.utilisateur.utilisateur_prenom</code>.
     */
    val UTILISATEUR_PRENOM: TableField<Record, String?> = createField(DSL.name("utilisateur_prenom"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.utilisateur.utilisateur_username</code>.
     */
    val UTILISATEUR_USERNAME: TableField<Record, String?> = createField(DSL.name("utilisateur_username"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.utilisateur</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.utilisateur</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.utilisateur</code> table reference
     */
    constructor() : this(DSL.name("utilisateur"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = UTILISATEUR_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(UTILISATEUR_UTILISATEUR_EMAIL_KEY, UTILISATEUR_UTILISATEUR_USERNAME_KEY)
    override fun `as`(alias: String): Utilisateur = Utilisateur(DSL.name(alias), this)
    override fun `as`(alias: Name): Utilisateur = Utilisateur(alias, this)
    override fun `as`(alias: Table<*>): Utilisateur = Utilisateur(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Utilisateur = Utilisateur(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Utilisateur = Utilisateur(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Utilisateur = Utilisateur(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Utilisateur = Utilisateur(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Utilisateur = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Utilisateur = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Utilisateur = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Utilisateur = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Utilisateur = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Utilisateur = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Utilisateur = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Utilisateur = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Utilisateur = where(DSL.notExists(select))
}
