/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Geometry
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import remocra.db.jooq.Remocra
import remocra.db.jooq.enums.Disponibilite
import remocra.db.jooq.enums.TypePei
import remocra.db.jooq.keys.L_PEI_ANOMALIE__L_PEI_ANOMALIE_PEI_ID_FKEY
import remocra.db.jooq.keys.PEI_PEI_NUMERO_COMPLET_KEY
import remocra.db.jooq.keys.PEI_PKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_AUTORITE_DECI_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_COMMUNE_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_CROISEMENT_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_DOMAINE_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_LIEU_DIT_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_MAINTENANCE_DECI_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_NATURE_DECI_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_NATURE_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_NIVEAU_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_SERVICE_PUBLIC_DECI_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_SITE_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_VOIE_ID_FKEY
import remocra.db.jooq.keys.PEI__PEI_PEI_ZONE_SPECIALE_ID_FKEY
import remocra.db.jooq.keys.PENA__PENA_PENA_ID_FKEY
import remocra.db.jooq.keys.PIBI__PIBI_PIBI_ID_FKEY
import remocra.db.jooq.keys.VISITE__VISITE_VISITE_PEI_ID_FKEY
import remocra.db.jooq.tables.Anomalie.AnomaliePath
import remocra.db.jooq.tables.Commune.CommunePath
import remocra.db.jooq.tables.Domaine.DomainePath
import remocra.db.jooq.tables.LPeiAnomalie.LPeiAnomaliePath
import remocra.db.jooq.tables.LieuDit.LieuDitPath
import remocra.db.jooq.tables.Nature.NaturePath
import remocra.db.jooq.tables.NatureDeci.NatureDeciPath
import remocra.db.jooq.tables.Niveau.NiveauPath
import remocra.db.jooq.tables.Organisme.OrganismePath
import remocra.db.jooq.tables.Pena.PenaPath
import remocra.db.jooq.tables.Pibi.PibiPath
import remocra.db.jooq.tables.Site.SitePath
import remocra.db.jooq.tables.Visite.VisitePath
import remocra.db.jooq.tables.Voie.VoiePath
import remocra.db.jooq.tables.ZoneIntegration.ZoneIntegrationPath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.3",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class Pei(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Remocra.REMOCRA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>remocra.pei</code>
         */
        val PEI: Pei = Pei()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>remocra.pei.pei_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("pei_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_annee_fabrication</code>.
     */
    val ANNEE_FABRICATION: TableField<Record, Int?> = createField(DSL.name("pei_annee_fabrication"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.pei.pei_type_pei</code>.
     */
    val TYPE_PEI: TableField<Record, TypePei?> = createField(DSL.name("pei_type_pei"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(TypePei::class.java), this, "")

    /**
     * The column <code>remocra.pei.pei_numero_voie</code>.
     */
    val NUMERO_VOIE: TableField<Record, Int?> = createField(DSL.name("pei_numero_voie"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>remocra.pei.pei_voie_id</code>.
     */
    val VOIE_ID: TableField<Record, UUID?> = createField(DSL.name("pei_voie_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_suffixe_voie</code>. BIS, TER etc.
     */
    val SUFFIXE_VOIE: TableField<Record, String?> = createField(DSL.name("pei_suffixe_voie"), SQLDataType.CLOB, this, "BIS, TER etc.")

    /**
     * The column <code>remocra.pei.pei_croisement_id</code>. Permet de donner
     * le nom de la deuxième voie si un PEI se trouve à un carrefour entre 2
     * voies
     */
    val CROISEMENT_ID: TableField<Record, UUID?> = createField(DSL.name("pei_croisement_id"), SQLDataType.UUID, this, "Permet de donner le nom de la deuxième voie si un PEI se trouve à un carrefour entre 2 voies")

    /**
     * The column <code>remocra.pei.pei_complement_adresse</code>. Exemple :
     * "derrière le panneau publicitaire lumineux"
     */
    val COMPLEMENT_ADRESSE: TableField<Record, String?> = createField(DSL.name("pei_complement_adresse"), SQLDataType.CLOB, this, "Exemple : \"derrière le panneau publicitaire lumineux\"")

    /**
     * The column <code>remocra.pei.pei_disponibilite_terrestre</code>.
     */
    val DISPONIBILITE_TERRESTRE: TableField<Record, Disponibilite?> = createField(DSL.name("pei_disponibilite_terrestre"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Disponibilite::class.java), this, "")

    /**
     * The column <code>remocra.pei.pei_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("pei_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_lieu_dit_id</code>.
     */
    val LIEU_DIT_ID: TableField<Record, UUID?> = createField(DSL.name("pei_lieu_dit_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_numero_complet</code>.
     */
    val NUMERO_COMPLET: TableField<Record, String?> = createField(DSL.name("pei_numero_complet"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_numero_interne</code>.
     */
    val NUMERO_INTERNE: TableField<Record, Int?> = createField(DSL.name("pei_numero_interne"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_observation</code>.
     */
    val OBSERVATION: TableField<Record, String?> = createField(DSL.name("pei_observation"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>remocra.pei.pei_commune_id</code>.
     */
    val COMMUNE_ID: TableField<Record, UUID?> = createField(DSL.name("pei_commune_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_domaine_id</code>.
     */
    val DOMAINE_ID: TableField<Record, UUID?> = createField(DSL.name("pei_domaine_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_nature_id</code>.
     */
    val NATURE_ID: TableField<Record, UUID?> = createField(DSL.name("pei_nature_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_nature_deci_id</code>.
     */
    val NATURE_DECI_ID: TableField<Record, UUID?> = createField(DSL.name("pei_nature_deci_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>remocra.pei.pei_zone_speciale_id</code>.
     */
    val ZONE_SPECIALE_ID: TableField<Record, UUID?> = createField(DSL.name("pei_zone_speciale_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_niveau_id</code>.
     */
    val NIVEAU_ID: TableField<Record, UUID?> = createField(DSL.name("pei_niveau_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_site_id</code>.
     */
    val SITE_ID: TableField<Record, UUID?> = createField(DSL.name("pei_site_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_autorite_deci_id</code>.
     */
    val AUTORITE_DECI_ID: TableField<Record, UUID?> = createField(DSL.name("pei_autorite_deci_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_service_public_deci_id</code>.
     */
    val SERVICE_PUBLIC_DECI_ID: TableField<Record, UUID?> = createField(DSL.name("pei_service_public_deci_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_maintenance_deci_id</code>.
     */
    val MAINTENANCE_DECI_ID: TableField<Record, UUID?> = createField(DSL.name("pei_maintenance_deci_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>remocra.pei.pei_en_face</code>. Sert à spécifier si le
     * PEI se trouve sur le trottoir d'en face de l'adresse indiquée
     */
    val EN_FACE: TableField<Record, Boolean?> = createField(DSL.name("pei_en_face"), SQLDataType.BOOLEAN, this, "Sert à spécifier si le PEI se trouve sur le trottoir d'en face de l'adresse indiquée")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>remocra.pei</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>remocra.pei</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>remocra.pei</code> table reference
     */
    constructor() : this(DSL.name("pei"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, PEI, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PeiPath : Pei, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): PeiPath = PeiPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PeiPath = PeiPath(alias, this)
        override fun `as`(alias: Table<*>): PeiPath = PeiPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Remocra.REMOCRA
    override fun getPrimaryKey(): UniqueKey<Record> = PEI_PKEY
    override fun getUniqueKeys(): List<UniqueKey<Record>> = listOf(PEI_PEI_NUMERO_COMPLET_KEY)
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(PEI__PEI_PEI_VOIE_ID_FKEY, PEI__PEI_PEI_CROISEMENT_ID_FKEY, PEI__PEI_PEI_LIEU_DIT_ID_FKEY, PEI__PEI_PEI_COMMUNE_ID_FKEY, PEI__PEI_PEI_DOMAINE_ID_FKEY, PEI__PEI_PEI_NATURE_ID_FKEY, PEI__PEI_PEI_NATURE_DECI_ID_FKEY, PEI__PEI_PEI_ZONE_SPECIALE_ID_FKEY, PEI__PEI_PEI_NIVEAU_ID_FKEY, PEI__PEI_PEI_SITE_ID_FKEY, PEI__PEI_PEI_AUTORITE_DECI_ID_FKEY, PEI__PEI_PEI_SERVICE_PUBLIC_DECI_ID_FKEY, PEI__PEI_PEI_MAINTENANCE_DECI_ID_FKEY)

    private lateinit var _peiPeiVoieIdFkey: VoiePath

    /**
     * Get the implicit join path to the <code>remocra.voie</code> table, via
     * the <code>pei_pei_voie_id_fkey</code> key.
     */
    fun peiPeiVoieIdFkey(): VoiePath {
        if (!this::_peiPeiVoieIdFkey.isInitialized) {
            _peiPeiVoieIdFkey = VoiePath(this, PEI__PEI_PEI_VOIE_ID_FKEY, null)
        }

        return _peiPeiVoieIdFkey
    }

    val peiPeiVoieIdFkey: VoiePath
        get(): VoiePath = peiPeiVoieIdFkey()

    private lateinit var _peiPeiCroisementIdFkey: VoiePath

    /**
     * Get the implicit join path to the <code>remocra.voie</code> table, via
     * the <code>pei_pei_croisement_id_fkey</code> key.
     */
    fun peiPeiCroisementIdFkey(): VoiePath {
        if (!this::_peiPeiCroisementIdFkey.isInitialized) {
            _peiPeiCroisementIdFkey = VoiePath(this, PEI__PEI_PEI_CROISEMENT_ID_FKEY, null)
        }

        return _peiPeiCroisementIdFkey
    }

    val peiPeiCroisementIdFkey: VoiePath
        get(): VoiePath = peiPeiCroisementIdFkey()

    private lateinit var _lieuDit: LieuDitPath

    /**
     * Get the implicit join path to the <code>remocra.lieu_dit</code> table.
     */
    fun lieuDit(): LieuDitPath {
        if (!this::_lieuDit.isInitialized) {
            _lieuDit = LieuDitPath(this, PEI__PEI_PEI_LIEU_DIT_ID_FKEY, null)
        }

        return _lieuDit
    }

    val lieuDit: LieuDitPath
        get(): LieuDitPath = lieuDit()

    private lateinit var _commune: CommunePath

    /**
     * Get the implicit join path to the <code>remocra.commune</code> table.
     */
    fun commune(): CommunePath {
        if (!this::_commune.isInitialized) {
            _commune = CommunePath(this, PEI__PEI_PEI_COMMUNE_ID_FKEY, null)
        }

        return _commune
    }

    val commune: CommunePath
        get(): CommunePath = commune()

    private lateinit var _domaine: DomainePath

    /**
     * Get the implicit join path to the <code>remocra.domaine</code> table.
     */
    fun domaine(): DomainePath {
        if (!this::_domaine.isInitialized) {
            _domaine = DomainePath(this, PEI__PEI_PEI_DOMAINE_ID_FKEY, null)
        }

        return _domaine
    }

    val domaine: DomainePath
        get(): DomainePath = domaine()

    private lateinit var _nature: NaturePath

    /**
     * Get the implicit join path to the <code>remocra.nature</code> table.
     */
    fun nature(): NaturePath {
        if (!this::_nature.isInitialized) {
            _nature = NaturePath(this, PEI__PEI_PEI_NATURE_ID_FKEY, null)
        }

        return _nature
    }

    val nature: NaturePath
        get(): NaturePath = nature()

    private lateinit var _natureDeci: NatureDeciPath

    /**
     * Get the implicit join path to the <code>remocra.nature_deci</code> table.
     */
    fun natureDeci(): NatureDeciPath {
        if (!this::_natureDeci.isInitialized) {
            _natureDeci = NatureDeciPath(this, PEI__PEI_PEI_NATURE_DECI_ID_FKEY, null)
        }

        return _natureDeci
    }

    val natureDeci: NatureDeciPath
        get(): NatureDeciPath = natureDeci()

    private lateinit var _zoneIntegration: ZoneIntegrationPath

    /**
     * Get the implicit join path to the <code>remocra.zone_integration</code>
     * table.
     */
    fun zoneIntegration(): ZoneIntegrationPath {
        if (!this::_zoneIntegration.isInitialized) {
            _zoneIntegration = ZoneIntegrationPath(this, PEI__PEI_PEI_ZONE_SPECIALE_ID_FKEY, null)
        }

        return _zoneIntegration
    }

    val zoneIntegration: ZoneIntegrationPath
        get(): ZoneIntegrationPath = zoneIntegration()

    private lateinit var _niveau: NiveauPath

    /**
     * Get the implicit join path to the <code>remocra.niveau</code> table.
     */
    fun niveau(): NiveauPath {
        if (!this::_niveau.isInitialized) {
            _niveau = NiveauPath(this, PEI__PEI_PEI_NIVEAU_ID_FKEY, null)
        }

        return _niveau
    }

    val niveau: NiveauPath
        get(): NiveauPath = niveau()

    private lateinit var _site: SitePath

    /**
     * Get the implicit join path to the <code>remocra.site</code> table.
     */
    fun site(): SitePath {
        if (!this::_site.isInitialized) {
            _site = SitePath(this, PEI__PEI_PEI_SITE_ID_FKEY, null)
        }

        return _site
    }

    val site: SitePath
        get(): SitePath = site()

    private lateinit var _peiPeiAutoriteDeciIdFkey: OrganismePath

    /**
     * Get the implicit join path to the <code>remocra.organisme</code> table,
     * via the <code>pei_pei_autorite_deci_id_fkey</code> key.
     */
    fun peiPeiAutoriteDeciIdFkey(): OrganismePath {
        if (!this::_peiPeiAutoriteDeciIdFkey.isInitialized) {
            _peiPeiAutoriteDeciIdFkey = OrganismePath(this, PEI__PEI_PEI_AUTORITE_DECI_ID_FKEY, null)
        }

        return _peiPeiAutoriteDeciIdFkey
    }

    val peiPeiAutoriteDeciIdFkey: OrganismePath
        get(): OrganismePath = peiPeiAutoriteDeciIdFkey()

    private lateinit var _peiPeiServicePublicDeciIdFkey: OrganismePath

    /**
     * Get the implicit join path to the <code>remocra.organisme</code> table,
     * via the <code>pei_pei_service_public_deci_id_fkey</code> key.
     */
    fun peiPeiServicePublicDeciIdFkey(): OrganismePath {
        if (!this::_peiPeiServicePublicDeciIdFkey.isInitialized) {
            _peiPeiServicePublicDeciIdFkey = OrganismePath(this, PEI__PEI_PEI_SERVICE_PUBLIC_DECI_ID_FKEY, null)
        }

        return _peiPeiServicePublicDeciIdFkey
    }

    val peiPeiServicePublicDeciIdFkey: OrganismePath
        get(): OrganismePath = peiPeiServicePublicDeciIdFkey()

    private lateinit var _peiPeiMaintenanceDeciIdFkey: OrganismePath

    /**
     * Get the implicit join path to the <code>remocra.organisme</code> table,
     * via the <code>pei_pei_maintenance_deci_id_fkey</code> key.
     */
    fun peiPeiMaintenanceDeciIdFkey(): OrganismePath {
        if (!this::_peiPeiMaintenanceDeciIdFkey.isInitialized) {
            _peiPeiMaintenanceDeciIdFkey = OrganismePath(this, PEI__PEI_PEI_MAINTENANCE_DECI_ID_FKEY, null)
        }

        return _peiPeiMaintenanceDeciIdFkey
    }

    val peiPeiMaintenanceDeciIdFkey: OrganismePath
        get(): OrganismePath = peiPeiMaintenanceDeciIdFkey()

    private lateinit var _lPeiAnomalie: LPeiAnomaliePath

    /**
     * Get the implicit to-many join path to the
     * <code>remocra.l_pei_anomalie</code> table
     */
    fun lPeiAnomalie(): LPeiAnomaliePath {
        if (!this::_lPeiAnomalie.isInitialized) {
            _lPeiAnomalie = LPeiAnomaliePath(this, null, L_PEI_ANOMALIE__L_PEI_ANOMALIE_PEI_ID_FKEY.inverseKey)
        }

        return _lPeiAnomalie
    }

    val lPeiAnomalie: LPeiAnomaliePath
        get(): LPeiAnomaliePath = lPeiAnomalie()

    private lateinit var _pena: PenaPath

    /**
     * Get the implicit to-many join path to the <code>remocra.pena</code> table
     */
    fun pena(): PenaPath {
        if (!this::_pena.isInitialized) {
            _pena = PenaPath(this, null, PENA__PENA_PENA_ID_FKEY.inverseKey)
        }

        return _pena
    }

    val pena: PenaPath
        get(): PenaPath = pena()

    private lateinit var _pibi: PibiPath

    /**
     * Get the implicit to-many join path to the <code>remocra.pibi</code> table
     */
    fun pibi(): PibiPath {
        if (!this::_pibi.isInitialized) {
            _pibi = PibiPath(this, null, PIBI__PIBI_PIBI_ID_FKEY.inverseKey)
        }

        return _pibi
    }

    val pibi: PibiPath
        get(): PibiPath = pibi()

    private lateinit var _visite: VisitePath

    /**
     * Get the implicit to-many join path to the <code>remocra.visite</code>
     * table
     */
    fun visite(): VisitePath {
        if (!this::_visite.isInitialized) {
            _visite = VisitePath(this, null, VISITE__VISITE_VISITE_PEI_ID_FKEY.inverseKey)
        }

        return _visite
    }

    val visite: VisitePath
        get(): VisitePath = visite()

    /**
     * Get the implicit many-to-many join path to the
     * <code>remocra.anomalie</code> table
     */
    val anomalie: AnomaliePath
        get(): AnomaliePath = lPeiAnomalie().anomalie()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_point_pei"), "((geometrytype(pei_geometrie) = 'POINT'::text))", true),
    )
    override fun `as`(alias: String): Pei = Pei(DSL.name(alias), this)
    override fun `as`(alias: Name): Pei = Pei(alias, this)
    override fun `as`(alias: Table<*>): Pei = Pei(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Pei = Pei(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Pei = Pei(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Pei = Pei(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Pei = Pei(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Pei = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Pei = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Pei = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Pei = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Pei = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Pei = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Pei = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Pei = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Pei = where(DSL.notExists(select))
}
