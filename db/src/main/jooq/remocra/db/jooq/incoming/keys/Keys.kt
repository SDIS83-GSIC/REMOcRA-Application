/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.incoming.keys

import org.jooq.ForeignKey
import org.jooq.Record
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import remocra.db.jooq.incoming.tables.Contact
import remocra.db.jooq.incoming.tables.Gestionnaire
import remocra.db.jooq.incoming.tables.LContactRole
import remocra.db.jooq.incoming.tables.LVisiteAnomalie
import remocra.db.jooq.incoming.tables.NewPei
import remocra.db.jooq.incoming.tables.PhotoPei
import remocra.db.jooq.incoming.tables.Tournee
import remocra.db.jooq.incoming.tables.Visite
import remocra.db.jooq.incoming.tables.VisiteCtrlDebitPression
import remocra.db.jooq.remocra.keys.ANOMALIE_PKEY
import remocra.db.jooq.remocra.keys.COMMUNE_PKEY
import remocra.db.jooq.remocra.keys.FONCTION_CONTACT_PKEY
import remocra.db.jooq.remocra.keys.LIEU_DIT_PKEY
import remocra.db.jooq.remocra.keys.NATURE_DECI_PKEY
import remocra.db.jooq.remocra.keys.NATURE_PKEY
import remocra.db.jooq.remocra.keys.PEI_PKEY
import remocra.db.jooq.remocra.keys.ROLE_PKEY
import remocra.db.jooq.remocra.keys.VOIE_PKEY
import remocra.db.jooq.remocra.tables.Anomalie
import remocra.db.jooq.remocra.tables.Commune
import remocra.db.jooq.remocra.tables.FonctionContact
import remocra.db.jooq.remocra.tables.LieuDit
import remocra.db.jooq.remocra.tables.Nature
import remocra.db.jooq.remocra.tables.NatureDeci
import remocra.db.jooq.remocra.tables.Pei
import remocra.db.jooq.remocra.tables.RoleContact
import remocra.db.jooq.remocra.tables.Voie

// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val CONTACT_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Contact.CONTACT, DSL.name("contact_pkey"), arrayOf(Contact.CONTACT.ID), true)
val GESTIONNAIRE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Gestionnaire.GESTIONNAIRE, DSL.name("gestionnaire_pkey"), arrayOf(Gestionnaire.GESTIONNAIRE.ID), true)
val L_CONTACT_ROLE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LContactRole.L_CONTACT_ROLE, DSL.name("l_contact_role_pkey"), arrayOf(LContactRole.L_CONTACT_ROLE.ROLE_ID, LContactRole.L_CONTACT_ROLE.CONTACT_ID), true)
val L_VISITE_ANOMALIE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(LVisiteAnomalie.L_VISITE_ANOMALIE, DSL.name("l_visite_anomalie_pkey"), arrayOf(LVisiteAnomalie.L_VISITE_ANOMALIE.VISITE_ID, LVisiteAnomalie.L_VISITE_ANOMALIE.ANOMALIE_ID), true)
val NEW_PEI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(NewPei.NEW_PEI, DSL.name("new_pei_pkey"), arrayOf(NewPei.NEW_PEI.ID), true)
val PHOTO_PEI_PKEY: UniqueKey<Record> = Internal.createUniqueKey(PhotoPei.PHOTO_PEI, DSL.name("photo_pei_pkey"), arrayOf(PhotoPei.PHOTO_PEI.PHOTO_ID), true)
val TOURNEE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Tournee.TOURNEE, DSL.name("tournee_pkey"), arrayOf(Tournee.TOURNEE.ID), true)
val VISITE_PKEY: UniqueKey<Record> = Internal.createUniqueKey(Visite.VISITE, DSL.name("visite_pkey"), arrayOf(Visite.VISITE.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val CONTACT__CONTACT_CONTACT_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_commune_id_fkey"), arrayOf(Contact.CONTACT.COMMUNE_ID), COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val CONTACT__CONTACT_CONTACT_FONCTION_CONTACT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_fonction_contact_id_fkey"), arrayOf(Contact.CONTACT.FONCTION_CONTACT_ID), FONCTION_CONTACT_PKEY, arrayOf(FonctionContact.FONCTION_CONTACT.ID), true)
val CONTACT__CONTACT_CONTACT_LIEU_DIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_lieu_dit_id_fkey"), arrayOf(Contact.CONTACT.LIEU_DIT_ID), LIEU_DIT_PKEY, arrayOf(LieuDit.LIEU_DIT.ID), true)
val CONTACT__CONTACT_CONTACT_VOIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_contact_voie_id_fkey"), arrayOf(Contact.CONTACT.VOIE_ID), VOIE_PKEY, arrayOf(Voie.VOIE.ID), true)
val CONTACT__CONTACT_GESTIONNAIRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Contact.CONTACT, DSL.name("contact_gestionnaire_id_fkey"), arrayOf(Contact.CONTACT.GESTIONNAIRE_ID), remocra.db.jooq.incoming.keys.GESTIONNAIRE_PKEY, arrayOf(Gestionnaire.GESTIONNAIRE.ID), true)
val L_CONTACT_ROLE__L_CONTACT_ROLE_CONTACT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactRole.L_CONTACT_ROLE, DSL.name("l_contact_role_contact_id_fkey"), arrayOf(LContactRole.L_CONTACT_ROLE.CONTACT_ID), remocra.db.jooq.incoming.keys.CONTACT_PKEY, arrayOf(Contact.CONTACT.ID), true)
val L_CONTACT_ROLE__L_CONTACT_ROLE_ROLE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LContactRole.L_CONTACT_ROLE, DSL.name("l_contact_role_role_id_fkey"), arrayOf(LContactRole.L_CONTACT_ROLE.ROLE_ID), ROLE_PKEY, arrayOf(RoleContact.ROLE_CONTACT.ID), true)
val L_VISITE_ANOMALIE__L_VISITE_ANOMALIE_ANOMALIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LVisiteAnomalie.L_VISITE_ANOMALIE, DSL.name("l_visite_anomalie_anomalie_id_fkey"), arrayOf(LVisiteAnomalie.L_VISITE_ANOMALIE.ANOMALIE_ID), ANOMALIE_PKEY, arrayOf(Anomalie.ANOMALIE.ID), true)
val L_VISITE_ANOMALIE__L_VISITE_ANOMALIE_VISITE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(LVisiteAnomalie.L_VISITE_ANOMALIE, DSL.name("l_visite_anomalie_visite_id_fkey"), arrayOf(LVisiteAnomalie.L_VISITE_ANOMALIE.VISITE_ID), remocra.db.jooq.incoming.keys.VISITE_PKEY, arrayOf(Visite.VISITE.ID), true)
val NEW_PEI__NEW_PEI_NEW_PEI_COMMUNE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(NewPei.NEW_PEI, DSL.name("new_pei_new_pei_commune_id_fkey"), arrayOf(NewPei.NEW_PEI.COMMUNE_ID), COMMUNE_PKEY, arrayOf(Commune.COMMUNE.ID), true)
val NEW_PEI__NEW_PEI_NEW_PEI_GESTIONNAIRE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(NewPei.NEW_PEI, DSL.name("new_pei_new_pei_gestionnaire_id_fkey"), arrayOf(NewPei.NEW_PEI.GESTIONNAIRE_ID), remocra.db.jooq.remocra.keys.GESTIONNAIRE_PKEY, arrayOf(remocra.db.jooq.remocra.tables.Gestionnaire.GESTIONNAIRE.ID), true)
val NEW_PEI__NEW_PEI_NEW_PEI_LIEU_DIT_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(NewPei.NEW_PEI, DSL.name("new_pei_new_pei_lieu_dit_id_fkey"), arrayOf(NewPei.NEW_PEI.LIEU_DIT_ID), LIEU_DIT_PKEY, arrayOf(LieuDit.LIEU_DIT.ID), true)
val NEW_PEI__NEW_PEI_NEW_PEI_NATURE_DECI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(NewPei.NEW_PEI, DSL.name("new_pei_new_pei_nature_deci_id_fkey"), arrayOf(NewPei.NEW_PEI.NATURE_DECI_ID), NATURE_DECI_PKEY, arrayOf(NatureDeci.NATURE_DECI.ID), true)
val NEW_PEI__NEW_PEI_NEW_PEI_NATURE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(NewPei.NEW_PEI, DSL.name("new_pei_new_pei_nature_id_fkey"), arrayOf(NewPei.NEW_PEI.NATURE_ID), NATURE_PKEY, arrayOf(Nature.NATURE.ID), true)
val NEW_PEI__NEW_PEI_NEW_PEI_VOIE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(NewPei.NEW_PEI, DSL.name("new_pei_new_pei_voie_id_fkey"), arrayOf(NewPei.NEW_PEI.VOIE_ID), VOIE_PKEY, arrayOf(Voie.VOIE.ID), true)
val PHOTO_PEI__PHOTO_PEI_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(PhotoPei.PHOTO_PEI, DSL.name("photo_pei_pei_id_fkey"), arrayOf(PhotoPei.PHOTO_PEI.PEI_ID), PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val VISITE__VISITE_VISITE_PEI_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Visite.VISITE, DSL.name("visite_visite_pei_id_fkey"), arrayOf(Visite.VISITE.PEI_ID), PEI_PKEY, arrayOf(Pei.PEI.ID), true)
val VISITE__VISITE_VISITE_TOURNEE_ID_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(Visite.VISITE, DSL.name("visite_visite_tournee_id_fkey"), arrayOf(Visite.VISITE.TOURNEE_ID), remocra.db.jooq.incoming.keys.TOURNEE_PKEY, arrayOf(Tournee.TOURNEE.ID), true)
val VISITE_CTRL_DEBIT_PRESSION__VISITE_CTRL_DEBIT_PRESSION_VISITE_CTRL_DEBIT_PRESSION_VISI_FKEY: ForeignKey<Record, Record> = Internal.createForeignKey(VisiteCtrlDebitPression.VISITE_CTRL_DEBIT_PRESSION, DSL.name("visite_ctrl_debit_pression_visite_ctrl_debit_pression_visi_fkey"), arrayOf(VisiteCtrlDebitPression.VISITE_CTRL_DEBIT_PRESSION.VISITE_ID), remocra.db.jooq.incoming.keys.VISITE_PKEY, arrayOf(Visite.VISITE.ID), true)
