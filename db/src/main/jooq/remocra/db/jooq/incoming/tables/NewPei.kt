/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.incoming.tables

import org.jooq.Check
import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.incoming.Incoming
import remocra.db.jooq.incoming.keys.NEW_PEI_PKEY
import remocra.db.jooq.incoming.keys.NEW_PEI__NEW_PEI_NEW_PEI_COMMUNE_ID_FKEY
import remocra.db.jooq.incoming.keys.NEW_PEI__NEW_PEI_NEW_PEI_DOMAINE_ID_FKEY
import remocra.db.jooq.incoming.keys.NEW_PEI__NEW_PEI_NEW_PEI_GESTIONNAIRE_ID_FKEY
import remocra.db.jooq.incoming.keys.NEW_PEI__NEW_PEI_NEW_PEI_LIEU_DIT_ID_FKEY
import remocra.db.jooq.incoming.keys.NEW_PEI__NEW_PEI_NEW_PEI_NATURE_DECI_ID_FKEY
import remocra.db.jooq.incoming.keys.NEW_PEI__NEW_PEI_NEW_PEI_NATURE_ID_FKEY
import remocra.db.jooq.incoming.keys.NEW_PEI__NEW_PEI_NEW_PEI_VOIE_ID_FKEY
import remocra.db.jooq.remocra.enums.TypePei
import remocra.db.jooq.remocra.tables.Commune.CommunePath
import remocra.db.jooq.remocra.tables.Domaine.DomainePath
import remocra.db.jooq.remocra.tables.Gestionnaire.GestionnairePath
import remocra.db.jooq.remocra.tables.LieuDit.LieuDitPath
import remocra.db.jooq.remocra.tables.Nature.NaturePath
import remocra.db.jooq.remocra.tables.NatureDeci.NatureDeciPath
import remocra.db.jooq.remocra.tables.Voie.VoiePath
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection
import kotlin.collections.List

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class NewPei(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Incoming.INCOMING,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>incoming.new_pei</code>
         */
        val NEW_PEI: NewPei = NewPei()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>incoming.new_pei.new_pei_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_type_pei</code>.
     */
    val TYPE_PEI: TableField<Record, TypePei?> = createField(DSL.name("new_pei_type_pei"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(TypePei::class.java), this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_voie_id</code>.
     */
    val VOIE_ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_voie_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("new_pei_geometrie"), SQLDataType.GEOMETRY.nullable(false), this, "", GeometryBinding())

    /**
     * The column <code>incoming.new_pei.new_pei_lieu_dit_id</code>.
     */
    val LIEU_DIT_ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_lieu_dit_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_observation</code>.
     */
    val OBSERVATION: TableField<Record, String?> = createField(DSL.name("new_pei_observation"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_commune_id</code>.
     */
    val COMMUNE_ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_commune_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_nature_id</code>.
     */
    val NATURE_ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_nature_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_nature_deci_id</code>.
     */
    val NATURE_DECI_ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_nature_deci_id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_gestionnaire_id</code>.
     */
    val GESTIONNAIRE_ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_gestionnaire_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>incoming.new_pei.new_pei_domaine_id</code>.
     */
    val DOMAINE_ID: TableField<Record, UUID?> = createField(DSL.name("new_pei_domaine_id"), SQLDataType.UUID.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>incoming.new_pei</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>incoming.new_pei</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>incoming.new_pei</code> table reference
     */
    constructor() : this(DSL.name("new_pei"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, NEW_PEI, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class NewPeiPath : NewPei, Path<Record> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, Record>?, parentPath: InverseForeignKey<out Record, Record>?) : super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<Record>) : super(alias, aliased)
        override fun `as`(alias: String): NewPeiPath = NewPeiPath(DSL.name(alias), this)
        override fun `as`(alias: Name): NewPeiPath = NewPeiPath(alias, this)
        override fun `as`(alias: Table<*>): NewPeiPath = NewPeiPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Incoming.INCOMING
    override fun getPrimaryKey(): UniqueKey<Record> = NEW_PEI_PKEY
    override fun getReferences(): List<ForeignKey<Record, *>> = listOf(NEW_PEI__NEW_PEI_NEW_PEI_COMMUNE_ID_FKEY, NEW_PEI__NEW_PEI_NEW_PEI_DOMAINE_ID_FKEY, NEW_PEI__NEW_PEI_NEW_PEI_GESTIONNAIRE_ID_FKEY, NEW_PEI__NEW_PEI_NEW_PEI_LIEU_DIT_ID_FKEY, NEW_PEI__NEW_PEI_NEW_PEI_NATURE_DECI_ID_FKEY, NEW_PEI__NEW_PEI_NEW_PEI_NATURE_ID_FKEY, NEW_PEI__NEW_PEI_NEW_PEI_VOIE_ID_FKEY)

    private lateinit var _commune: CommunePath

    /**
     * Get the implicit join path to the <code>remocra.commune</code> table.
     */
    fun commune(): CommunePath {
        if (!this::_commune.isInitialized) {
            _commune = CommunePath(this, NEW_PEI__NEW_PEI_NEW_PEI_COMMUNE_ID_FKEY, null)
        }

        return _commune
    }

    val commune: CommunePath
        get(): CommunePath = commune()

    private lateinit var _domaine: DomainePath

    /**
     * Get the implicit join path to the <code>remocra.domaine</code> table.
     */
    fun domaine(): DomainePath {
        if (!this::_domaine.isInitialized) {
            _domaine = DomainePath(this, NEW_PEI__NEW_PEI_NEW_PEI_DOMAINE_ID_FKEY, null)
        }

        return _domaine
    }

    val domaine: DomainePath
        get(): DomainePath = domaine()

    private lateinit var _gestionnaire: GestionnairePath

    /**
     * Get the implicit join path to the <code>remocra.gestionnaire</code>
     * table.
     */
    fun gestionnaire(): GestionnairePath {
        if (!this::_gestionnaire.isInitialized) {
            _gestionnaire = GestionnairePath(this, NEW_PEI__NEW_PEI_NEW_PEI_GESTIONNAIRE_ID_FKEY, null)
        }

        return _gestionnaire
    }

    val gestionnaire: GestionnairePath
        get(): GestionnairePath = gestionnaire()

    private lateinit var _lieuDit: LieuDitPath

    /**
     * Get the implicit join path to the <code>remocra.lieu_dit</code> table.
     */
    fun lieuDit(): LieuDitPath {
        if (!this::_lieuDit.isInitialized) {
            _lieuDit = LieuDitPath(this, NEW_PEI__NEW_PEI_NEW_PEI_LIEU_DIT_ID_FKEY, null)
        }

        return _lieuDit
    }

    val lieuDit: LieuDitPath
        get(): LieuDitPath = lieuDit()

    private lateinit var _natureDeci: NatureDeciPath

    /**
     * Get the implicit join path to the <code>remocra.nature_deci</code> table.
     */
    fun natureDeci(): NatureDeciPath {
        if (!this::_natureDeci.isInitialized) {
            _natureDeci = NatureDeciPath(this, NEW_PEI__NEW_PEI_NEW_PEI_NATURE_DECI_ID_FKEY, null)
        }

        return _natureDeci
    }

    val natureDeci: NatureDeciPath
        get(): NatureDeciPath = natureDeci()

    private lateinit var _nature: NaturePath

    /**
     * Get the implicit join path to the <code>remocra.nature</code> table.
     */
    fun nature(): NaturePath {
        if (!this::_nature.isInitialized) {
            _nature = NaturePath(this, NEW_PEI__NEW_PEI_NEW_PEI_NATURE_ID_FKEY, null)
        }

        return _nature
    }

    val nature: NaturePath
        get(): NaturePath = nature()

    private lateinit var _voie: VoiePath

    /**
     * Get the implicit join path to the <code>remocra.voie</code> table.
     */
    fun voie(): VoiePath {
        if (!this::_voie.isInitialized) {
            _voie = VoiePath(this, NEW_PEI__NEW_PEI_NEW_PEI_VOIE_ID_FKEY, null)
        }

        return _voie
    }

    val voie: VoiePath
        get(): VoiePath = voie()
    override fun getChecks(): List<Check<Record>> = listOf(
        Internal.createCheck(this, DSL.name("geometrie_new_pei"), "((geometrytype(new_pei_geometrie) = 'POINT'::text))", true),
    )
    override fun `as`(alias: String): NewPei = NewPei(DSL.name(alias), this)
    override fun `as`(alias: Name): NewPei = NewPei(alias, this)
    override fun `as`(alias: Table<*>): NewPei = NewPei(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): NewPei = NewPei(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): NewPei = NewPei(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): NewPei = NewPei(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): NewPei = NewPei(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): NewPei = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): NewPei = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): NewPei = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): NewPei = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): NewPei = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): NewPei = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): NewPei = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): NewPei = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): NewPei = where(DSL.notExists(select))
}
