/*
 * This file is generated by jOOQ.
 */
package remocra.db.jooq.entrepotsig.tables

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl
import org.locationtech.jts.geom.Geometry
import remocra.db.jooq.bindings.GeometryBinding
import remocra.db.jooq.entrepotsig.Entrepotsig
import java.util.UUID
import javax.annotation.processing.Generated
import kotlin.collections.Collection

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = [
        "https://www.jooq.org",
        "jOOQ version:3.19.11",
    ],
    comments = "This class is generated by jOOQ",
)
@Suppress("UNCHECKED_CAST")
open class VVoieSig(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, Record>?,
    parentPath: InverseForeignKey<out Record, Record>?,
    aliased: Table<Record>?,
    parameters: Array<Field<*>?>?,
    where: Condition?,
) : TableImpl<Record>(
    alias,
    Entrepotsig.ENTREPOTSIG,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view(
        """
    create view "v_voie_sig" as  SELECT voie_id AS v_voie_sig_id,
     voie_libelle AS v_voie_sig_libelle,
     voie_geometrie AS v_voie_sig_geometrie,
     voie_commune_id AS v_voie_sig_commune_id
    FROM voie;
    """,
    ),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>entrepotsig.v_voie_sig</code>
         */
        val V_VOIE_SIG: VVoieSig = VVoieSig()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<Record> = Record::class.java

    /**
     * The column <code>entrepotsig.v_voie_sig.v_voie_sig_id</code>.
     */
    val ID: TableField<Record, UUID?> = createField(DSL.name("v_voie_sig_id"), SQLDataType.UUID, this, "")

    /**
     * The column <code>entrepotsig.v_voie_sig.v_voie_sig_libelle</code>.
     */
    val LIBELLE: TableField<Record, String?> = createField(DSL.name("v_voie_sig_libelle"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>entrepotsig.v_voie_sig.v_voie_sig_geometrie</code>.
     */
    val GEOMETRIE: TableField<Record, Geometry?> = createField(DSL.name("v_voie_sig_geometrie"), SQLDataType.GEOMETRY, this, "", GeometryBinding())

    /**
     * The column <code>entrepotsig.v_voie_sig.v_voie_sig_commune_id</code>.
     */
    val COMMUNE_ID: TableField<Record, UUID?> = createField(DSL.name("v_voie_sig_commune_id"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<Record>?) : this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<Record>?, parameters: Array<Field<*>?>?) : this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<Record>?, where: Condition?) : this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>entrepotsig.v_voie_sig</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>entrepotsig.v_voie_sig</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>entrepotsig.v_voie_sig</code> table reference
     */
    constructor() : this(DSL.name("v_voie_sig"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Entrepotsig.ENTREPOTSIG
    override fun `as`(alias: String): VVoieSig = VVoieSig(DSL.name(alias), this)
    override fun `as`(alias: Name): VVoieSig = VVoieSig(alias, this)
    override fun `as`(alias: Table<*>): VVoieSig = VVoieSig(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): VVoieSig = VVoieSig(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): VVoieSig = VVoieSig(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): VVoieSig = VVoieSig(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): VVoieSig = VVoieSig(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): VVoieSig = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): VVoieSig = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): VVoieSig = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): VVoieSig = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): VVoieSig = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): VVoieSig = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): VVoieSig = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): VVoieSig = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): VVoieSig = where(DSL.notExists(select))
}
